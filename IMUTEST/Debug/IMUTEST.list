
IMUTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006b08  08006b08  00007b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f04  08006f04  000081d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f04  08006f04  00007f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f0c  08006f0c  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f0c  08006f0c  00007f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f10  08006f10  00007f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006f14  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d8  080070ec  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080070ec  00008424  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d26a  00000000  00000000  00008206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c23  00000000  00000000  00015470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00017098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000843  00000000  00000000  00017b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d4f  00000000  00000000  00018383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1e6  00000000  00000000  000400d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f44b9  00000000  00000000  0004e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142771  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  001427b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00146210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08006af0 	.word	0x08006af0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08006af0 	.word	0x08006af0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Route printf() to USART3 so text shows on the ST-LINK Virtual COM port */
int _write(int file, char *ptr, int len) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	b29a      	uxth	r2, r3
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	4804      	ldr	r0, [pc, #16]	@ (8000644 <_write+0x28>)
 8000634:	f003 f894 	bl	8003760 <HAL_UART_Transmit>
  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000248 	.word	0x20000248

08000648 <i2c_write>:

/* I2C helpers */
static HAL_StatusTypeDef i2c_write(uint16_t addr, uint8_t reg, uint8_t val) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	460b      	mov	r3, r1
 8000654:	717b      	strb	r3, [r7, #5]
 8000656:	4613      	mov	r3, r2
 8000658:	713b      	strb	r3, [r7, #4]
  return HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 100);
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	b29a      	uxth	r2, r3
 800065e:	88f9      	ldrh	r1, [r7, #6]
 8000660:	2364      	movs	r3, #100	@ 0x64
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <i2c_write+0x38>)
 8000670:	f001 f9a6 	bl	80019c0 <HAL_I2C_Mem_Write>
 8000674:	4603      	mov	r3, r0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001f4 	.word	0x200001f4

08000684 <i2c_read>:
static HAL_StatusTypeDef i2c_read(uint16_t addr, uint8_t reg, uint8_t *buf, uint16_t len) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af04      	add	r7, sp, #16
 800068a:	60ba      	str	r2, [r7, #8]
 800068c:	461a      	mov	r2, r3
 800068e:	4603      	mov	r3, r0
 8000690:	81fb      	strh	r3, [r7, #14]
 8000692:	460b      	mov	r3, r1
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
  return HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 100);
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	b29a      	uxth	r2, r3
 800069e:	89f9      	ldrh	r1, [r7, #14]
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2301      	movs	r3, #1
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <i2c_read+0x3c>)
 80006b0:	f001 fa9a 	bl	8001be8 <HAL_I2C_Mem_Read>
 80006b4:	4603      	mov	r3, r0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200001f4 	.word	0x200001f4

080006c4 <lsm6_detect>:



/* Try Adafruit default 0x6A first, then 0x6B. Accept DS3 (0x69) and also report DSOX (0x6C). */
static int lsm6_detect(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  uint8_t id = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]

  if (i2c_read(ADDR_6A, LSM6DS3_WHO_AM_I, &id, 1) == HAL_OK) {
 80006ce:	1dfa      	adds	r2, r7, #7
 80006d0:	2301      	movs	r3, #1
 80006d2:	210f      	movs	r1, #15
 80006d4:	20d4      	movs	r0, #212	@ 0xd4
 80006d6:	f7ff ffd5 	bl	8000684 <i2c_read>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d112      	bne.n	8000706 <lsm6_detect+0x42>
    printf("WHO_AM_I @0x6A = 0x%02X\r\n", id);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4819      	ldr	r0, [pc, #100]	@ (800074c <lsm6_detect+0x88>)
 80006e6:	f004 fa3b 	bl	8004b60 <iprintf>
    if (id == 0x69 || id == 0x6A || id == 0x6C) { lsm6_addr = ADDR_6A; return 0; }
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b69      	cmp	r3, #105	@ 0x69
 80006ee:	d005      	beq.n	80006fc <lsm6_detect+0x38>
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b6a      	cmp	r3, #106	@ 0x6a
 80006f4:	d002      	beq.n	80006fc <lsm6_detect+0x38>
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b6c      	cmp	r3, #108	@ 0x6c
 80006fa:	d104      	bne.n	8000706 <lsm6_detect+0x42>
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <lsm6_detect+0x8c>)
 80006fe:	22d4      	movs	r2, #212	@ 0xd4
 8000700:	801a      	strh	r2, [r3, #0]
 8000702:	2300      	movs	r3, #0
 8000704:	e01d      	b.n	8000742 <lsm6_detect+0x7e>
  }
  if (i2c_read(ADDR_6B, LSM6DS3_WHO_AM_I, &id, 1) == HAL_OK) {
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	2301      	movs	r3, #1
 800070a:	210f      	movs	r1, #15
 800070c:	20d6      	movs	r0, #214	@ 0xd6
 800070e:	f7ff ffb9 	bl	8000684 <i2c_read>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d112      	bne.n	800073e <lsm6_detect+0x7a>
    printf("WHO_AM_I @0x6B = 0x%02X\r\n", id);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4619      	mov	r1, r3
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <lsm6_detect+0x90>)
 800071e:	f004 fa1f 	bl	8004b60 <iprintf>
    if (id == 0x69 || id == 0x6A || id == 0x6C) { lsm6_addr = ADDR_6B; return 0; }
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b69      	cmp	r3, #105	@ 0x69
 8000726:	d005      	beq.n	8000734 <lsm6_detect+0x70>
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b6a      	cmp	r3, #106	@ 0x6a
 800072c:	d002      	beq.n	8000734 <lsm6_detect+0x70>
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b6c      	cmp	r3, #108	@ 0x6c
 8000732:	d104      	bne.n	800073e <lsm6_detect+0x7a>
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <lsm6_detect+0x8c>)
 8000736:	22d6      	movs	r2, #214	@ 0xd6
 8000738:	801a      	strh	r2, [r3, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	e001      	b.n	8000742 <lsm6_detect+0x7e>
  }
  return -1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	08006b08 	.word	0x08006b08
 8000750:	20000000 	.word	0x20000000
 8000754:	08006b24 	.word	0x08006b24

08000758 <lsm6_init>:


/* Configure: BDU+auto-increment, accel 104Hz ±4g, gyro 104Hz 2000dps */
static int lsm6_init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* CTRL3_C: BDU=1 (bit6), IF_INC=1 (bit2) => 0x44 */
  if (i2c_write(lsm6_addr, LSM6DS3_CTRL3_C, 0x44) != HAL_OK) return -1;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <lsm6_init+0x58>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	2244      	movs	r2, #68	@ 0x44
 8000762:	2112      	movs	r1, #18
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff6f 	bl	8000648 <i2c_write>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <lsm6_init+0x1e>
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	e01a      	b.n	80007ac <lsm6_init+0x54>

  /* CTRL1_XL: ODR=104Hz (0100<<4), FS=±4g (10<<2), BW=00 => 0x48 */
  if (i2c_write(lsm6_addr, LSM6DS3_CTRL1_XL, 0x48) != HAL_OK) return -1;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <lsm6_init+0x58>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2248      	movs	r2, #72	@ 0x48
 800077c:	2110      	movs	r1, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff62 	bl	8000648 <i2c_write>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <lsm6_init+0x38>
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e00d      	b.n	80007ac <lsm6_init+0x54>

  /* CTRL2_G:  ODR=104Hz (0100<<4), FS=2000dps (11<<2) => 0x4C */
  if (i2c_write(lsm6_addr, LSM6DS3_CTRL2_G, 0x4C) != HAL_OK) return -1;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <lsm6_init+0x58>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	224c      	movs	r2, #76	@ 0x4c
 8000796:	2111      	movs	r1, #17
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff55 	bl	8000648 <i2c_write>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <lsm6_init+0x52>
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	e000      	b.n	80007ac <lsm6_init+0x54>

  return 0;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000

080007b4 <lsm6_read_raw>:

static void lsm6_read_raw(int16_t *gx, int16_t *gy, int16_t *gz,
                          int16_t *ax, int16_t *ay, int16_t *az) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	603b      	str	r3, [r7, #0]
  uint8_t buf[6];

  if (i2c_read(lsm6_addr, LSM6DS3_OUTX_L_G, buf, 6) == HAL_OK) {
 80007c2:	4b39      	ldr	r3, [pc, #228]	@ (80008a8 <lsm6_read_raw+0xf4>)
 80007c4:	8818      	ldrh	r0, [r3, #0]
 80007c6:	f107 0210 	add.w	r2, r7, #16
 80007ca:	2306      	movs	r3, #6
 80007cc:	2122      	movs	r1, #34	@ 0x22
 80007ce:	f7ff ff59 	bl	8000684 <i2c_read>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d11e      	bne.n	8000816 <lsm6_read_raw+0x62>
    *gx = (int16_t)((buf[1] << 8) | buf[0]);
 80007d8:	7c7b      	ldrb	r3, [r7, #17]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21a      	sxth	r2, r3
 80007e0:	7c3b      	ldrb	r3, [r7, #16]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	801a      	strh	r2, [r3, #0]
    *gy = (int16_t)((buf[3] << 8) | buf[2]);
 80007ec:	7cfb      	ldrb	r3, [r7, #19]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	7cbb      	ldrb	r3, [r7, #18]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	801a      	strh	r2, [r3, #0]
    *gz = (int16_t)((buf[5] << 8) | buf[4]);
 8000800:	7d7b      	ldrb	r3, [r7, #21]
 8000802:	b21b      	sxth	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b21a      	sxth	r2, r3
 8000808:	7d3b      	ldrb	r3, [r7, #20]
 800080a:	b21b      	sxth	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b21a      	sxth	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	801a      	strh	r2, [r3, #0]
 8000814:	e00c      	b.n	8000830 <lsm6_read_raw+0x7c>
  } else {
    *gx = *gy = *gz = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	801a      	strh	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	f9b3 2000 	ldrsh.w	r2, [r3]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	801a      	strh	r2, [r3, #0]
  }

  if (i2c_read(lsm6_addr, LSM6DS3_OUTX_L_XL, buf, 6) == HAL_OK) {
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <lsm6_read_raw+0xf4>)
 8000832:	8818      	ldrh	r0, [r3, #0]
 8000834:	f107 0210 	add.w	r2, r7, #16
 8000838:	2306      	movs	r3, #6
 800083a:	2128      	movs	r1, #40	@ 0x28
 800083c:	f7ff ff22 	bl	8000684 <i2c_read>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11e      	bne.n	8000884 <lsm6_read_raw+0xd0>
    *ax = (int16_t)((buf[1] << 8) | buf[0]);
 8000846:	7c7b      	ldrb	r3, [r7, #17]
 8000848:	b21b      	sxth	r3, r3
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b21a      	sxth	r2, r3
 800084e:	7c3b      	ldrb	r3, [r7, #16]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	801a      	strh	r2, [r3, #0]
    *ay = (int16_t)((buf[3] << 8) | buf[2]);
 800085a:	7cfb      	ldrb	r3, [r7, #19]
 800085c:	b21b      	sxth	r3, r3
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	7cbb      	ldrb	r3, [r7, #18]
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b21a      	sxth	r2, r3
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	801a      	strh	r2, [r3, #0]
    *az = (int16_t)((buf[5] << 8) | buf[4]);
 800086e:	7d7b      	ldrb	r3, [r7, #21]
 8000870:	b21b      	sxth	r3, r3
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	7d3b      	ldrb	r3, [r7, #20]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21a      	sxth	r2, r3
 800087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000880:	801a      	strh	r2, [r3, #0]
  } else {
    *ax = *ay = *az = 0;
  }
}
 8000882:	e00c      	b.n	800089e <lsm6_read_raw+0xea>
    *ax = *ay = *az = 0;
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	801a      	strh	r2, [r3, #0]
 800088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	801a      	strh	r2, [r3, #0]
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	f9b3 2000 	ldrsh.w	r2, [r3]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	801a      	strh	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000000 	.word	0x20000000

080008ac <lsm6_convert>:

static void lsm6_convert(int16_t gx, int16_t gy, int16_t gz,
                         int16_t ax, int16_t ay, int16_t az,
                         float *gx_dps, float *gy_dps, float *gz_dps,
                         float *ax_g, float *ay_g, float *az_g) {
 80008ac:	b490      	push	{r4, r7}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4604      	mov	r4, r0
 80008b4:	4608      	mov	r0, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	4623      	mov	r3, r4
 80008bc:	80fb      	strh	r3, [r7, #6]
 80008be:	4603      	mov	r3, r0
 80008c0:	80bb      	strh	r3, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	807b      	strh	r3, [r7, #2]
 80008c6:	4613      	mov	r3, r2
 80008c8:	803b      	strh	r3, [r7, #0]
  /* Sensitivities:
     Gyro 2000 dps: 0.07 dps/LSB
     Accel ±4 g:    0.122 mg/LSB = 0.000122 g/LSB */
  *gx_dps = gx * 0.07f;
 80008ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000970 <lsm6_convert+0xc4>
 80008da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	edc3 7a00 	vstr	s15, [r3]
  *gy_dps = gy * 0.07f;
 80008e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000970 <lsm6_convert+0xc4>
 80008f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	edc3 7a00 	vstr	s15, [r3]
  *gz_dps = gz * 0.07f;
 80008fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000902:	ee07 3a90 	vmov	s15, r3
 8000906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800090a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000970 <lsm6_convert+0xc4>
 800090e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	edc3 7a00 	vstr	s15, [r3]

  *ax_g = ax * 0.000122f;
 8000918:	f9b7 3000 	ldrsh.w	r3, [r7]
 800091c:	ee07 3a90 	vmov	s15, r3
 8000920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000924:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000974 <lsm6_convert+0xc8>
 8000928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092e:	edc3 7a00 	vstr	s15, [r3]
  *ay_g = ay * 0.000122f;
 8000932:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800093e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000974 <lsm6_convert+0xc8>
 8000942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000948:	edc3 7a00 	vstr	s15, [r3]
  *az_g = az * 0.000122f;
 800094c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000958:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000974 <lsm6_convert+0xc8>
 800095c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000962:	edc3 7a00 	vstr	s15, [r3]
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bc90      	pop	{r4, r7}
 800096e:	4770      	bx	lr
 8000970:	3d8f5c29 	.word	0x3d8f5c29
 8000974:	38ffda40 	.word	0x38ffda40

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	b095      	sub	sp, #84	@ 0x54
 800097c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f000 fc56 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f885 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f000 f94f 	bl	8000c28 <MX_GPIO_Init>
  MX_I2C1_Init();
 800098a:	f000 f8dd 	bl	8000b48 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800098e:	f000 f91b 	bl	8000bc8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL); /* unbuffered printf */
 8000992:	4b3d      	ldr	r3, [pc, #244]	@ (8000a88 <main+0x110>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f004 f8f2 	bl	8004b84 <setbuf>

  if (lsm6_detect() != 0) { while (1) { HAL_Delay(500); } }
 80009a0:	f7ff fe90 	bl	80006c4 <lsm6_detect>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <main+0x3c>
 80009aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ae:	f000 fc9b 	bl	80012e8 <HAL_Delay>
 80009b2:	e7fa      	b.n	80009aa <main+0x32>
    if (lsm6_init()   != 0) { while (1) { HAL_Delay(500); } }
 80009b4:	f7ff fed0 	bl	8000758 <lsm6_init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d004      	beq.n	80009c8 <main+0x50>
 80009be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009c2:	f000 fc91 	bl	80012e8 <HAL_Delay>
 80009c6:	e7fa      	b.n	80009be <main+0x46>

    /* USER CODE BEGIN 3 */
    int16_t gx, gy, gz, ax, ay, az;
    float gx_dps, gy_dps, gz_dps, ax_g, ay_g, az_g;

    lsm6_read_raw(&gx, &gy, &gz, &ax, &ay, &az);
 80009c8:	f107 0420 	add.w	r4, r7, #32
 80009cc:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80009d0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80009d4:	f107 0026 	add.w	r0, r7, #38	@ 0x26
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f107 031e 	add.w	r3, r7, #30
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	4623      	mov	r3, r4
 80009e6:	f7ff fee5 	bl	80007b4 <lsm6_read_raw>
    lsm6_convert(gx, gy, gz, ax, ay, az,
 80009ea:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	@ 0x26
 80009ee:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	@ 0x24
 80009f2:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	@ 0x22
 80009f6:	f9b7 6020 	ldrsh.w	r6, [r7, #32]
 80009fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009fe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000a02:	1d39      	adds	r1, r7, #4
 8000a04:	9107      	str	r1, [sp, #28]
 8000a06:	f107 0108 	add.w	r1, r7, #8
 8000a0a:	9106      	str	r1, [sp, #24]
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	9105      	str	r1, [sp, #20]
 8000a12:	f107 0110 	add.w	r1, r7, #16
 8000a16:	9104      	str	r1, [sp, #16]
 8000a18:	f107 0114 	add.w	r1, r7, #20
 8000a1c:	9103      	str	r1, [sp, #12]
 8000a1e:	f107 0118 	add.w	r1, r7, #24
 8000a22:	9102      	str	r1, [sp, #8]
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4633      	mov	r3, r6
 8000a2a:	462a      	mov	r2, r5
 8000a2c:	4621      	mov	r1, r4
 8000a2e:	f7ff ff3d 	bl	80008ac <lsm6_convert>
                 &gx_dps, &gy_dps, &gz_dps, &ax_g, &ay_g, &az_g);

    printf("G[dps]: %6.1f %6.1f %6.1f | A[g]: %6.3f %6.3f %6.3f\r\n",
 8000a32:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a36:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000a3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a42:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a46:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a4a:	edd7 5a03 	vldr	s11, [r7, #12]
 8000a4e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000a52:	edd7 4a02 	vldr	s9, [r7, #8]
 8000a56:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000a5a:	edd7 3a01 	vldr	s7, [r7, #4]
 8000a5e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000a62:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000a66:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000a6a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000a6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a72:	ed8d 7b00 	vstr	d7, [sp]
 8000a76:	ec53 2b12 	vmov	r2, r3, d2
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <main+0x114>)
 8000a7c:	f004 f870 	bl	8004b60 <iprintf>
           gx_dps, gy_dps, gz_dps, ax_g, ay_g, az_g);


    HAL_Delay(100); /* ~10 Hz print rate */
 8000a80:	2064      	movs	r0, #100	@ 0x64
 8000a82:	f000 fc31 	bl	80012e8 <HAL_Delay>
  {
 8000a86:	e79f      	b.n	80009c8 <main+0x50>
 8000a88:	2000001c 	.word	0x2000001c
 8000a8c:	08006b40 	.word	0x08006b40

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	@ 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2234      	movs	r2, #52	@ 0x34
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 f96f 	bl	8004d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <SystemClock_Config+0xb0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SystemClock_Config+0xb0>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SystemClock_Config+0xb0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <SystemClock_Config+0xb4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b44 <SystemClock_Config+0xb4>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <SystemClock_Config+0xb4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2310      	movs	r3, #16
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fce7 	bl	80024d0 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f992 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 ff7f 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b34:	f000 f97c 	bl	8000e30 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3750      	adds	r7, #80	@ 0x50
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc0 <MX_I2C1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b54:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc4 <MX_I2C1_Init+0x7c>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b84:	f000 fe80 	bl	8001888 <HAL_I2C_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8e:	f000 f94f 	bl	8000e30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000b96:	f001 fc03 	bl	80023a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f000 f946 	bl	8000e30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_I2C1_Init+0x74>)
 8000ba8:	f001 fc45 	bl	8002436 <HAL_I2CEx_ConfigDigitalFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 f93d 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001f4 	.word	0x200001f4
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	2000090e 	.word	0x2000090e

08000bc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bce:	4a15      	ldr	r2, [pc, #84]	@ (8000c24 <MX_USART3_UART_Init+0x5c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_USART3_UART_Init+0x58>)
 8000c0c:	f002 fd5a 	bl	80036c4 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f90b 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000248 	.word	0x20000248
 8000c24:	40004800 	.word	0x40004800

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b77      	ldr	r3, [pc, #476]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a76      	ldr	r2, [pc, #472]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b74      	ldr	r3, [pc, #464]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	4b71      	ldr	r3, [pc, #452]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a70      	ldr	r2, [pc, #448]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b6e      	ldr	r3, [pc, #440]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b6b      	ldr	r3, [pc, #428]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a6a      	ldr	r2, [pc, #424]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b68      	ldr	r3, [pc, #416]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b65      	ldr	r3, [pc, #404]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a64      	ldr	r2, [pc, #400]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b62      	ldr	r3, [pc, #392]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b5c      	ldr	r3, [pc, #368]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb6:	4b59      	ldr	r3, [pc, #356]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a58      	ldr	r2, [pc, #352]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b56      	ldr	r3, [pc, #344]	@ (8000e1c <MX_GPIO_Init+0x1f4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000cd4:	4852      	ldr	r0, [pc, #328]	@ (8000e20 <MX_GPIO_Init+0x1f8>)
 8000cd6:	f000 fdbd 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2140      	movs	r1, #64	@ 0x40
 8000cde:	4851      	ldr	r0, [pc, #324]	@ (8000e24 <MX_GPIO_Init+0x1fc>)
 8000ce0:	f000 fdb8 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	484b      	ldr	r0, [pc, #300]	@ (8000e28 <MX_GPIO_Init+0x200>)
 8000cfc:	f000 fbfe 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d00:	2332      	movs	r3, #50	@ 0x32
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d10:	230b      	movs	r3, #11
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4843      	ldr	r0, [pc, #268]	@ (8000e28 <MX_GPIO_Init+0x200>)
 8000d1c:	f000 fbee 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d20:	2386      	movs	r3, #134	@ 0x86
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d30:	230b      	movs	r3, #11
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	483c      	ldr	r0, [pc, #240]	@ (8000e2c <MX_GPIO_Init+0x204>)
 8000d3c:	f000 fbde 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d40:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4831      	ldr	r0, [pc, #196]	@ (8000e20 <MX_GPIO_Init+0x1f8>)
 8000d5a:	f000 fbcf 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d70:	230b      	movs	r3, #11
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4829      	ldr	r0, [pc, #164]	@ (8000e20 <MX_GPIO_Init+0x1f8>)
 8000d7c:	f000 fbbe 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d80:	2340      	movs	r3, #64	@ 0x40
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4823      	ldr	r0, [pc, #140]	@ (8000e24 <MX_GPIO_Init+0x1fc>)
 8000d98:	f000 fbb0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481d      	ldr	r0, [pc, #116]	@ (8000e24 <MX_GPIO_Init+0x1fc>)
 8000db0:	f000 fba4 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000db4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <MX_GPIO_Init+0x204>)
 8000dd2:	f000 fb93 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4810      	ldr	r0, [pc, #64]	@ (8000e2c <MX_GPIO_Init+0x204>)
 8000dec:	f000 fb86 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000df0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e02:	230b      	movs	r3, #11
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_GPIO_Init+0x1fc>)
 8000e0e:	f000 fb75 	bl	80014fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	@ 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <Error_Handler+0x8>

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_MspInit+0x44>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ae      	sub	sp, #184	@ 0xb8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2290      	movs	r2, #144	@ 0x90
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 ff6c 	bl	8004d82 <memset>
  if(hi2c->Instance==I2C1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a22      	ldr	r2, [pc, #136]	@ (8000f38 <HAL_I2C_MspInit+0xb4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d13c      	bne.n	8000f2e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 ffd6 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ece:	f7ff ffaf 	bl	8000e30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a19      	ldr	r2, [pc, #100]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f04:	2304      	movs	r3, #4
 8000f06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	@ (8000f40 <HAL_I2C_MspInit+0xbc>)
 8000f12:	f000 faf3 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000f1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_I2C_MspInit+0xb8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f2e:	bf00      	nop
 8000f30:	37b8      	adds	r7, #184	@ 0xb8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400

08000f44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0ae      	sub	sp, #184	@ 0xb8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2290      	movs	r2, #144	@ 0x90
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 ff0c 	bl	8004d82 <memset>
  if(huart->Instance==USART3)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a22      	ldr	r2, [pc, #136]	@ (8000ff8 <HAL_UART_MspInit+0xb4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d13c      	bne.n	8000fee <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 ff76 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f8e:	f7ff ff4f 	bl	8000e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <HAL_UART_MspInit+0xb8>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0xb8>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <HAL_UART_MspInit+0xbc>)
 8000fea:	f000 fa87 	bl	80014fc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fee:	bf00      	nop
 8000ff0:	37b8      	adds	r7, #184	@ 0xb8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004800 	.word	0x40004800
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020c00 	.word	0x40020c00

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <NMI_Handler+0x4>

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <UsageFault_Handler+0x4>

0800102c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f925 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  return 1;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_kill>:

int _kill(int pid, int sig)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800107c:	f003 fed4 	bl	8004e28 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	2216      	movs	r2, #22
 8001084:	601a      	str	r2, [r3, #0]
  return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_exit>:

void _exit (int status)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800109a:	f04f 31ff 	mov.w	r1, #4294967295
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffe7 	bl	8001072 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <_exit+0x12>

080010a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
  }

  return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800110a:	605a      	str	r2, [r3, #4]
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f003 fe54 	bl	8004e28 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20080000 	.word	0x20080000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	200002d0 	.word	0x200002d0
 80011b4:	20000428 	.word	0x20000428

080011b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001214 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e0:	f7ff ffea 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	@ (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800120a:	f003 fe13 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fbb3 	bl	8000978 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001220:	08006f14 	.word	0x08006f14
  ldr r2, =_sbss
 8001224:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001228:	20000424 	.word	0x20000424

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f92e 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f805 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fdfd 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f93b 	bl	80014e2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f911 	bl	80014aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	200002d4 	.word	0x200002d4

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200002d4 	.word	0x200002d4

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0000 	.word	0x05fa0000

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	@ 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff47 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff5c 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffb0 	bl	8001450 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e175      	b.n	8001808 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8164 	bne.w	8001802 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x56>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80be 	beq.w	8001802 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <HAL_GPIO_Init+0x324>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a65      	ldr	r2, [pc, #404]	@ (8001820 <HAL_GPIO_Init+0x324>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b63      	ldr	r3, [pc, #396]	@ (8001820 <HAL_GPIO_Init+0x324>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800169e:	4a61      	ldr	r2, [pc, #388]	@ (8001824 <HAL_GPIO_Init+0x328>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	@ (8001828 <HAL_GPIO_Init+0x32c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d037      	beq.n	800173a <HAL_GPIO_Init+0x23e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a57      	ldr	r2, [pc, #348]	@ (800182c <HAL_GPIO_Init+0x330>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d031      	beq.n	8001736 <HAL_GPIO_Init+0x23a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a56      	ldr	r2, [pc, #344]	@ (8001830 <HAL_GPIO_Init+0x334>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d02b      	beq.n	8001732 <HAL_GPIO_Init+0x236>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a55      	ldr	r2, [pc, #340]	@ (8001834 <HAL_GPIO_Init+0x338>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x232>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a54      	ldr	r2, [pc, #336]	@ (8001838 <HAL_GPIO_Init+0x33c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x22e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a53      	ldr	r2, [pc, #332]	@ (800183c <HAL_GPIO_Init+0x340>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x22a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a52      	ldr	r2, [pc, #328]	@ (8001840 <HAL_GPIO_Init+0x344>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a51      	ldr	r2, [pc, #324]	@ (8001844 <HAL_GPIO_Init+0x348>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x222>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a50      	ldr	r2, [pc, #320]	@ (8001848 <HAL_GPIO_Init+0x34c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4f      	ldr	r2, [pc, #316]	@ (800184c <HAL_GPIO_Init+0x350>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x21a>
 8001712:	2309      	movs	r3, #9
 8001714:	e012      	b.n	800173c <HAL_GPIO_Init+0x240>
 8001716:	230a      	movs	r3, #10
 8001718:	e010      	b.n	800173c <HAL_GPIO_Init+0x240>
 800171a:	2308      	movs	r3, #8
 800171c:	e00e      	b.n	800173c <HAL_GPIO_Init+0x240>
 800171e:	2307      	movs	r3, #7
 8001720:	e00c      	b.n	800173c <HAL_GPIO_Init+0x240>
 8001722:	2306      	movs	r3, #6
 8001724:	e00a      	b.n	800173c <HAL_GPIO_Init+0x240>
 8001726:	2305      	movs	r3, #5
 8001728:	e008      	b.n	800173c <HAL_GPIO_Init+0x240>
 800172a:	2304      	movs	r3, #4
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x240>
 800172e:	2303      	movs	r3, #3
 8001730:	e004      	b.n	800173c <HAL_GPIO_Init+0x240>
 8001732:	2302      	movs	r3, #2
 8001734:	e002      	b.n	800173c <HAL_GPIO_Init+0x240>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_GPIO_Init+0x240>
 800173a:	2300      	movs	r3, #0
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	f002 0203 	and.w	r2, r2, #3
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	4093      	lsls	r3, r2
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800174c:	4935      	ldr	r1, [pc, #212]	@ (8001824 <HAL_GPIO_Init+0x328>)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175a:	4b3d      	ldr	r3, [pc, #244]	@ (8001850 <HAL_GPIO_Init+0x354>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177e:	4a34      	ldr	r2, [pc, #208]	@ (8001850 <HAL_GPIO_Init+0x354>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001784:	4b32      	ldr	r3, [pc, #200]	@ (8001850 <HAL_GPIO_Init+0x354>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a8:	4a29      	ldr	r2, [pc, #164]	@ (8001850 <HAL_GPIO_Init+0x354>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <HAL_GPIO_Init+0x354>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001850 <HAL_GPIO_Init+0x354>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_GPIO_Init+0x354>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <HAL_GPIO_Init+0x354>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b0f      	cmp	r3, #15
 800180c:	f67f ae86 	bls.w	800151c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3724      	adds	r7, #36	@ 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40013800 	.word	0x40013800
 8001828:	40020000 	.word	0x40020000
 800182c:	40020400 	.word	0x40020400
 8001830:	40020800 	.word	0x40020800
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40021000 	.word	0x40021000
 800183c:	40021400 	.word	0x40021400
 8001840:	40021800 	.word	0x40021800
 8001844:	40021c00 	.word	0x40021c00
 8001848:	40022000 	.word	0x40022000
 800184c:	40022400 	.word	0x40022400
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e08b      	b.n	80019b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fae8 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2224      	movs	r2, #36	@ 0x24
 80018b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	e006      	b.n	8001910 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800190e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d108      	bne.n	800192a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e007      	b.n	800193a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_I2C_Init+0x134>)
 8001946:	430b      	orrs	r3, r1
 8001948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69d9      	ldr	r1, [r3, #28]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	02008000 	.word	0x02008000

080019c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	817b      	strh	r3, [r7, #10]
 80019d2:	460b      	mov	r3, r1
 80019d4:	813b      	strh	r3, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	f040 80f9 	bne.w	8001bda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_I2C_Mem_Write+0x34>
 80019ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0ed      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Mem_Write+0x4e>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e0e6      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a16:	f7ff fc5b 	bl	80012d0 <HAL_GetTick>
 8001a1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2319      	movs	r3, #25
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fac3 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d1      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2221      	movs	r2, #33	@ 0x21
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a3a      	ldr	r2, [r7, #32]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a60:	88f8      	ldrh	r0, [r7, #6]
 8001a62:	893a      	ldrh	r2, [r7, #8]
 8001a64:	8979      	ldrh	r1, [r7, #10]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f9d3 	bl	8001e1c <I2C_RequestMemoryWrite>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0a9      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2bff      	cmp	r3, #255	@ 0xff
 8001a90:	d90e      	bls.n	8001ab0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	22ff      	movs	r2, #255	@ 0xff
 8001a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	8979      	ldrh	r1, [r7, #10]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 fc47 	bl	800233c <I2C_TransferConfig>
 8001aae:	e00f      	b.n	8001ad0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	8979      	ldrh	r1, [r7, #10]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fc36 	bl	800233c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fac6 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e07b      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d034      	beq.n	8001b88 <HAL_I2C_Mem_Write+0x1c8>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d130      	bne.n	8001b88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2180      	movs	r1, #128	@ 0x80
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa3f 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e04d      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	2bff      	cmp	r3, #255	@ 0xff
 8001b48:	d90e      	bls.n	8001b68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	22ff      	movs	r2, #255	@ 0xff
 8001b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	8979      	ldrh	r1, [r7, #10]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fbeb 	bl	800233c <I2C_TransferConfig>
 8001b66:	e00f      	b.n	8001b88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	8979      	ldrh	r1, [r7, #10]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fbda 	bl	800233c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d19e      	bne.n	8001ad0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 faac 	bl	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e01a      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2220      	movs	r2, #32
 8001bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_I2C_Mem_Write+0x224>)
 8001bba:	400b      	ands	r3, r1
 8001bbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
  }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	fe00e800 	.word	0xfe00e800

08001be8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	813b      	strh	r3, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	f040 80fd 	bne.w	8001e0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_I2C_Mem_Read+0x34>
 8001c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0f1      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Mem_Read+0x4e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e0ea      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fb47 	bl	80012d0 <HAL_GetTick>
 8001c42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2319      	movs	r3, #25
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f9af 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d5      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2222      	movs	r2, #34	@ 0x22
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2240      	movs	r2, #64	@ 0x40
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c88:	88f8      	ldrh	r0, [r7, #6]
 8001c8a:	893a      	ldrh	r2, [r7, #8]
 8001c8c:	8979      	ldrh	r1, [r7, #10]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4603      	mov	r3, r0
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f913 	bl	8001ec4 <I2C_RequestMemoryRead>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0ad      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2bff      	cmp	r3, #255	@ 0xff
 8001cb8:	d90e      	bls.n	8001cd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	8979      	ldrh	r1, [r7, #10]
 8001cc8:	4b52      	ldr	r3, [pc, #328]	@ (8001e14 <HAL_I2C_Mem_Read+0x22c>)
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fb33 	bl	800233c <I2C_TransferConfig>
 8001cd6:	e00f      	b.n	8001cf8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	8979      	ldrh	r1, [r7, #10]
 8001cea:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <HAL_I2C_Mem_Read+0x22c>)
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fb22 	bl	800233c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2104      	movs	r1, #4
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f956 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e07c      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d034      	beq.n	8001db8 <HAL_I2C_Mem_Read+0x1d0>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d130      	bne.n	8001db8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2180      	movs	r1, #128	@ 0x80
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f927 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e04d      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2bff      	cmp	r3, #255	@ 0xff
 8001d78:	d90e      	bls.n	8001d98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	8979      	ldrh	r1, [r7, #10]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fad3 	bl	800233c <I2C_TransferConfig>
 8001d96:	e00f      	b.n	8001db8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	2300      	movs	r3, #0
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fac2 	bl	800233c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d19a      	bne.n	8001cf8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f994 	bl	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e01a      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_I2C_Mem_Read+0x230>)
 8001dea:	400b      	ands	r3, r1
 8001dec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	80002400 	.word	0x80002400
 8001e18:	fe00e800 	.word	0xfe00e800

08001e1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	813b      	strh	r3, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <I2C_RequestMemoryWrite+0xa4>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fa79 	bl	800233c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f909 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e02c      	b.n	8001eb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e6e:	e015      	b.n	8001e9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e70:	893b      	ldrh	r3, [r7, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f8ef 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e012      	b.n	8001eb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f884 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	80002000 	.word	0x80002000

08001ec4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <I2C_RequestMemoryRead+0xa4>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fa26 	bl	800233c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f8b6 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e02c      	b.n	8001f5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f0a:	893b      	ldrh	r3, [r7, #8]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f14:	e015      	b.n	8001f42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f16:	893b      	ldrh	r3, [r7, #8]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f89c 	bl	8002066 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e012      	b.n	8001f5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f38:	893b      	ldrh	r3, [r7, #8]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2140      	movs	r1, #64	@ 0x40
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f831 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	80002000 	.word	0x80002000

08001f6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d007      	beq.n	8001fa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	619a      	str	r2, [r3, #24]
  }
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc4:	e03b      	b.n	800203e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	6839      	ldr	r1, [r7, #0]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f8d6 	bl	800217c <I2C_IsErrorOccurred>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e041      	b.n	800205e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d02d      	beq.n	800203e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f975 	bl	80012d0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d122      	bne.n	800203e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4013      	ands	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	429a      	cmp	r2, r3
 8002014:	d113      	bne.n	800203e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	429a      	cmp	r2, r3
 800205a:	d0b4      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002072:	e033      	b.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f87f 	bl	800217c <I2C_IsErrorOccurred>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e031      	b.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d025      	beq.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002090:	f7ff f91e 	bl	80012d0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d302      	bcc.n	80020a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11a      	bne.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d013      	beq.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e007      	b.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d1c4      	bne.n	8002074 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002100:	e02f      	b.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f838 	bl	800217c <I2C_IsErrorOccurred>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e02d      	b.n	8002172 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7ff f8db 	bl	80012d0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d11a      	bne.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	d013      	beq.n	8002162 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b20      	cmp	r3, #32
 800216e:	d1c8      	bne.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	@ 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d068      	beq.n	800227a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2210      	movs	r2, #16
 80021ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021b0:	e049      	b.n	8002246 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d045      	beq.n	8002246 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	f7ff f889 	bl	80012d0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <I2C_IsErrorOccurred+0x54>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d13a      	bne.n	8002246 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021f2:	d121      	bne.n	8002238 <I2C_IsErrorOccurred+0xbc>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021fa:	d01d      	beq.n	8002238 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d01a      	beq.n	8002238 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002210:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002212:	f7ff f85d 	bl	80012d0 <HAL_GetTick>
 8002216:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002218:	e00e      	b.n	8002238 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800221a:	f7ff f859 	bl	80012d0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b19      	cmp	r3, #25
 8002226:	d907      	bls.n	8002238 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f043 0320 	orr.w	r3, r3, #32
 800222e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002236:	e006      	b.n	8002246 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b20      	cmp	r3, #32
 8002244:	d1e9      	bne.n	800221a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b20      	cmp	r3, #32
 8002252:	d003      	beq.n	800225c <I2C_IsErrorOccurred+0xe0>
 8002254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0aa      	beq.n	80021b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800225c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2220      	movs	r2, #32
 800226a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800229c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80022e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff fe3b 	bl	8001f6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <I2C_IsErrorOccurred+0x1bc>)
 8002302:	400b      	ands	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800232a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800232e:	4618      	mov	r0, r3
 8002330:	3728      	adds	r7, #40	@ 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	fe00e800 	.word	0xfe00e800

0800233c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	4613      	mov	r3, r2
 800234c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002354:	7a7b      	ldrb	r3, [r7, #9]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	4313      	orrs	r3, r2
 8002366:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800236a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <I2C_TransferConfig+0x60>)
 800237c:	430b      	orrs	r3, r1
 800237e:	43db      	mvns	r3, r3
 8002380:	ea02 0103 	and.w	r1, r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	03ff63ff 	.word	0x03ff63ff

080023a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d138      	bne.n	8002428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e032      	b.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	@ 0x24
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	d139      	bne.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002456:	2302      	movs	r3, #2
 8002458:	e033      	b.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2224      	movs	r2, #36	@ 0x24
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e29b      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	4b96      	ldr	r3, [pc, #600]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d00c      	beq.n	800251a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002500:	4b93      	ldr	r3, [pc, #588]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d112      	bne.n	8002532 <HAL_RCC_OscConfig+0x62>
 800250c:	4b90      	ldr	r3, [pc, #576]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	4b8d      	ldr	r3, [pc, #564]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06c      	beq.n	8002600 <HAL_RCC_OscConfig+0x130>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d168      	bne.n	8002600 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e275      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x7a>
 800253c:	4b84      	ldr	r3, [pc, #528]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a83      	ldr	r2, [pc, #524]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0xd8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x9c>
 8002552:	4b7f      	ldr	r3, [pc, #508]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7e      	ldr	r2, [pc, #504]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b7c      	ldr	r3, [pc, #496]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7b      	ldr	r2, [pc, #492]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xd8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0xc0>
 8002576:	4b76      	ldr	r3, [pc, #472]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a75      	ldr	r2, [pc, #468]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b73      	ldr	r3, [pc, #460]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a72      	ldr	r2, [pc, #456]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xd8>
 8002590:	4b6f      	ldr	r3, [pc, #444]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6e      	ldr	r2, [pc, #440]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b6c      	ldr	r3, [pc, #432]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe8e 	bl	80012d0 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fe8a 	bl	80012d0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e229      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b61      	ldr	r3, [pc, #388]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe7a 	bl	80012d0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fe76 	bl	80012d0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e215      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	4b57      	ldr	r3, [pc, #348]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x110>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d069      	beq.n	80026e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260e:	4b50      	ldr	r3, [pc, #320]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261a:	4b4d      	ldr	r3, [pc, #308]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_OscConfig+0x190>
 8002626:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	4b47      	ldr	r3, [pc, #284]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x17a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1e9      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	493d      	ldr	r1, [pc, #244]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	e040      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002668:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fe2c 	bl	80012d0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7fe fe28 	bl	80012d0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1c7      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b30      	ldr	r3, [pc, #192]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	4b2d      	ldr	r3, [pc, #180]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4929      	ldr	r1, [pc, #164]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
 80026ae:	e018      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b0:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fe08 	bl	80012d0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe fe04 	bl	80012d0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1a3      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d038      	beq.n	8002760 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d019      	beq.n	800272a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80026f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fa:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7fe fde5 	bl	80012d0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe fde1 	bl	80012d0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e180      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x23a>
 8002728:	e01a      	b.n	8002760 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <HAL_RCC_OscConfig+0x280>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fdcb 	bl	80012d0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe fdc7 	bl	80012d0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d903      	bls.n	8002754 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e166      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
 8002750:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b92      	ldr	r3, [pc, #584]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a4 	beq.w	80028b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b8c      	ldr	r3, [pc, #560]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b89      	ldr	r3, [pc, #548]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	4a88      	ldr	r2, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	@ 0x40
 8002786:	4b86      	ldr	r3, [pc, #536]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002796:	4b83      	ldr	r3, [pc, #524]	@ (80029a4 <HAL_RCC_OscConfig+0x4d4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027a2:	4b80      	ldr	r3, [pc, #512]	@ (80029a4 <HAL_RCC_OscConfig+0x4d4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7f      	ldr	r2, [pc, #508]	@ (80029a4 <HAL_RCC_OscConfig+0x4d4>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fd8f 	bl	80012d0 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7fe fd8b 	bl	80012d0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	@ 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e12a      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c8:	4b76      	ldr	r3, [pc, #472]	@ (80029a4 <HAL_RCC_OscConfig+0x4d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x31a>
 80027dc:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e0:	4a6f      	ldr	r2, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e8:	e02d      	b.n	8002846 <HAL_RCC_OscConfig+0x376>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x33c>
 80027f2:	4b6b      	ldr	r3, [pc, #428]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	4a6a      	ldr	r2, [pc, #424]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fe:	4b68      	ldr	r3, [pc, #416]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	4a67      	ldr	r2, [pc, #412]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	@ 0x70
 800280a:	e01c      	b.n	8002846 <HAL_RCC_OscConfig+0x376>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x35e>
 8002814:	4b62      	ldr	r3, [pc, #392]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a61      	ldr	r2, [pc, #388]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	4b5f      	ldr	r3, [pc, #380]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a5e      	ldr	r2, [pc, #376]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
 800282c:	e00b      	b.n	8002846 <HAL_RCC_OscConfig+0x376>
 800282e:	4b5c      	ldr	r3, [pc, #368]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a5b      	ldr	r2, [pc, #364]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fd3f 	bl	80012d0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fd3b 	bl	80012d0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0d8      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	4b4c      	ldr	r3, [pc, #304]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ee      	beq.n	8002856 <HAL_RCC_OscConfig+0x386>
 8002878:	e014      	b.n	80028a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fd29 	bl	80012d0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fd25 	bl	80012d0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0c2      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d105      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b3d      	ldr	r3, [pc, #244]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a3c      	ldr	r2, [pc, #240]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80ae 	beq.w	8002a1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c0:	4b37      	ldr	r3, [pc, #220]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d06d      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d14b      	bne.n	800296c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b32      	ldr	r3, [pc, #200]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a31      	ldr	r2, [pc, #196]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcf6 	bl	80012d0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fcf2 	bl	80012d0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e091      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	3b01      	subs	r3, #1
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	071b      	lsls	r3, r3, #28
 8002932:	491b      	ldr	r1, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fcc4 	bl	80012d0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fcc0 	bl	80012d0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e05f      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x47c>
 800296a:	e057      	b.n	8002a1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fcaa 	bl	80012d0 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fca6 	bl	80012d0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e045      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_RCC_OscConfig+0x4d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x4b0>
 800299e:	e03d      	b.n	8002a1c <HAL_RCC_OscConfig+0x54c>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a28 <HAL_RCC_OscConfig+0x558>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d030      	beq.n	8002a18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d129      	bne.n	8002a18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d122      	bne.n	8002a18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d119      	bne.n	8002a18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d10f      	bne.n	8002a18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b67      	ldr	r3, [pc, #412]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 020f 	bic.w	r2, r3, #15
 8002a5a:	4965      	ldr	r1, [pc, #404]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4936      	ldr	r1, [pc, #216]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fbd6 	bl	80012d0 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fbd2 	bl	80012d0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e053      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d210      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 020f 	bic.w	r2, r3, #15
 8002b66:	4922      	ldr	r1, [pc, #136]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_RCC_ClockConfig+0x1d0>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1d4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fb32 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08006b78 	.word	0x08006b78
 8002bfc:	20000004 	.word	0x20000004
 8002c00:	20000008 	.word	0x20000008

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b094      	sub	sp, #80	@ 0x50
 8002c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c10:	2300      	movs	r3, #0
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1c:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d00d      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x40>
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	f200 80e1 	bhi.w	8002df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x34>
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c36:	e0db      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b73      	ldr	r3, [pc, #460]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c3c:	e0db      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3e:	4b72      	ldr	r3, [pc, #456]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c42:	e0d8      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c44:	4b6f      	ldr	r3, [pc, #444]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c6e:	2300      	movs	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	f04f 0000 	mov.w	r0, #0
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	0159      	lsls	r1, r3, #5
 8002c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c88:	0150      	lsls	r0, r2, #5
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4621      	mov	r1, r4
 8002c90:	1a51      	subs	r1, r2, r1
 8002c92:	6139      	str	r1, [r7, #16]
 8002c94:	4629      	mov	r1, r5
 8002c96:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca8:	4659      	mov	r1, fp
 8002caa:	018b      	lsls	r3, r1, #6
 8002cac:	4651      	mov	r1, sl
 8002cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	018a      	lsls	r2, r1, #6
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd6:	4690      	mov	r8, r2
 8002cd8:	4699      	mov	r9, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	eb18 0303 	adds.w	r3, r8, r3
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	eb49 0303 	adc.w	r3, r9, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	028b      	lsls	r3, r1, #10
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d00:	4621      	mov	r1, r4
 8002d02:	028a      	lsls	r2, r1, #10
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d14:	f7fd faec 	bl	80002f0 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d20:	e058      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	0159      	lsls	r1, r3, #5
 8002d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4e:	0150      	lsls	r0, r2, #5
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4641      	mov	r1, r8
 8002d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d74:	ebb2 040a 	subs.w	r4, r2, sl
 8002d78:	eb63 050b 	sbc.w	r5, r3, fp
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	00eb      	lsls	r3, r5, #3
 8002d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	4643      	mov	r3, r8
 8002d92:	18e3      	adds	r3, r4, r3
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	464b      	mov	r3, r9
 8002d98:	eb45 0303 	adc.w	r3, r5, r3
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002daa:	4629      	mov	r1, r5
 8002dac:	028b      	lsls	r3, r1, #10
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db4:	4621      	mov	r1, r4
 8002db6:	028a      	lsls	r2, r1, #10
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	61fa      	str	r2, [r7, #28]
 8002dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc8:	f7fd fa92 	bl	80002f0 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3750      	adds	r7, #80	@ 0x50
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	00f42400 	.word	0x00f42400

08002e0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	@ (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08006b88 	.word	0x08006b88

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffdc 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	@ (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08006b88 	.word	0x08006b88

08002e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e9c:	4b69      	ldr	r3, [pc, #420]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ea6:	6093      	str	r3, [r2, #8]
 8002ea8:	4b66      	ldr	r3, [pc, #408]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb0:	4964      	ldr	r1, [pc, #400]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d017      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ece:	4b5d      	ldr	r3, [pc, #372]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ed4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	4959      	ldr	r1, [pc, #356]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d017      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	494a      	ldr	r1, [pc, #296]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 808b 	beq.w	800306e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b3a      	ldr	r3, [pc, #232]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a39      	ldr	r2, [pc, #228]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f64:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f70:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a34      	ldr	r2, [pc, #208]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f9a8 	bl	80012d0 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f84:	f7fe f9a4 	bl	80012d0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e38f      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f96:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa2:	4b28      	ldr	r3, [pc, #160]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002faa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d035      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d02e      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc0:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fca:	4b1e      	ldr	r3, [pc, #120]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a1a      	ldr	r2, [pc, #104]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fe2:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fe8:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d114      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe f96c 	bl	80012d0 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f968 	bl	80012d0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e351      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ee      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800302a:	d111      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800303a:	400b      	ands	r3, r1
 800303c:	4901      	ldr	r1, [pc, #4]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
 8003042:	e00b      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
 800304c:	0ffffcff 	.word	0x0ffffcff
 8003050:	4bac      	ldr	r3, [pc, #688]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4aab      	ldr	r2, [pc, #684]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003056:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800305a:	6093      	str	r3, [r2, #8]
 800305c:	4ba9      	ldr	r3, [pc, #676]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	49a6      	ldr	r1, [pc, #664]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	4313      	orrs	r3, r2
 800306c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800307a:	4ba2      	ldr	r3, [pc, #648]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003080:	4aa0      	ldr	r2, [pc, #640]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003086:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800308a:	4b9e      	ldr	r3, [pc, #632]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	499b      	ldr	r1, [pc, #620]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a8:	4b96      	ldr	r3, [pc, #600]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b6:	4993      	ldr	r1, [pc, #588]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030d8:	498a      	ldr	r1, [pc, #552]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ec:	4b85      	ldr	r3, [pc, #532]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030fa:	4982      	ldr	r1, [pc, #520]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800310e:	4b7d      	ldr	r3, [pc, #500]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003114:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	4979      	ldr	r1, [pc, #484]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003130:	4b74      	ldr	r3, [pc, #464]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	4971      	ldr	r1, [pc, #452]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003152:	4b6c      	ldr	r3, [pc, #432]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003158:	f023 020c 	bic.w	r2, r3, #12
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003160:	4968      	ldr	r1, [pc, #416]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003174:	4b63      	ldr	r3, [pc, #396]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	4960      	ldr	r1, [pc, #384]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003196:	4b5b      	ldr	r3, [pc, #364]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a4:	4957      	ldr	r1, [pc, #348]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b8:	4b52      	ldr	r3, [pc, #328]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	494f      	ldr	r1, [pc, #316]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031da:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	4946      	ldr	r1, [pc, #280]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031fc:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	493e      	ldr	r1, [pc, #248]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800321e:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003224:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322c:	4935      	ldr	r1, [pc, #212]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003240:	4b30      	ldr	r3, [pc, #192]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003246:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800324e:	492d      	ldr	r1, [pc, #180]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003262:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003268:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003270:	4924      	ldr	r1, [pc, #144]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800327c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a2:	4b18      	ldr	r3, [pc, #96]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b0:	4914      	ldr	r1, [pc, #80]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d4:	490b      	ldr	r1, [pc, #44]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00f      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f8:	4902      	ldr	r1, [pc, #8]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003300:	e002      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003314:	4b8a      	ldr	r3, [pc, #552]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003324:	4986      	ldr	r1, [pc, #536]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003338:	4b81      	ldr	r3, [pc, #516]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800333e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003348:	497d      	ldr	r1, [pc, #500]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d006      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80d6 	beq.w	8003510 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003364:	4b76      	ldr	r3, [pc, #472]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a75      	ldr	r2, [pc, #468]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800336e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fd ffae 	bl	80012d0 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003378:	f7fd ffaa 	bl	80012d0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e195      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800338a:	4b6d      	ldr	r3, [pc, #436]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d021      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11d      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033aa:	4b65      	ldr	r3, [pc, #404]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033b8:	4b61      	ldr	r3, [pc, #388]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033be:	0e1b      	lsrs	r3, r3, #24
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	019a      	lsls	r2, r3, #6
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	071b      	lsls	r3, r3, #28
 80033de:	4958      	ldr	r1, [pc, #352]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02e      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003410:	d129      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003412:	4b4b      	ldr	r3, [pc, #300]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003420:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003426:	0f1b      	lsrs	r3, r3, #28
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	019a      	lsls	r2, r3, #6
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	061b      	lsls	r3, r3, #24
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	071b      	lsls	r3, r3, #28
 8003446:	493e      	ldr	r1, [pc, #248]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800344e:	4b3c      	ldr	r3, [pc, #240]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003454:	f023 021f 	bic.w	r2, r3, #31
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	3b01      	subs	r3, #1
 800345e:	4938      	ldr	r1, [pc, #224]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01d      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003472:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003478:	0e1b      	lsrs	r3, r3, #24
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003480:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003486:	0f1b      	lsrs	r3, r3, #28
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	019a      	lsls	r2, r3, #6
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	061b      	lsls	r3, r3, #24
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	4926      	ldr	r1, [pc, #152]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d011      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	019a      	lsls	r2, r3, #6
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	491a      	ldr	r1, [pc, #104]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034de:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ea:	f7fd fef1 	bl	80012d0 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034f2:	f7fd feed 	bl	80012d0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	@ 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0d8      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003504:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	f040 80ce 	bne.w	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a08      	ldr	r2, [pc, #32]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fd fed4 	bl	80012d0 <HAL_GetTick>
 8003528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800352a:	e00b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800352c:	f7fd fed0 	bl	80012d0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	@ 0x64
 8003538:	d904      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0bb      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003544:	4b5e      	ldr	r3, [pc, #376]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800354c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003550:	d0ec      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800356e:	2b00      	cmp	r3, #0
 8003570:	d02e      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d12a      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800357a:	4b51      	ldr	r3, [pc, #324]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003588:	4b4d      	ldr	r3, [pc, #308]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	0f1b      	lsrs	r3, r3, #28
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	019a      	lsls	r2, r3, #6
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	071b      	lsls	r3, r3, #28
 80035ae:	4944      	ldr	r1, [pc, #272]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035b6:	4b42      	ldr	r3, [pc, #264]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	493d      	ldr	r1, [pc, #244]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d022      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035e4:	d11d      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035e6:	4b36      	ldr	r3, [pc, #216]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035f4:	4b32      	ldr	r3, [pc, #200]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fa:	0f1b      	lsrs	r3, r3, #28
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	019a      	lsls	r2, r3, #6
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	4929      	ldr	r1, [pc, #164]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800362e:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	0e1b      	lsrs	r3, r3, #24
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800363c:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	019a      	lsls	r2, r3, #6
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	4917      	ldr	r1, [pc, #92]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	4911      	ldr	r1, [pc, #68]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003680:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0e      	ldr	r2, [pc, #56]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800368a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd fe20 	bl	80012d0 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003694:	f7fd fe1c 	bl	80012d0 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	@ 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e007      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b2:	d1ef      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e040      	b.n	8003758 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fc2c 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	@ 0x24
 80036f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb16 	bl	8003d3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f8af 	bl	8003874 <UART_SetConfig>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e01b      	b.n	8003758 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800372e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800373e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fb95 	bl	8003e80 <UART_CheckIdleState>
 8003756:	4603      	mov	r3, r0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	@ 0x28
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003774:	2b20      	cmp	r3, #32
 8003776:	d177      	bne.n	8003868 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Transmit+0x24>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e070      	b.n	800386a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2221      	movs	r2, #33	@ 0x21
 8003794:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003796:	f7fd fd9b 	bl	80012d0 <HAL_GetTick>
 800379a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Transmit+0x68>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037d0:	e02f      	b.n	8003832 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fbf7 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e03b      	b.n	800386a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	3302      	adds	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e007      	b.n	8003820 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1c9      	bne.n	80037d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2140      	movs	r1, #64	@ 0x40
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fbc1 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e005      	b.n	800386a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4ba6      	ldr	r3, [pc, #664]	@ (8003b38 <UART_SetConfig+0x2c4>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	6979      	ldr	r1, [r7, #20]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a94      	ldr	r2, [pc, #592]	@ (8003b3c <UART_SetConfig+0x2c8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d120      	bne.n	8003932 <UART_SetConfig+0xbe>
 80038f0:	4b93      	ldr	r3, [pc, #588]	@ (8003b40 <UART_SetConfig+0x2cc>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d816      	bhi.n	800392c <UART_SetConfig+0xb8>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <UART_SetConfig+0x90>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003915 	.word	0x08003915
 8003908:	08003921 	.word	0x08003921
 800390c:	0800391b 	.word	0x0800391b
 8003910:	08003927 	.word	0x08003927
 8003914:	2301      	movs	r3, #1
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e150      	b.n	8003bbc <UART_SetConfig+0x348>
 800391a:	2302      	movs	r3, #2
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e14d      	b.n	8003bbc <UART_SetConfig+0x348>
 8003920:	2304      	movs	r3, #4
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e14a      	b.n	8003bbc <UART_SetConfig+0x348>
 8003926:	2308      	movs	r3, #8
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e147      	b.n	8003bbc <UART_SetConfig+0x348>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e144      	b.n	8003bbc <UART_SetConfig+0x348>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a83      	ldr	r2, [pc, #524]	@ (8003b44 <UART_SetConfig+0x2d0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d132      	bne.n	80039a2 <UART_SetConfig+0x12e>
 800393c:	4b80      	ldr	r3, [pc, #512]	@ (8003b40 <UART_SetConfig+0x2cc>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d828      	bhi.n	800399c <UART_SetConfig+0x128>
 800394a:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <UART_SetConfig+0xdc>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003985 	.word	0x08003985
 8003954:	0800399d 	.word	0x0800399d
 8003958:	0800399d 	.word	0x0800399d
 800395c:	0800399d 	.word	0x0800399d
 8003960:	08003991 	.word	0x08003991
 8003964:	0800399d 	.word	0x0800399d
 8003968:	0800399d 	.word	0x0800399d
 800396c:	0800399d 	.word	0x0800399d
 8003970:	0800398b 	.word	0x0800398b
 8003974:	0800399d 	.word	0x0800399d
 8003978:	0800399d 	.word	0x0800399d
 800397c:	0800399d 	.word	0x0800399d
 8003980:	08003997 	.word	0x08003997
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e118      	b.n	8003bbc <UART_SetConfig+0x348>
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e115      	b.n	8003bbc <UART_SetConfig+0x348>
 8003990:	2304      	movs	r3, #4
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e112      	b.n	8003bbc <UART_SetConfig+0x348>
 8003996:	2308      	movs	r3, #8
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e10f      	b.n	8003bbc <UART_SetConfig+0x348>
 800399c:	2310      	movs	r3, #16
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e10c      	b.n	8003bbc <UART_SetConfig+0x348>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a68      	ldr	r2, [pc, #416]	@ (8003b48 <UART_SetConfig+0x2d4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d120      	bne.n	80039ee <UART_SetConfig+0x17a>
 80039ac:	4b64      	ldr	r3, [pc, #400]	@ (8003b40 <UART_SetConfig+0x2cc>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039b6:	2b30      	cmp	r3, #48	@ 0x30
 80039b8:	d013      	beq.n	80039e2 <UART_SetConfig+0x16e>
 80039ba:	2b30      	cmp	r3, #48	@ 0x30
 80039bc:	d814      	bhi.n	80039e8 <UART_SetConfig+0x174>
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d009      	beq.n	80039d6 <UART_SetConfig+0x162>
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d810      	bhi.n	80039e8 <UART_SetConfig+0x174>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <UART_SetConfig+0x15c>
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d006      	beq.n	80039dc <UART_SetConfig+0x168>
 80039ce:	e00b      	b.n	80039e8 <UART_SetConfig+0x174>
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0f2      	b.n	8003bbc <UART_SetConfig+0x348>
 80039d6:	2302      	movs	r3, #2
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e0ef      	b.n	8003bbc <UART_SetConfig+0x348>
 80039dc:	2304      	movs	r3, #4
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e0ec      	b.n	8003bbc <UART_SetConfig+0x348>
 80039e2:	2308      	movs	r3, #8
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e0e9      	b.n	8003bbc <UART_SetConfig+0x348>
 80039e8:	2310      	movs	r3, #16
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e0e6      	b.n	8003bbc <UART_SetConfig+0x348>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a56      	ldr	r2, [pc, #344]	@ (8003b4c <UART_SetConfig+0x2d8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d120      	bne.n	8003a3a <UART_SetConfig+0x1c6>
 80039f8:	4b51      	ldr	r3, [pc, #324]	@ (8003b40 <UART_SetConfig+0x2cc>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a04:	d013      	beq.n	8003a2e <UART_SetConfig+0x1ba>
 8003a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a08:	d814      	bhi.n	8003a34 <UART_SetConfig+0x1c0>
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d009      	beq.n	8003a22 <UART_SetConfig+0x1ae>
 8003a0e:	2b80      	cmp	r3, #128	@ 0x80
 8003a10:	d810      	bhi.n	8003a34 <UART_SetConfig+0x1c0>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <UART_SetConfig+0x1a8>
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d006      	beq.n	8003a28 <UART_SetConfig+0x1b4>
 8003a1a:	e00b      	b.n	8003a34 <UART_SetConfig+0x1c0>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e0cc      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a22:	2302      	movs	r3, #2
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e0c9      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e0c6      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e0c3      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a34:	2310      	movs	r3, #16
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e0c0      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a44      	ldr	r2, [pc, #272]	@ (8003b50 <UART_SetConfig+0x2dc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d125      	bne.n	8003a90 <UART_SetConfig+0x21c>
 8003a44:	4b3e      	ldr	r3, [pc, #248]	@ (8003b40 <UART_SetConfig+0x2cc>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a52:	d017      	beq.n	8003a84 <UART_SetConfig+0x210>
 8003a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a58:	d817      	bhi.n	8003a8a <UART_SetConfig+0x216>
 8003a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5e:	d00b      	beq.n	8003a78 <UART_SetConfig+0x204>
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a64:	d811      	bhi.n	8003a8a <UART_SetConfig+0x216>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <UART_SetConfig+0x1fe>
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6e:	d006      	beq.n	8003a7e <UART_SetConfig+0x20a>
 8003a70:	e00b      	b.n	8003a8a <UART_SetConfig+0x216>
 8003a72:	2300      	movs	r3, #0
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e0a1      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e09e      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e09b      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a84:	2308      	movs	r3, #8
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e098      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e095      	b.n	8003bbc <UART_SetConfig+0x348>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2f      	ldr	r2, [pc, #188]	@ (8003b54 <UART_SetConfig+0x2e0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d125      	bne.n	8003ae6 <UART_SetConfig+0x272>
 8003a9a:	4b29      	ldr	r3, [pc, #164]	@ (8003b40 <UART_SetConfig+0x2cc>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003aa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aa8:	d017      	beq.n	8003ada <UART_SetConfig+0x266>
 8003aaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aae:	d817      	bhi.n	8003ae0 <UART_SetConfig+0x26c>
 8003ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab4:	d00b      	beq.n	8003ace <UART_SetConfig+0x25a>
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aba:	d811      	bhi.n	8003ae0 <UART_SetConfig+0x26c>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <UART_SetConfig+0x254>
 8003ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac4:	d006      	beq.n	8003ad4 <UART_SetConfig+0x260>
 8003ac6:	e00b      	b.n	8003ae0 <UART_SetConfig+0x26c>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e076      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e073      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e070      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ada:	2308      	movs	r3, #8
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e06d      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e06a      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1b      	ldr	r2, [pc, #108]	@ (8003b58 <UART_SetConfig+0x2e4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d138      	bne.n	8003b62 <UART_SetConfig+0x2ee>
 8003af0:	4b13      	ldr	r3, [pc, #76]	@ (8003b40 <UART_SetConfig+0x2cc>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003afa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003afe:	d017      	beq.n	8003b30 <UART_SetConfig+0x2bc>
 8003b00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b04:	d82a      	bhi.n	8003b5c <UART_SetConfig+0x2e8>
 8003b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0a:	d00b      	beq.n	8003b24 <UART_SetConfig+0x2b0>
 8003b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b10:	d824      	bhi.n	8003b5c <UART_SetConfig+0x2e8>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <UART_SetConfig+0x2aa>
 8003b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b1a:	d006      	beq.n	8003b2a <UART_SetConfig+0x2b6>
 8003b1c:	e01e      	b.n	8003b5c <UART_SetConfig+0x2e8>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e04b      	b.n	8003bbc <UART_SetConfig+0x348>
 8003b24:	2302      	movs	r3, #2
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e048      	b.n	8003bbc <UART_SetConfig+0x348>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e045      	b.n	8003bbc <UART_SetConfig+0x348>
 8003b30:	2308      	movs	r3, #8
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e042      	b.n	8003bbc <UART_SetConfig+0x348>
 8003b36:	bf00      	nop
 8003b38:	efff69f3 	.word	0xefff69f3
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40004400 	.word	0x40004400
 8003b48:	40004800 	.word	0x40004800
 8003b4c:	40004c00 	.word	0x40004c00
 8003b50:	40005000 	.word	0x40005000
 8003b54:	40011400 	.word	0x40011400
 8003b58:	40007800 	.word	0x40007800
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e02c      	b.n	8003bbc <UART_SetConfig+0x348>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a72      	ldr	r2, [pc, #456]	@ (8003d30 <UART_SetConfig+0x4bc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d125      	bne.n	8003bb8 <UART_SetConfig+0x344>
 8003b6c:	4b71      	ldr	r3, [pc, #452]	@ (8003d34 <UART_SetConfig+0x4c0>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b76:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b7a:	d017      	beq.n	8003bac <UART_SetConfig+0x338>
 8003b7c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b80:	d817      	bhi.n	8003bb2 <UART_SetConfig+0x33e>
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b86:	d00b      	beq.n	8003ba0 <UART_SetConfig+0x32c>
 8003b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8c:	d811      	bhi.n	8003bb2 <UART_SetConfig+0x33e>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <UART_SetConfig+0x326>
 8003b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b96:	d006      	beq.n	8003ba6 <UART_SetConfig+0x332>
 8003b98:	e00b      	b.n	8003bb2 <UART_SetConfig+0x33e>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e00d      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e00a      	b.n	8003bbc <UART_SetConfig+0x348>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e007      	b.n	8003bbc <UART_SetConfig+0x348>
 8003bac:	2308      	movs	r3, #8
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e004      	b.n	8003bbc <UART_SetConfig+0x348>
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e001      	b.n	8003bbc <UART_SetConfig+0x348>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc4:	d15b      	bne.n	8003c7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d828      	bhi.n	8003c1e <UART_SetConfig+0x3aa>
 8003bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <UART_SetConfig+0x360>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7ff f914 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	61b8      	str	r0, [r7, #24]
        break;
 8003bfe:	e013      	b.n	8003c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7ff f924 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003c04:	61b8      	str	r0, [r7, #24]
        break;
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <UART_SetConfig+0x4c4>)
 8003c0a:	61bb      	str	r3, [r7, #24]
        break;
 8003c0c:	e00c      	b.n	8003c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe fff9 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003c12:	61b8      	str	r0, [r7, #24]
        break;
 8003c14:	e008      	b.n	8003c28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e004      	b.n	8003c28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	77bb      	strb	r3, [r7, #30]
        break;
 8003c26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d074      	beq.n	8003d18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	005a      	lsls	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b0f      	cmp	r3, #15
 8003c48:	d916      	bls.n	8003c78 <UART_SetConfig+0x404>
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c50:	d212      	bcs.n	8003c78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f023 030f 	bic.w	r3, r3, #15
 8003c5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	89fb      	ldrh	r3, [r7, #14]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	89fa      	ldrh	r2, [r7, #14]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	e04f      	b.n	8003d18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	77bb      	strb	r3, [r7, #30]
 8003c7c:	e04c      	b.n	8003d18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c7e:	7ffb      	ldrb	r3, [r7, #31]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d828      	bhi.n	8003cd6 <UART_SetConfig+0x462>
 8003c84:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <UART_SetConfig+0x418>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003cd7 	.word	0x08003cd7
 8003c9c:	08003cc7 	.word	0x08003cc7
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
 8003cac:	08003ccf 	.word	0x08003ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7ff f8b8 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	61b8      	str	r0, [r7, #24]
        break;
 8003cb6:	e013      	b.n	8003ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7ff f8c8 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003cbc:	61b8      	str	r0, [r7, #24]
        break;
 8003cbe:	e00f      	b.n	8003ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <UART_SetConfig+0x4c4>)
 8003cc2:	61bb      	str	r3, [r7, #24]
        break;
 8003cc4:	e00c      	b.n	8003ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc6:	f7fe ff9d 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8003cca:	61b8      	str	r0, [r7, #24]
        break;
 8003ccc:	e008      	b.n	8003ce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cd2:	61bb      	str	r3, [r7, #24]
        break;
 8003cd4:	e004      	b.n	8003ce0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8003cde:	bf00      	nop
    }

    if (pclk != 0U)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d018      	beq.n	8003d18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	085a      	lsrs	r2, r3, #1
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	441a      	add	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d909      	bls.n	8003d14 <UART_SetConfig+0x4a0>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d06:	d205      	bcs.n	8003d14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e001      	b.n	8003d18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40007c00 	.word	0x40007c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400

08003d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3a:	d10a      	bne.n	8003e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b098      	sub	sp, #96	@ 0x60
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e90:	f7fd fa1e 	bl	80012d0 <HAL_GetTick>
 8003e94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d12e      	bne.n	8003f02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f88c 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d021      	beq.n	8003f02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ede:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e062      	b.n	8003fc8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d149      	bne.n	8003fa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f856 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03c      	beq.n	8003fa4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	623b      	str	r3, [r7, #32]
   return(result);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e6      	bne.n	8003f2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3308      	adds	r3, #8
 8003f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7c:	61fa      	str	r2, [r7, #28]
 8003f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	69b9      	ldr	r1, [r7, #24]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	617b      	str	r3, [r7, #20]
   return(result);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e011      	b.n	8003fc8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3758      	adds	r7, #88	@ 0x58
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	e04f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d04b      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fd f971 	bl	80012d0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e04e      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d037      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b80      	cmp	r3, #128	@ 0x80
 8004016:	d034      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d031      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d110      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2208      	movs	r2, #8
 8004032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f838 	bl	80040aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2208      	movs	r2, #8
 800403e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e029      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405c:	d111      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f81e 	bl	80040aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00f      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0a0      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b095      	sub	sp, #84	@ 0x54
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800410a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411c:	2b01      	cmp	r3, #1
 800411e:	d118      	bne.n	8004152 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	60bb      	str	r3, [r7, #8]
   return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0310 	bic.w	r3, r3, #16
 8004134:	647b      	str	r3, [r7, #68]	@ 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	613b      	str	r3, [r7, #16]
   return(result);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e6      	bne.n	8004120 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004166:	bf00      	nop
 8004168:	3754      	adds	r7, #84	@ 0x54
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <__cvt>:
 8004172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004174:	ed2d 8b02 	vpush	{d8}
 8004178:	eeb0 8b40 	vmov.f64	d8, d0
 800417c:	b085      	sub	sp, #20
 800417e:	4617      	mov	r7, r2
 8004180:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004184:	ee18 2a90 	vmov	r2, s17
 8004188:	f025 0520 	bic.w	r5, r5, #32
 800418c:	2a00      	cmp	r2, #0
 800418e:	bfb6      	itet	lt
 8004190:	222d      	movlt	r2, #45	@ 0x2d
 8004192:	2200      	movge	r2, #0
 8004194:	eeb1 8b40 	vneglt.f64	d8, d0
 8004198:	2d46      	cmp	r5, #70	@ 0x46
 800419a:	460c      	mov	r4, r1
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	d004      	beq.n	80041aa <__cvt+0x38>
 80041a0:	2d45      	cmp	r5, #69	@ 0x45
 80041a2:	d100      	bne.n	80041a6 <__cvt+0x34>
 80041a4:	3401      	adds	r4, #1
 80041a6:	2102      	movs	r1, #2
 80041a8:	e000      	b.n	80041ac <__cvt+0x3a>
 80041aa:	2103      	movs	r1, #3
 80041ac:	ab03      	add	r3, sp, #12
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	ab02      	add	r3, sp, #8
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4622      	mov	r2, r4
 80041b6:	4633      	mov	r3, r6
 80041b8:	eeb0 0b48 	vmov.f64	d0, d8
 80041bc:	f000 feec 	bl	8004f98 <_dtoa_r>
 80041c0:	2d47      	cmp	r5, #71	@ 0x47
 80041c2:	d114      	bne.n	80041ee <__cvt+0x7c>
 80041c4:	07fb      	lsls	r3, r7, #31
 80041c6:	d50a      	bpl.n	80041de <__cvt+0x6c>
 80041c8:	1902      	adds	r2, r0, r4
 80041ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	bf08      	it	eq
 80041d4:	9203      	streq	r2, [sp, #12]
 80041d6:	2130      	movs	r1, #48	@ 0x30
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	4293      	cmp	r3, r2
 80041dc:	d319      	bcc.n	8004212 <__cvt+0xa0>
 80041de:	9b03      	ldr	r3, [sp, #12]
 80041e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80041e2:	1a1b      	subs	r3, r3, r0
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	b005      	add	sp, #20
 80041e8:	ecbd 8b02 	vpop	{d8}
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ee:	2d46      	cmp	r5, #70	@ 0x46
 80041f0:	eb00 0204 	add.w	r2, r0, r4
 80041f4:	d1e9      	bne.n	80041ca <__cvt+0x58>
 80041f6:	7803      	ldrb	r3, [r0, #0]
 80041f8:	2b30      	cmp	r3, #48	@ 0x30
 80041fa:	d107      	bne.n	800420c <__cvt+0x9a>
 80041fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf1c      	itt	ne
 8004206:	f1c4 0401 	rsbne	r4, r4, #1
 800420a:	6034      	strne	r4, [r6, #0]
 800420c:	6833      	ldr	r3, [r6, #0]
 800420e:	441a      	add	r2, r3
 8004210:	e7db      	b.n	80041ca <__cvt+0x58>
 8004212:	1c5c      	adds	r4, r3, #1
 8004214:	9403      	str	r4, [sp, #12]
 8004216:	7019      	strb	r1, [r3, #0]
 8004218:	e7de      	b.n	80041d8 <__cvt+0x66>

0800421a <__exponent>:
 800421a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800421c:	2900      	cmp	r1, #0
 800421e:	bfba      	itte	lt
 8004220:	4249      	neglt	r1, r1
 8004222:	232d      	movlt	r3, #45	@ 0x2d
 8004224:	232b      	movge	r3, #43	@ 0x2b
 8004226:	2909      	cmp	r1, #9
 8004228:	7002      	strb	r2, [r0, #0]
 800422a:	7043      	strb	r3, [r0, #1]
 800422c:	dd29      	ble.n	8004282 <__exponent+0x68>
 800422e:	f10d 0307 	add.w	r3, sp, #7
 8004232:	461d      	mov	r5, r3
 8004234:	270a      	movs	r7, #10
 8004236:	461a      	mov	r2, r3
 8004238:	fbb1 f6f7 	udiv	r6, r1, r7
 800423c:	fb07 1416 	mls	r4, r7, r6, r1
 8004240:	3430      	adds	r4, #48	@ 0x30
 8004242:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004246:	460c      	mov	r4, r1
 8004248:	2c63      	cmp	r4, #99	@ 0x63
 800424a:	f103 33ff 	add.w	r3, r3, #4294967295
 800424e:	4631      	mov	r1, r6
 8004250:	dcf1      	bgt.n	8004236 <__exponent+0x1c>
 8004252:	3130      	adds	r1, #48	@ 0x30
 8004254:	1e94      	subs	r4, r2, #2
 8004256:	f803 1c01 	strb.w	r1, [r3, #-1]
 800425a:	1c41      	adds	r1, r0, #1
 800425c:	4623      	mov	r3, r4
 800425e:	42ab      	cmp	r3, r5
 8004260:	d30a      	bcc.n	8004278 <__exponent+0x5e>
 8004262:	f10d 0309 	add.w	r3, sp, #9
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	42ac      	cmp	r4, r5
 800426a:	bf88      	it	hi
 800426c:	2300      	movhi	r3, #0
 800426e:	3302      	adds	r3, #2
 8004270:	4403      	add	r3, r0
 8004272:	1a18      	subs	r0, r3, r0
 8004274:	b003      	add	sp, #12
 8004276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004278:	f813 6b01 	ldrb.w	r6, [r3], #1
 800427c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004280:	e7ed      	b.n	800425e <__exponent+0x44>
 8004282:	2330      	movs	r3, #48	@ 0x30
 8004284:	3130      	adds	r1, #48	@ 0x30
 8004286:	7083      	strb	r3, [r0, #2]
 8004288:	70c1      	strb	r1, [r0, #3]
 800428a:	1d03      	adds	r3, r0, #4
 800428c:	e7f1      	b.n	8004272 <__exponent+0x58>
	...

08004290 <_printf_float>:
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	b08d      	sub	sp, #52	@ 0x34
 8004296:	460c      	mov	r4, r1
 8004298:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800429c:	4616      	mov	r6, r2
 800429e:	461f      	mov	r7, r3
 80042a0:	4605      	mov	r5, r0
 80042a2:	f000 fd77 	bl	8004d94 <_localeconv_r>
 80042a6:	f8d0 b000 	ldr.w	fp, [r0]
 80042aa:	4658      	mov	r0, fp
 80042ac:	f7fc f818 	bl	80002e0 <strlen>
 80042b0:	2300      	movs	r3, #0
 80042b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80042b4:	f8d8 3000 	ldr.w	r3, [r8]
 80042b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80042bc:	6822      	ldr	r2, [r4, #0]
 80042be:	9005      	str	r0, [sp, #20]
 80042c0:	3307      	adds	r3, #7
 80042c2:	f023 0307 	bic.w	r3, r3, #7
 80042c6:	f103 0108 	add.w	r1, r3, #8
 80042ca:	f8c8 1000 	str.w	r1, [r8]
 80042ce:	ed93 0b00 	vldr	d0, [r3]
 80042d2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004530 <_printf_float+0x2a0>
 80042d6:	eeb0 7bc0 	vabs.f64	d7, d0
 80042da:	eeb4 7b46 	vcmp.f64	d7, d6
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80042e6:	dd24      	ble.n	8004332 <_printf_float+0xa2>
 80042e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d502      	bpl.n	80042f8 <_printf_float+0x68>
 80042f2:	232d      	movs	r3, #45	@ 0x2d
 80042f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042f8:	498f      	ldr	r1, [pc, #572]	@ (8004538 <_printf_float+0x2a8>)
 80042fa:	4b90      	ldr	r3, [pc, #576]	@ (800453c <_printf_float+0x2ac>)
 80042fc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004300:	bf8c      	ite	hi
 8004302:	4688      	movhi	r8, r1
 8004304:	4698      	movls	r8, r3
 8004306:	f022 0204 	bic.w	r2, r2, #4
 800430a:	2303      	movs	r3, #3
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	6022      	str	r2, [r4, #0]
 8004310:	f04f 0a00 	mov.w	sl, #0
 8004314:	9700      	str	r7, [sp, #0]
 8004316:	4633      	mov	r3, r6
 8004318:	aa0b      	add	r2, sp, #44	@ 0x2c
 800431a:	4621      	mov	r1, r4
 800431c:	4628      	mov	r0, r5
 800431e:	f000 f9d1 	bl	80046c4 <_printf_common>
 8004322:	3001      	adds	r0, #1
 8004324:	f040 8089 	bne.w	800443a <_printf_float+0x1aa>
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	b00d      	add	sp, #52	@ 0x34
 800432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004332:	eeb4 0b40 	vcmp.f64	d0, d0
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	d709      	bvc.n	8004350 <_printf_float+0xc0>
 800433c:	ee10 3a90 	vmov	r3, s1
 8004340:	2b00      	cmp	r3, #0
 8004342:	bfbc      	itt	lt
 8004344:	232d      	movlt	r3, #45	@ 0x2d
 8004346:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800434a:	497d      	ldr	r1, [pc, #500]	@ (8004540 <_printf_float+0x2b0>)
 800434c:	4b7d      	ldr	r3, [pc, #500]	@ (8004544 <_printf_float+0x2b4>)
 800434e:	e7d5      	b.n	80042fc <_printf_float+0x6c>
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004358:	d139      	bne.n	80043ce <_printf_float+0x13e>
 800435a:	2306      	movs	r3, #6
 800435c:	6063      	str	r3, [r4, #4]
 800435e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004362:	2300      	movs	r3, #0
 8004364:	6022      	str	r2, [r4, #0]
 8004366:	9303      	str	r3, [sp, #12]
 8004368:	ab0a      	add	r3, sp, #40	@ 0x28
 800436a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800436e:	ab09      	add	r3, sp, #36	@ 0x24
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	6861      	ldr	r1, [r4, #4]
 8004374:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004378:	4628      	mov	r0, r5
 800437a:	f7ff fefa 	bl	8004172 <__cvt>
 800437e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004384:	4680      	mov	r8, r0
 8004386:	d129      	bne.n	80043dc <_printf_float+0x14c>
 8004388:	1cc8      	adds	r0, r1, #3
 800438a:	db02      	blt.n	8004392 <_printf_float+0x102>
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	4299      	cmp	r1, r3
 8004390:	dd41      	ble.n	8004416 <_printf_float+0x186>
 8004392:	f1a9 0902 	sub.w	r9, r9, #2
 8004396:	fa5f f989 	uxtb.w	r9, r9
 800439a:	3901      	subs	r1, #1
 800439c:	464a      	mov	r2, r9
 800439e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80043a4:	f7ff ff39 	bl	800421a <__exponent>
 80043a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80043aa:	1813      	adds	r3, r2, r0
 80043ac:	2a01      	cmp	r2, #1
 80043ae:	4682      	mov	sl, r0
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	dc02      	bgt.n	80043ba <_printf_float+0x12a>
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	07d2      	lsls	r2, r2, #31
 80043b8:	d501      	bpl.n	80043be <_printf_float+0x12e>
 80043ba:	3301      	adds	r3, #1
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0a6      	beq.n	8004314 <_printf_float+0x84>
 80043c6:	232d      	movs	r3, #45	@ 0x2d
 80043c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043cc:	e7a2      	b.n	8004314 <_printf_float+0x84>
 80043ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80043d2:	d1c4      	bne.n	800435e <_printf_float+0xce>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1c2      	bne.n	800435e <_printf_float+0xce>
 80043d8:	2301      	movs	r3, #1
 80043da:	e7bf      	b.n	800435c <_printf_float+0xcc>
 80043dc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80043e0:	d9db      	bls.n	800439a <_printf_float+0x10a>
 80043e2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80043e6:	d118      	bne.n	800441a <_printf_float+0x18a>
 80043e8:	2900      	cmp	r1, #0
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	dd0b      	ble.n	8004406 <_printf_float+0x176>
 80043ee:	6121      	str	r1, [r4, #16]
 80043f0:	b913      	cbnz	r3, 80043f8 <_printf_float+0x168>
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	07d0      	lsls	r0, r2, #31
 80043f6:	d502      	bpl.n	80043fe <_printf_float+0x16e>
 80043f8:	3301      	adds	r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004400:	f04f 0a00 	mov.w	sl, #0
 8004404:	e7db      	b.n	80043be <_printf_float+0x12e>
 8004406:	b913      	cbnz	r3, 800440e <_printf_float+0x17e>
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	07d2      	lsls	r2, r2, #31
 800440c:	d501      	bpl.n	8004412 <_printf_float+0x182>
 800440e:	3302      	adds	r3, #2
 8004410:	e7f4      	b.n	80043fc <_printf_float+0x16c>
 8004412:	2301      	movs	r3, #1
 8004414:	e7f2      	b.n	80043fc <_printf_float+0x16c>
 8004416:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800441a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800441c:	4299      	cmp	r1, r3
 800441e:	db05      	blt.n	800442c <_printf_float+0x19c>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	6121      	str	r1, [r4, #16]
 8004424:	07d8      	lsls	r0, r3, #31
 8004426:	d5ea      	bpl.n	80043fe <_printf_float+0x16e>
 8004428:	1c4b      	adds	r3, r1, #1
 800442a:	e7e7      	b.n	80043fc <_printf_float+0x16c>
 800442c:	2900      	cmp	r1, #0
 800442e:	bfd4      	ite	le
 8004430:	f1c1 0202 	rsble	r2, r1, #2
 8004434:	2201      	movgt	r2, #1
 8004436:	4413      	add	r3, r2
 8004438:	e7e0      	b.n	80043fc <_printf_float+0x16c>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	055a      	lsls	r2, r3, #21
 800443e:	d407      	bmi.n	8004450 <_printf_float+0x1c0>
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	4642      	mov	r2, r8
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	d12a      	bne.n	80044a4 <_printf_float+0x214>
 800444e:	e76b      	b.n	8004328 <_printf_float+0x98>
 8004450:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004454:	f240 80e0 	bls.w	8004618 <_printf_float+0x388>
 8004458:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800445c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	d133      	bne.n	80044ce <_printf_float+0x23e>
 8004466:	4a38      	ldr	r2, [pc, #224]	@ (8004548 <_printf_float+0x2b8>)
 8004468:	2301      	movs	r3, #1
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f af59 	beq.w	8004328 <_printf_float+0x98>
 8004476:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800447a:	4543      	cmp	r3, r8
 800447c:	db02      	blt.n	8004484 <_printf_float+0x1f4>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	07d8      	lsls	r0, r3, #31
 8004482:	d50f      	bpl.n	80044a4 <_printf_float+0x214>
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	465a      	mov	r2, fp
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f af4a 	beq.w	8004328 <_printf_float+0x98>
 8004494:	f04f 0900 	mov.w	r9, #0
 8004498:	f108 38ff 	add.w	r8, r8, #4294967295
 800449c:	f104 0a1a 	add.w	sl, r4, #26
 80044a0:	45c8      	cmp	r8, r9
 80044a2:	dc09      	bgt.n	80044b8 <_printf_float+0x228>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	079b      	lsls	r3, r3, #30
 80044a8:	f100 8107 	bmi.w	80046ba <_printf_float+0x42a>
 80044ac:	68e0      	ldr	r0, [r4, #12]
 80044ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044b0:	4298      	cmp	r0, r3
 80044b2:	bfb8      	it	lt
 80044b4:	4618      	movlt	r0, r3
 80044b6:	e739      	b.n	800432c <_printf_float+0x9c>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4652      	mov	r2, sl
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	47b8      	blx	r7
 80044c2:	3001      	adds	r0, #1
 80044c4:	f43f af30 	beq.w	8004328 <_printf_float+0x98>
 80044c8:	f109 0901 	add.w	r9, r9, #1
 80044cc:	e7e8      	b.n	80044a0 <_printf_float+0x210>
 80044ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	dc3b      	bgt.n	800454c <_printf_float+0x2bc>
 80044d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <_printf_float+0x2b8>)
 80044d6:	2301      	movs	r3, #1
 80044d8:	4631      	mov	r1, r6
 80044da:	4628      	mov	r0, r5
 80044dc:	47b8      	blx	r7
 80044de:	3001      	adds	r0, #1
 80044e0:	f43f af22 	beq.w	8004328 <_printf_float+0x98>
 80044e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80044e8:	ea59 0303 	orrs.w	r3, r9, r3
 80044ec:	d102      	bne.n	80044f4 <_printf_float+0x264>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	07d9      	lsls	r1, r3, #31
 80044f2:	d5d7      	bpl.n	80044a4 <_printf_float+0x214>
 80044f4:	9b05      	ldr	r3, [sp, #20]
 80044f6:	465a      	mov	r2, fp
 80044f8:	4631      	mov	r1, r6
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b8      	blx	r7
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f af12 	beq.w	8004328 <_printf_float+0x98>
 8004504:	f04f 0a00 	mov.w	sl, #0
 8004508:	f104 0b1a 	add.w	fp, r4, #26
 800450c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450e:	425b      	negs	r3, r3
 8004510:	4553      	cmp	r3, sl
 8004512:	dc01      	bgt.n	8004518 <_printf_float+0x288>
 8004514:	464b      	mov	r3, r9
 8004516:	e794      	b.n	8004442 <_printf_float+0x1b2>
 8004518:	2301      	movs	r3, #1
 800451a:	465a      	mov	r2, fp
 800451c:	4631      	mov	r1, r6
 800451e:	4628      	mov	r0, r5
 8004520:	47b8      	blx	r7
 8004522:	3001      	adds	r0, #1
 8004524:	f43f af00 	beq.w	8004328 <_printf_float+0x98>
 8004528:	f10a 0a01 	add.w	sl, sl, #1
 800452c:	e7ee      	b.n	800450c <_printf_float+0x27c>
 800452e:	bf00      	nop
 8004530:	ffffffff 	.word	0xffffffff
 8004534:	7fefffff 	.word	0x7fefffff
 8004538:	08006b94 	.word	0x08006b94
 800453c:	08006b90 	.word	0x08006b90
 8004540:	08006b9c 	.word	0x08006b9c
 8004544:	08006b98 	.word	0x08006b98
 8004548:	08006ba0 	.word	0x08006ba0
 800454c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800454e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004552:	4553      	cmp	r3, sl
 8004554:	bfa8      	it	ge
 8004556:	4653      	movge	r3, sl
 8004558:	2b00      	cmp	r3, #0
 800455a:	4699      	mov	r9, r3
 800455c:	dc37      	bgt.n	80045ce <_printf_float+0x33e>
 800455e:	2300      	movs	r3, #0
 8004560:	9307      	str	r3, [sp, #28]
 8004562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004566:	f104 021a 	add.w	r2, r4, #26
 800456a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800456c:	9907      	ldr	r1, [sp, #28]
 800456e:	9306      	str	r3, [sp, #24]
 8004570:	eba3 0309 	sub.w	r3, r3, r9
 8004574:	428b      	cmp	r3, r1
 8004576:	dc31      	bgt.n	80045dc <_printf_float+0x34c>
 8004578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800457a:	459a      	cmp	sl, r3
 800457c:	dc3b      	bgt.n	80045f6 <_printf_float+0x366>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	07da      	lsls	r2, r3, #31
 8004582:	d438      	bmi.n	80045f6 <_printf_float+0x366>
 8004584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004586:	ebaa 0903 	sub.w	r9, sl, r3
 800458a:	9b06      	ldr	r3, [sp, #24]
 800458c:	ebaa 0303 	sub.w	r3, sl, r3
 8004590:	4599      	cmp	r9, r3
 8004592:	bfa8      	it	ge
 8004594:	4699      	movge	r9, r3
 8004596:	f1b9 0f00 	cmp.w	r9, #0
 800459a:	dc34      	bgt.n	8004606 <_printf_float+0x376>
 800459c:	f04f 0800 	mov.w	r8, #0
 80045a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045a4:	f104 0b1a 	add.w	fp, r4, #26
 80045a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045aa:	ebaa 0303 	sub.w	r3, sl, r3
 80045ae:	eba3 0309 	sub.w	r3, r3, r9
 80045b2:	4543      	cmp	r3, r8
 80045b4:	f77f af76 	ble.w	80044a4 <_printf_float+0x214>
 80045b8:	2301      	movs	r3, #1
 80045ba:	465a      	mov	r2, fp
 80045bc:	4631      	mov	r1, r6
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	f43f aeb0 	beq.w	8004328 <_printf_float+0x98>
 80045c8:	f108 0801 	add.w	r8, r8, #1
 80045cc:	e7ec      	b.n	80045a8 <_printf_float+0x318>
 80045ce:	4642      	mov	r2, r8
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	d1c1      	bne.n	800455e <_printf_float+0x2ce>
 80045da:	e6a5      	b.n	8004328 <_printf_float+0x98>
 80045dc:	2301      	movs	r3, #1
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	9206      	str	r2, [sp, #24]
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f ae9e 	beq.w	8004328 <_printf_float+0x98>
 80045ec:	9b07      	ldr	r3, [sp, #28]
 80045ee:	9a06      	ldr	r2, [sp, #24]
 80045f0:	3301      	adds	r3, #1
 80045f2:	9307      	str	r3, [sp, #28]
 80045f4:	e7b9      	b.n	800456a <_printf_float+0x2da>
 80045f6:	9b05      	ldr	r3, [sp, #20]
 80045f8:	465a      	mov	r2, fp
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	d1bf      	bne.n	8004584 <_printf_float+0x2f4>
 8004604:	e690      	b.n	8004328 <_printf_float+0x98>
 8004606:	9a06      	ldr	r2, [sp, #24]
 8004608:	464b      	mov	r3, r9
 800460a:	4442      	add	r2, r8
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	47b8      	blx	r7
 8004612:	3001      	adds	r0, #1
 8004614:	d1c2      	bne.n	800459c <_printf_float+0x30c>
 8004616:	e687      	b.n	8004328 <_printf_float+0x98>
 8004618:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800461c:	f1b9 0f01 	cmp.w	r9, #1
 8004620:	dc01      	bgt.n	8004626 <_printf_float+0x396>
 8004622:	07db      	lsls	r3, r3, #31
 8004624:	d536      	bpl.n	8004694 <_printf_float+0x404>
 8004626:	2301      	movs	r3, #1
 8004628:	4642      	mov	r2, r8
 800462a:	4631      	mov	r1, r6
 800462c:	4628      	mov	r0, r5
 800462e:	47b8      	blx	r7
 8004630:	3001      	adds	r0, #1
 8004632:	f43f ae79 	beq.w	8004328 <_printf_float+0x98>
 8004636:	9b05      	ldr	r3, [sp, #20]
 8004638:	465a      	mov	r2, fp
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f ae71 	beq.w	8004328 <_printf_float+0x98>
 8004646:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800464a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	f109 39ff 	add.w	r9, r9, #4294967295
 8004656:	d018      	beq.n	800468a <_printf_float+0x3fa>
 8004658:	464b      	mov	r3, r9
 800465a:	f108 0201 	add.w	r2, r8, #1
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	d10c      	bne.n	8004682 <_printf_float+0x3f2>
 8004668:	e65e      	b.n	8004328 <_printf_float+0x98>
 800466a:	2301      	movs	r3, #1
 800466c:	465a      	mov	r2, fp
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f ae57 	beq.w	8004328 <_printf_float+0x98>
 800467a:	f108 0801 	add.w	r8, r8, #1
 800467e:	45c8      	cmp	r8, r9
 8004680:	dbf3      	blt.n	800466a <_printf_float+0x3da>
 8004682:	4653      	mov	r3, sl
 8004684:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004688:	e6dc      	b.n	8004444 <_printf_float+0x1b4>
 800468a:	f04f 0800 	mov.w	r8, #0
 800468e:	f104 0b1a 	add.w	fp, r4, #26
 8004692:	e7f4      	b.n	800467e <_printf_float+0x3ee>
 8004694:	2301      	movs	r3, #1
 8004696:	4642      	mov	r2, r8
 8004698:	e7e1      	b.n	800465e <_printf_float+0x3ce>
 800469a:	2301      	movs	r3, #1
 800469c:	464a      	mov	r2, r9
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	f43f ae3f 	beq.w	8004328 <_printf_float+0x98>
 80046aa:	f108 0801 	add.w	r8, r8, #1
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	4543      	cmp	r3, r8
 80046b6:	dcf0      	bgt.n	800469a <_printf_float+0x40a>
 80046b8:	e6f8      	b.n	80044ac <_printf_float+0x21c>
 80046ba:	f04f 0800 	mov.w	r8, #0
 80046be:	f104 0919 	add.w	r9, r4, #25
 80046c2:	e7f4      	b.n	80046ae <_printf_float+0x41e>

080046c4 <_printf_common>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	4616      	mov	r6, r2
 80046ca:	4698      	mov	r8, r3
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bfb8      	it	lt
 80046d8:	4613      	movlt	r3, r2
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046e0:	4607      	mov	r7, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b10a      	cbz	r2, 80046ea <_printf_common+0x26>
 80046e6:	3301      	adds	r3, #1
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	0699      	lsls	r1, r3, #26
 80046ee:	bf42      	ittt	mi
 80046f0:	6833      	ldrmi	r3, [r6, #0]
 80046f2:	3302      	addmi	r3, #2
 80046f4:	6033      	strmi	r3, [r6, #0]
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	f015 0506 	ands.w	r5, r5, #6
 80046fc:	d106      	bne.n	800470c <_printf_common+0x48>
 80046fe:	f104 0a19 	add.w	sl, r4, #25
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	6832      	ldr	r2, [r6, #0]
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	42ab      	cmp	r3, r5
 800470a:	dc26      	bgt.n	800475a <_printf_common+0x96>
 800470c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	3b00      	subs	r3, #0
 8004714:	bf18      	it	ne
 8004716:	2301      	movne	r3, #1
 8004718:	0692      	lsls	r2, r2, #26
 800471a:	d42b      	bmi.n	8004774 <_printf_common+0xb0>
 800471c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004720:	4641      	mov	r1, r8
 8004722:	4638      	mov	r0, r7
 8004724:	47c8      	blx	r9
 8004726:	3001      	adds	r0, #1
 8004728:	d01e      	beq.n	8004768 <_printf_common+0xa4>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf02      	ittt	eq
 8004736:	68e5      	ldreq	r5, [r4, #12]
 8004738:	6833      	ldreq	r3, [r6, #0]
 800473a:	1aed      	subeq	r5, r5, r3
 800473c:	68a3      	ldr	r3, [r4, #8]
 800473e:	bf0c      	ite	eq
 8004740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004744:	2500      	movne	r5, #0
 8004746:	4293      	cmp	r3, r2
 8004748:	bfc4      	itt	gt
 800474a:	1a9b      	subgt	r3, r3, r2
 800474c:	18ed      	addgt	r5, r5, r3
 800474e:	2600      	movs	r6, #0
 8004750:	341a      	adds	r4, #26
 8004752:	42b5      	cmp	r5, r6
 8004754:	d11a      	bne.n	800478c <_printf_common+0xc8>
 8004756:	2000      	movs	r0, #0
 8004758:	e008      	b.n	800476c <_printf_common+0xa8>
 800475a:	2301      	movs	r3, #1
 800475c:	4652      	mov	r2, sl
 800475e:	4641      	mov	r1, r8
 8004760:	4638      	mov	r0, r7
 8004762:	47c8      	blx	r9
 8004764:	3001      	adds	r0, #1
 8004766:	d103      	bne.n	8004770 <_printf_common+0xac>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	3501      	adds	r5, #1
 8004772:	e7c6      	b.n	8004702 <_printf_common+0x3e>
 8004774:	18e1      	adds	r1, r4, r3
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	2030      	movs	r0, #48	@ 0x30
 800477a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800477e:	4422      	add	r2, r4
 8004780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004788:	3302      	adds	r3, #2
 800478a:	e7c7      	b.n	800471c <_printf_common+0x58>
 800478c:	2301      	movs	r3, #1
 800478e:	4622      	mov	r2, r4
 8004790:	4641      	mov	r1, r8
 8004792:	4638      	mov	r0, r7
 8004794:	47c8      	blx	r9
 8004796:	3001      	adds	r0, #1
 8004798:	d0e6      	beq.n	8004768 <_printf_common+0xa4>
 800479a:	3601      	adds	r6, #1
 800479c:	e7d9      	b.n	8004752 <_printf_common+0x8e>
	...

080047a0 <_printf_i>:
 80047a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	7e0f      	ldrb	r7, [r1, #24]
 80047a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047a8:	2f78      	cmp	r7, #120	@ 0x78
 80047aa:	4691      	mov	r9, r2
 80047ac:	4680      	mov	r8, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	469a      	mov	sl, r3
 80047b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047b6:	d807      	bhi.n	80047c8 <_printf_i+0x28>
 80047b8:	2f62      	cmp	r7, #98	@ 0x62
 80047ba:	d80a      	bhi.n	80047d2 <_printf_i+0x32>
 80047bc:	2f00      	cmp	r7, #0
 80047be:	f000 80d1 	beq.w	8004964 <_printf_i+0x1c4>
 80047c2:	2f58      	cmp	r7, #88	@ 0x58
 80047c4:	f000 80b8 	beq.w	8004938 <_printf_i+0x198>
 80047c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047d0:	e03a      	b.n	8004848 <_printf_i+0xa8>
 80047d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047d6:	2b15      	cmp	r3, #21
 80047d8:	d8f6      	bhi.n	80047c8 <_printf_i+0x28>
 80047da:	a101      	add	r1, pc, #4	@ (adr r1, 80047e0 <_printf_i+0x40>)
 80047dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e0:	08004839 	.word	0x08004839
 80047e4:	0800484d 	.word	0x0800484d
 80047e8:	080047c9 	.word	0x080047c9
 80047ec:	080047c9 	.word	0x080047c9
 80047f0:	080047c9 	.word	0x080047c9
 80047f4:	080047c9 	.word	0x080047c9
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	080047c9 	.word	0x080047c9
 8004800:	080047c9 	.word	0x080047c9
 8004804:	080047c9 	.word	0x080047c9
 8004808:	080047c9 	.word	0x080047c9
 800480c:	0800494b 	.word	0x0800494b
 8004810:	08004877 	.word	0x08004877
 8004814:	08004905 	.word	0x08004905
 8004818:	080047c9 	.word	0x080047c9
 800481c:	080047c9 	.word	0x080047c9
 8004820:	0800496d 	.word	0x0800496d
 8004824:	080047c9 	.word	0x080047c9
 8004828:	08004877 	.word	0x08004877
 800482c:	080047c9 	.word	0x080047c9
 8004830:	080047c9 	.word	0x080047c9
 8004834:	0800490d 	.word	0x0800490d
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6032      	str	r2, [r6, #0]
 8004840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004848:	2301      	movs	r3, #1
 800484a:	e09c      	b.n	8004986 <_printf_i+0x1e6>
 800484c:	6833      	ldr	r3, [r6, #0]
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	6031      	str	r1, [r6, #0]
 8004854:	0606      	lsls	r6, r0, #24
 8004856:	d501      	bpl.n	800485c <_printf_i+0xbc>
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	e003      	b.n	8004864 <_printf_i+0xc4>
 800485c:	0645      	lsls	r5, r0, #25
 800485e:	d5fb      	bpl.n	8004858 <_printf_i+0xb8>
 8004860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004864:	2d00      	cmp	r5, #0
 8004866:	da03      	bge.n	8004870 <_printf_i+0xd0>
 8004868:	232d      	movs	r3, #45	@ 0x2d
 800486a:	426d      	negs	r5, r5
 800486c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004870:	4858      	ldr	r0, [pc, #352]	@ (80049d4 <_printf_i+0x234>)
 8004872:	230a      	movs	r3, #10
 8004874:	e011      	b.n	800489a <_printf_i+0xfa>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	0608      	lsls	r0, r1, #24
 800487c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004880:	d402      	bmi.n	8004888 <_printf_i+0xe8>
 8004882:	0649      	lsls	r1, r1, #25
 8004884:	bf48      	it	mi
 8004886:	b2ad      	uxthmi	r5, r5
 8004888:	2f6f      	cmp	r7, #111	@ 0x6f
 800488a:	4852      	ldr	r0, [pc, #328]	@ (80049d4 <_printf_i+0x234>)
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	bf14      	ite	ne
 8004890:	230a      	movne	r3, #10
 8004892:	2308      	moveq	r3, #8
 8004894:	2100      	movs	r1, #0
 8004896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800489a:	6866      	ldr	r6, [r4, #4]
 800489c:	60a6      	str	r6, [r4, #8]
 800489e:	2e00      	cmp	r6, #0
 80048a0:	db05      	blt.n	80048ae <_printf_i+0x10e>
 80048a2:	6821      	ldr	r1, [r4, #0]
 80048a4:	432e      	orrs	r6, r5
 80048a6:	f021 0104 	bic.w	r1, r1, #4
 80048aa:	6021      	str	r1, [r4, #0]
 80048ac:	d04b      	beq.n	8004946 <_printf_i+0x1a6>
 80048ae:	4616      	mov	r6, r2
 80048b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b4:	fb03 5711 	mls	r7, r3, r1, r5
 80048b8:	5dc7      	ldrb	r7, [r0, r7]
 80048ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048be:	462f      	mov	r7, r5
 80048c0:	42bb      	cmp	r3, r7
 80048c2:	460d      	mov	r5, r1
 80048c4:	d9f4      	bls.n	80048b0 <_printf_i+0x110>
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d10b      	bne.n	80048e2 <_printf_i+0x142>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	07df      	lsls	r7, r3, #31
 80048ce:	d508      	bpl.n	80048e2 <_printf_i+0x142>
 80048d0:	6923      	ldr	r3, [r4, #16]
 80048d2:	6861      	ldr	r1, [r4, #4]
 80048d4:	4299      	cmp	r1, r3
 80048d6:	bfde      	ittt	le
 80048d8:	2330      	movle	r3, #48	@ 0x30
 80048da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048e2:	1b92      	subs	r2, r2, r6
 80048e4:	6122      	str	r2, [r4, #16]
 80048e6:	f8cd a000 	str.w	sl, [sp]
 80048ea:	464b      	mov	r3, r9
 80048ec:	aa03      	add	r2, sp, #12
 80048ee:	4621      	mov	r1, r4
 80048f0:	4640      	mov	r0, r8
 80048f2:	f7ff fee7 	bl	80046c4 <_printf_common>
 80048f6:	3001      	adds	r0, #1
 80048f8:	d14a      	bne.n	8004990 <_printf_i+0x1f0>
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	b004      	add	sp, #16
 8004900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f043 0320 	orr.w	r3, r3, #32
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	4832      	ldr	r0, [pc, #200]	@ (80049d8 <_printf_i+0x238>)
 800490e:	2778      	movs	r7, #120	@ 0x78
 8004910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	061f      	lsls	r7, r3, #24
 800491a:	f851 5b04 	ldr.w	r5, [r1], #4
 800491e:	d402      	bmi.n	8004926 <_printf_i+0x186>
 8004920:	065f      	lsls	r7, r3, #25
 8004922:	bf48      	it	mi
 8004924:	b2ad      	uxthmi	r5, r5
 8004926:	6031      	str	r1, [r6, #0]
 8004928:	07d9      	lsls	r1, r3, #31
 800492a:	bf44      	itt	mi
 800492c:	f043 0320 	orrmi.w	r3, r3, #32
 8004930:	6023      	strmi	r3, [r4, #0]
 8004932:	b11d      	cbz	r5, 800493c <_printf_i+0x19c>
 8004934:	2310      	movs	r3, #16
 8004936:	e7ad      	b.n	8004894 <_printf_i+0xf4>
 8004938:	4826      	ldr	r0, [pc, #152]	@ (80049d4 <_printf_i+0x234>)
 800493a:	e7e9      	b.n	8004910 <_printf_i+0x170>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	f023 0320 	bic.w	r3, r3, #32
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	e7f6      	b.n	8004934 <_printf_i+0x194>
 8004946:	4616      	mov	r6, r2
 8004948:	e7bd      	b.n	80048c6 <_printf_i+0x126>
 800494a:	6833      	ldr	r3, [r6, #0]
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	6961      	ldr	r1, [r4, #20]
 8004950:	1d18      	adds	r0, r3, #4
 8004952:	6030      	str	r0, [r6, #0]
 8004954:	062e      	lsls	r6, r5, #24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	d501      	bpl.n	800495e <_printf_i+0x1be>
 800495a:	6019      	str	r1, [r3, #0]
 800495c:	e002      	b.n	8004964 <_printf_i+0x1c4>
 800495e:	0668      	lsls	r0, r5, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0x1ba>
 8004962:	8019      	strh	r1, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	6123      	str	r3, [r4, #16]
 8004968:	4616      	mov	r6, r2
 800496a:	e7bc      	b.n	80048e6 <_printf_i+0x146>
 800496c:	6833      	ldr	r3, [r6, #0]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	6032      	str	r2, [r6, #0]
 8004972:	681e      	ldr	r6, [r3, #0]
 8004974:	6862      	ldr	r2, [r4, #4]
 8004976:	2100      	movs	r1, #0
 8004978:	4630      	mov	r0, r6
 800497a:	f7fb fc61 	bl	8000240 <memchr>
 800497e:	b108      	cbz	r0, 8004984 <_printf_i+0x1e4>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	6060      	str	r0, [r4, #4]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2300      	movs	r3, #0
 800498a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498e:	e7aa      	b.n	80048e6 <_printf_i+0x146>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	4632      	mov	r2, r6
 8004994:	4649      	mov	r1, r9
 8004996:	4640      	mov	r0, r8
 8004998:	47d0      	blx	sl
 800499a:	3001      	adds	r0, #1
 800499c:	d0ad      	beq.n	80048fa <_printf_i+0x15a>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	079b      	lsls	r3, r3, #30
 80049a2:	d413      	bmi.n	80049cc <_printf_i+0x22c>
 80049a4:	68e0      	ldr	r0, [r4, #12]
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	4298      	cmp	r0, r3
 80049aa:	bfb8      	it	lt
 80049ac:	4618      	movlt	r0, r3
 80049ae:	e7a6      	b.n	80048fe <_printf_i+0x15e>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4632      	mov	r2, r6
 80049b4:	4649      	mov	r1, r9
 80049b6:	4640      	mov	r0, r8
 80049b8:	47d0      	blx	sl
 80049ba:	3001      	adds	r0, #1
 80049bc:	d09d      	beq.n	80048fa <_printf_i+0x15a>
 80049be:	3501      	adds	r5, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	9903      	ldr	r1, [sp, #12]
 80049c4:	1a5b      	subs	r3, r3, r1
 80049c6:	42ab      	cmp	r3, r5
 80049c8:	dcf2      	bgt.n	80049b0 <_printf_i+0x210>
 80049ca:	e7eb      	b.n	80049a4 <_printf_i+0x204>
 80049cc:	2500      	movs	r5, #0
 80049ce:	f104 0619 	add.w	r6, r4, #25
 80049d2:	e7f5      	b.n	80049c0 <_printf_i+0x220>
 80049d4:	08006ba2 	.word	0x08006ba2
 80049d8:	08006bb3 	.word	0x08006bb3

080049dc <std>:
 80049dc:	2300      	movs	r3, #0
 80049de:	b510      	push	{r4, lr}
 80049e0:	4604      	mov	r4, r0
 80049e2:	e9c0 3300 	strd	r3, r3, [r0]
 80049e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ea:	6083      	str	r3, [r0, #8]
 80049ec:	8181      	strh	r1, [r0, #12]
 80049ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80049f0:	81c2      	strh	r2, [r0, #14]
 80049f2:	6183      	str	r3, [r0, #24]
 80049f4:	4619      	mov	r1, r3
 80049f6:	2208      	movs	r2, #8
 80049f8:	305c      	adds	r0, #92	@ 0x5c
 80049fa:	f000 f9c2 	bl	8004d82 <memset>
 80049fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <std+0x58>)
 8004a00:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a02:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <std+0x5c>)
 8004a04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <std+0x60>)
 8004a08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <std+0x64>)
 8004a0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <std+0x68>)
 8004a10:	6224      	str	r4, [r4, #32]
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d006      	beq.n	8004a24 <std+0x48>
 8004a16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a1a:	4294      	cmp	r4, r2
 8004a1c:	d002      	beq.n	8004a24 <std+0x48>
 8004a1e:	33d0      	adds	r3, #208	@ 0xd0
 8004a20:	429c      	cmp	r4, r3
 8004a22:	d105      	bne.n	8004a30 <std+0x54>
 8004a24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a2c:	f000 ba26 	b.w	8004e7c <__retarget_lock_init_recursive>
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	08004cfd 	.word	0x08004cfd
 8004a38:	08004d1f 	.word	0x08004d1f
 8004a3c:	08004d57 	.word	0x08004d57
 8004a40:	08004d7b 	.word	0x08004d7b
 8004a44:	200002d8 	.word	0x200002d8

08004a48 <stdio_exit_handler>:
 8004a48:	4a02      	ldr	r2, [pc, #8]	@ (8004a54 <stdio_exit_handler+0xc>)
 8004a4a:	4903      	ldr	r1, [pc, #12]	@ (8004a58 <stdio_exit_handler+0x10>)
 8004a4c:	4803      	ldr	r0, [pc, #12]	@ (8004a5c <stdio_exit_handler+0x14>)
 8004a4e:	f000 b869 	b.w	8004b24 <_fwalk_sglue>
 8004a52:	bf00      	nop
 8004a54:	20000010 	.word	0x20000010
 8004a58:	080066d5 	.word	0x080066d5
 8004a5c:	20000020 	.word	0x20000020

08004a60 <cleanup_stdio>:
 8004a60:	6841      	ldr	r1, [r0, #4]
 8004a62:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <cleanup_stdio+0x34>)
 8004a64:	4299      	cmp	r1, r3
 8004a66:	b510      	push	{r4, lr}
 8004a68:	4604      	mov	r4, r0
 8004a6a:	d001      	beq.n	8004a70 <cleanup_stdio+0x10>
 8004a6c:	f001 fe32 	bl	80066d4 <_fflush_r>
 8004a70:	68a1      	ldr	r1, [r4, #8]
 8004a72:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <cleanup_stdio+0x38>)
 8004a74:	4299      	cmp	r1, r3
 8004a76:	d002      	beq.n	8004a7e <cleanup_stdio+0x1e>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f001 fe2b 	bl	80066d4 <_fflush_r>
 8004a7e:	68e1      	ldr	r1, [r4, #12]
 8004a80:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <cleanup_stdio+0x3c>)
 8004a82:	4299      	cmp	r1, r3
 8004a84:	d004      	beq.n	8004a90 <cleanup_stdio+0x30>
 8004a86:	4620      	mov	r0, r4
 8004a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a8c:	f001 be22 	b.w	80066d4 <_fflush_r>
 8004a90:	bd10      	pop	{r4, pc}
 8004a92:	bf00      	nop
 8004a94:	200002d8 	.word	0x200002d8
 8004a98:	20000340 	.word	0x20000340
 8004a9c:	200003a8 	.word	0x200003a8

08004aa0 <global_stdio_init.part.0>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <global_stdio_init.part.0+0x30>)
 8004aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8004ad4 <global_stdio_init.part.0+0x34>)
 8004aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad8 <global_stdio_init.part.0+0x38>)
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	4620      	mov	r0, r4
 8004aac:	2200      	movs	r2, #0
 8004aae:	2104      	movs	r1, #4
 8004ab0:	f7ff ff94 	bl	80049dc <std>
 8004ab4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ab8:	2201      	movs	r2, #1
 8004aba:	2109      	movs	r1, #9
 8004abc:	f7ff ff8e 	bl	80049dc <std>
 8004ac0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aca:	2112      	movs	r1, #18
 8004acc:	f7ff bf86 	b.w	80049dc <std>
 8004ad0:	20000410 	.word	0x20000410
 8004ad4:	200002d8 	.word	0x200002d8
 8004ad8:	08004a49 	.word	0x08004a49

08004adc <__sfp_lock_acquire>:
 8004adc:	4801      	ldr	r0, [pc, #4]	@ (8004ae4 <__sfp_lock_acquire+0x8>)
 8004ade:	f000 b9ce 	b.w	8004e7e <__retarget_lock_acquire_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	20000419 	.word	0x20000419

08004ae8 <__sfp_lock_release>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	@ (8004af0 <__sfp_lock_release+0x8>)
 8004aea:	f000 b9c9 	b.w	8004e80 <__retarget_lock_release_recursive>
 8004aee:	bf00      	nop
 8004af0:	20000419 	.word	0x20000419

08004af4 <__sinit>:
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4604      	mov	r4, r0
 8004af8:	f7ff fff0 	bl	8004adc <__sfp_lock_acquire>
 8004afc:	6a23      	ldr	r3, [r4, #32]
 8004afe:	b11b      	cbz	r3, 8004b08 <__sinit+0x14>
 8004b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b04:	f7ff bff0 	b.w	8004ae8 <__sfp_lock_release>
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <__sinit+0x28>)
 8004b0a:	6223      	str	r3, [r4, #32]
 8004b0c:	4b04      	ldr	r3, [pc, #16]	@ (8004b20 <__sinit+0x2c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f5      	bne.n	8004b00 <__sinit+0xc>
 8004b14:	f7ff ffc4 	bl	8004aa0 <global_stdio_init.part.0>
 8004b18:	e7f2      	b.n	8004b00 <__sinit+0xc>
 8004b1a:	bf00      	nop
 8004b1c:	08004a61 	.word	0x08004a61
 8004b20:	20000410 	.word	0x20000410

08004b24 <_fwalk_sglue>:
 8004b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b28:	4607      	mov	r7, r0
 8004b2a:	4688      	mov	r8, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	2600      	movs	r6, #0
 8004b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b34:	f1b9 0901 	subs.w	r9, r9, #1
 8004b38:	d505      	bpl.n	8004b46 <_fwalk_sglue+0x22>
 8004b3a:	6824      	ldr	r4, [r4, #0]
 8004b3c:	2c00      	cmp	r4, #0
 8004b3e:	d1f7      	bne.n	8004b30 <_fwalk_sglue+0xc>
 8004b40:	4630      	mov	r0, r6
 8004b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b46:	89ab      	ldrh	r3, [r5, #12]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d907      	bls.n	8004b5c <_fwalk_sglue+0x38>
 8004b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b50:	3301      	adds	r3, #1
 8004b52:	d003      	beq.n	8004b5c <_fwalk_sglue+0x38>
 8004b54:	4629      	mov	r1, r5
 8004b56:	4638      	mov	r0, r7
 8004b58:	47c0      	blx	r8
 8004b5a:	4306      	orrs	r6, r0
 8004b5c:	3568      	adds	r5, #104	@ 0x68
 8004b5e:	e7e9      	b.n	8004b34 <_fwalk_sglue+0x10>

08004b60 <iprintf>:
 8004b60:	b40f      	push	{r0, r1, r2, r3}
 8004b62:	b507      	push	{r0, r1, r2, lr}
 8004b64:	4906      	ldr	r1, [pc, #24]	@ (8004b80 <iprintf+0x20>)
 8004b66:	ab04      	add	r3, sp, #16
 8004b68:	6808      	ldr	r0, [r1, #0]
 8004b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6e:	6881      	ldr	r1, [r0, #8]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	f001 fc13 	bl	800639c <_vfiprintf_r>
 8004b76:	b003      	add	sp, #12
 8004b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b7c:	b004      	add	sp, #16
 8004b7e:	4770      	bx	lr
 8004b80:	2000001c 	.word	0x2000001c

08004b84 <setbuf>:
 8004b84:	fab1 f281 	clz	r2, r1
 8004b88:	0952      	lsrs	r2, r2, #5
 8004b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b8e:	0052      	lsls	r2, r2, #1
 8004b90:	f000 b800 	b.w	8004b94 <setvbuf>

08004b94 <setvbuf>:
 8004b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b98:	461d      	mov	r5, r3
 8004b9a:	4b57      	ldr	r3, [pc, #348]	@ (8004cf8 <setvbuf+0x164>)
 8004b9c:	681f      	ldr	r7, [r3, #0]
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	460e      	mov	r6, r1
 8004ba2:	4690      	mov	r8, r2
 8004ba4:	b127      	cbz	r7, 8004bb0 <setvbuf+0x1c>
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	b913      	cbnz	r3, 8004bb0 <setvbuf+0x1c>
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7ff ffa2 	bl	8004af4 <__sinit>
 8004bb0:	f1b8 0f02 	cmp.w	r8, #2
 8004bb4:	d006      	beq.n	8004bc4 <setvbuf+0x30>
 8004bb6:	f1b8 0f01 	cmp.w	r8, #1
 8004bba:	f200 809a 	bhi.w	8004cf2 <setvbuf+0x15e>
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	f2c0 8097 	blt.w	8004cf2 <setvbuf+0x15e>
 8004bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bc6:	07d9      	lsls	r1, r3, #31
 8004bc8:	d405      	bmi.n	8004bd6 <setvbuf+0x42>
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	059a      	lsls	r2, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <setvbuf+0x42>
 8004bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bd2:	f000 f954 	bl	8004e7e <__retarget_lock_acquire_recursive>
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4638      	mov	r0, r7
 8004bda:	f001 fd7b 	bl	80066d4 <_fflush_r>
 8004bde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004be0:	b141      	cbz	r1, 8004bf4 <setvbuf+0x60>
 8004be2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004be6:	4299      	cmp	r1, r3
 8004be8:	d002      	beq.n	8004bf0 <setvbuf+0x5c>
 8004bea:	4638      	mov	r0, r7
 8004bec:	f000 ff32 	bl	8005a54 <_free_r>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61a3      	str	r3, [r4, #24]
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	d503      	bpl.n	8004c08 <setvbuf+0x74>
 8004c00:	6921      	ldr	r1, [r4, #16]
 8004c02:	4638      	mov	r0, r7
 8004c04:	f000 ff26 	bl	8005a54 <_free_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	f1b8 0f02 	cmp.w	r8, #2
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	d061      	beq.n	8004cde <setvbuf+0x14a>
 8004c1a:	ab01      	add	r3, sp, #4
 8004c1c:	466a      	mov	r2, sp
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4638      	mov	r0, r7
 8004c22:	f001 fd7f 	bl	8006724 <__swhatbuf_r>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	4318      	orrs	r0, r3
 8004c2a:	81a0      	strh	r0, [r4, #12]
 8004c2c:	bb2d      	cbnz	r5, 8004c7a <setvbuf+0xe6>
 8004c2e:	9d00      	ldr	r5, [sp, #0]
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 ff59 	bl	8005ae8 <malloc>
 8004c36:	4606      	mov	r6, r0
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d152      	bne.n	8004ce2 <setvbuf+0x14e>
 8004c3c:	f8dd 9000 	ldr.w	r9, [sp]
 8004c40:	45a9      	cmp	r9, r5
 8004c42:	d140      	bne.n	8004cc6 <setvbuf+0x132>
 8004c44:	f04f 35ff 	mov.w	r5, #4294967295
 8004c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4c:	f043 0202 	orr.w	r2, r3, #2
 8004c50:	81a2      	strh	r2, [r4, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	60a2      	str	r2, [r4, #8]
 8004c56:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004c5a:	6022      	str	r2, [r4, #0]
 8004c5c:	6122      	str	r2, [r4, #16]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	6162      	str	r2, [r4, #20]
 8004c62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c64:	07d6      	lsls	r6, r2, #31
 8004c66:	d404      	bmi.n	8004c72 <setvbuf+0xde>
 8004c68:	0598      	lsls	r0, r3, #22
 8004c6a:	d402      	bmi.n	8004c72 <setvbuf+0xde>
 8004c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c6e:	f000 f907 	bl	8004e80 <__retarget_lock_release_recursive>
 8004c72:	4628      	mov	r0, r5
 8004c74:	b003      	add	sp, #12
 8004c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d0d8      	beq.n	8004c30 <setvbuf+0x9c>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	b913      	cbnz	r3, 8004c88 <setvbuf+0xf4>
 8004c82:	4638      	mov	r0, r7
 8004c84:	f7ff ff36 	bl	8004af4 <__sinit>
 8004c88:	f1b8 0f01 	cmp.w	r8, #1
 8004c8c:	bf08      	it	eq
 8004c8e:	89a3      	ldrheq	r3, [r4, #12]
 8004c90:	6026      	str	r6, [r4, #0]
 8004c92:	bf04      	itt	eq
 8004c94:	f043 0301 	orreq.w	r3, r3, #1
 8004c98:	81a3      	strheq	r3, [r4, #12]
 8004c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9e:	f013 0208 	ands.w	r2, r3, #8
 8004ca2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004ca6:	d01e      	beq.n	8004ce6 <setvbuf+0x152>
 8004ca8:	07d9      	lsls	r1, r3, #31
 8004caa:	bf41      	itttt	mi
 8004cac:	2200      	movmi	r2, #0
 8004cae:	426d      	negmi	r5, r5
 8004cb0:	60a2      	strmi	r2, [r4, #8]
 8004cb2:	61a5      	strmi	r5, [r4, #24]
 8004cb4:	bf58      	it	pl
 8004cb6:	60a5      	strpl	r5, [r4, #8]
 8004cb8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cba:	07d2      	lsls	r2, r2, #31
 8004cbc:	d401      	bmi.n	8004cc2 <setvbuf+0x12e>
 8004cbe:	059b      	lsls	r3, r3, #22
 8004cc0:	d513      	bpl.n	8004cea <setvbuf+0x156>
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	e7d5      	b.n	8004c72 <setvbuf+0xde>
 8004cc6:	4648      	mov	r0, r9
 8004cc8:	f000 ff0e 	bl	8005ae8 <malloc>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0b8      	beq.n	8004c44 <setvbuf+0xb0>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	464d      	mov	r5, r9
 8004cdc:	e7cf      	b.n	8004c7e <setvbuf+0xea>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	e7b2      	b.n	8004c48 <setvbuf+0xb4>
 8004ce2:	46a9      	mov	r9, r5
 8004ce4:	e7f5      	b.n	8004cd2 <setvbuf+0x13e>
 8004ce6:	60a2      	str	r2, [r4, #8]
 8004ce8:	e7e6      	b.n	8004cb8 <setvbuf+0x124>
 8004cea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cec:	f000 f8c8 	bl	8004e80 <__retarget_lock_release_recursive>
 8004cf0:	e7e7      	b.n	8004cc2 <setvbuf+0x12e>
 8004cf2:	f04f 35ff 	mov.w	r5, #4294967295
 8004cf6:	e7bc      	b.n	8004c72 <setvbuf+0xde>
 8004cf8:	2000001c 	.word	0x2000001c

08004cfc <__sread>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	460c      	mov	r4, r1
 8004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d04:	f000 f86c 	bl	8004de0 <_read_r>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	bfab      	itete	ge
 8004d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d10:	181b      	addge	r3, r3, r0
 8004d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d16:	bfac      	ite	ge
 8004d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d1a:	81a3      	strhlt	r3, [r4, #12]
 8004d1c:	bd10      	pop	{r4, pc}

08004d1e <__swrite>:
 8004d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d22:	461f      	mov	r7, r3
 8004d24:	898b      	ldrh	r3, [r1, #12]
 8004d26:	05db      	lsls	r3, r3, #23
 8004d28:	4605      	mov	r5, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	d505      	bpl.n	8004d3c <__swrite+0x1e>
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	2302      	movs	r3, #2
 8004d36:	2200      	movs	r2, #0
 8004d38:	f000 f840 	bl	8004dbc <_lseek_r>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	4632      	mov	r2, r6
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d52:	f000 b857 	b.w	8004e04 <_write_r>

08004d56 <__sseek>:
 8004d56:	b510      	push	{r4, lr}
 8004d58:	460c      	mov	r4, r1
 8004d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5e:	f000 f82d 	bl	8004dbc <_lseek_r>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	bf15      	itete	ne
 8004d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d72:	81a3      	strheq	r3, [r4, #12]
 8004d74:	bf18      	it	ne
 8004d76:	81a3      	strhne	r3, [r4, #12]
 8004d78:	bd10      	pop	{r4, pc}

08004d7a <__sclose>:
 8004d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7e:	f000 b80d 	b.w	8004d9c <_close_r>

08004d82 <memset>:
 8004d82:	4402      	add	r2, r0
 8004d84:	4603      	mov	r3, r0
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d100      	bne.n	8004d8c <memset+0xa>
 8004d8a:	4770      	bx	lr
 8004d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d90:	e7f9      	b.n	8004d86 <memset+0x4>
	...

08004d94 <_localeconv_r>:
 8004d94:	4800      	ldr	r0, [pc, #0]	@ (8004d98 <_localeconv_r+0x4>)
 8004d96:	4770      	bx	lr
 8004d98:	2000015c 	.word	0x2000015c

08004d9c <_close_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d06      	ldr	r5, [pc, #24]	@ (8004db8 <_close_r+0x1c>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	602b      	str	r3, [r5, #0]
 8004da8:	f7fc f99b 	bl	80010e2 <_close>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_close_r+0x1a>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_close_r+0x1a>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000414 	.word	0x20000414

08004dbc <_lseek_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d07      	ldr	r5, [pc, #28]	@ (8004ddc <_lseek_r+0x20>)
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fc f9b0 	bl	8001130 <_lseek>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_lseek_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_lseek_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	20000414 	.word	0x20000414

08004de0 <_read_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d07      	ldr	r5, [pc, #28]	@ (8004e00 <_read_r+0x20>)
 8004de4:	4604      	mov	r4, r0
 8004de6:	4608      	mov	r0, r1
 8004de8:	4611      	mov	r1, r2
 8004dea:	2200      	movs	r2, #0
 8004dec:	602a      	str	r2, [r5, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f7fc f95a 	bl	80010a8 <_read>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_read_r+0x1e>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_read_r+0x1e>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000414 	.word	0x20000414

08004e04 <_write_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	@ (8004e24 <_write_r+0x20>)
 8004e08:	4604      	mov	r4, r0
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f7fb fc02 	bl	800061c <_write>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_write_r+0x1e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_write_r+0x1e>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000414 	.word	0x20000414

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	@ (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000001c 	.word	0x2000001c

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	@ (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	@ (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	@ (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	@ (8004e78 <__libc_init_array+0x44>)
 8004e48:	f001 fe52 	bl	8006af0 <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08006f0c 	.word	0x08006f0c
 8004e70:	08006f0c 	.word	0x08006f0c
 8004e74:	08006f0c 	.word	0x08006f0c
 8004e78:	08006f10 	.word	0x08006f10

08004e7c <__retarget_lock_init_recursive>:
 8004e7c:	4770      	bx	lr

08004e7e <__retarget_lock_acquire_recursive>:
 8004e7e:	4770      	bx	lr

08004e80 <__retarget_lock_release_recursive>:
 8004e80:	4770      	bx	lr

08004e82 <quorem>:
 8004e82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	6903      	ldr	r3, [r0, #16]
 8004e88:	690c      	ldr	r4, [r1, #16]
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	db7e      	blt.n	8004f8e <quorem+0x10c>
 8004e90:	3c01      	subs	r4, #1
 8004e92:	f101 0814 	add.w	r8, r1, #20
 8004e96:	00a3      	lsls	r3, r4, #2
 8004e98:	f100 0514 	add.w	r5, r0, #20
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eac:	3301      	adds	r3, #1
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eb8:	d32e      	bcc.n	8004f18 <quorem+0x96>
 8004eba:	f04f 0a00 	mov.w	sl, #0
 8004ebe:	46c4      	mov	ip, r8
 8004ec0:	46ae      	mov	lr, r5
 8004ec2:	46d3      	mov	fp, sl
 8004ec4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ec8:	b298      	uxth	r0, r3
 8004eca:	fb06 a000 	mla	r0, r6, r0, sl
 8004ece:	0c02      	lsrs	r2, r0, #16
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	fb06 2303 	mla	r3, r6, r3, r2
 8004ed6:	f8de 2000 	ldr.w	r2, [lr]
 8004eda:	b280      	uxth	r0, r0
 8004edc:	b292      	uxth	r2, r2
 8004ede:	1a12      	subs	r2, r2, r0
 8004ee0:	445a      	add	r2, fp
 8004ee2:	f8de 0000 	ldr.w	r0, [lr]
 8004ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ef0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004efa:	45e1      	cmp	r9, ip
 8004efc:	f84e 2b04 	str.w	r2, [lr], #4
 8004f00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f04:	d2de      	bcs.n	8004ec4 <quorem+0x42>
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	58eb      	ldr	r3, [r5, r3]
 8004f0a:	b92b      	cbnz	r3, 8004f18 <quorem+0x96>
 8004f0c:	9b01      	ldr	r3, [sp, #4]
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	429d      	cmp	r5, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	d32f      	bcc.n	8004f76 <quorem+0xf4>
 8004f16:	613c      	str	r4, [r7, #16]
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f001 f90d 	bl	8006138 <__mcmp>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	db25      	blt.n	8004f6e <quorem+0xec>
 8004f22:	4629      	mov	r1, r5
 8004f24:	2000      	movs	r0, #0
 8004f26:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f2a:	f8d1 c000 	ldr.w	ip, [r1]
 8004f2e:	fa1f fe82 	uxth.w	lr, r2
 8004f32:	fa1f f38c 	uxth.w	r3, ip
 8004f36:	eba3 030e 	sub.w	r3, r3, lr
 8004f3a:	4403      	add	r3, r0
 8004f3c:	0c12      	lsrs	r2, r2, #16
 8004f3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f4c:	45c1      	cmp	r9, r8
 8004f4e:	f841 3b04 	str.w	r3, [r1], #4
 8004f52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f56:	d2e6      	bcs.n	8004f26 <quorem+0xa4>
 8004f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f60:	b922      	cbnz	r2, 8004f6c <quorem+0xea>
 8004f62:	3b04      	subs	r3, #4
 8004f64:	429d      	cmp	r5, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	d30b      	bcc.n	8004f82 <quorem+0x100>
 8004f6a:	613c      	str	r4, [r7, #16]
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	4630      	mov	r0, r6
 8004f70:	b003      	add	sp, #12
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d1cb      	bne.n	8004f16 <quorem+0x94>
 8004f7e:	3c01      	subs	r4, #1
 8004f80:	e7c6      	b.n	8004f10 <quorem+0x8e>
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	d1ef      	bne.n	8004f6a <quorem+0xe8>
 8004f8a:	3c01      	subs	r4, #1
 8004f8c:	e7ea      	b.n	8004f64 <quorem+0xe2>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e7ee      	b.n	8004f70 <quorem+0xee>
 8004f92:	0000      	movs	r0, r0
 8004f94:	0000      	movs	r0, r0
	...

08004f98 <_dtoa_r>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	ed2d 8b02 	vpush	{d8}
 8004fa0:	69c7      	ldr	r7, [r0, #28]
 8004fa2:	b091      	sub	sp, #68	@ 0x44
 8004fa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004fa8:	ec55 4b10 	vmov	r4, r5, d0
 8004fac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004fae:	9107      	str	r1, [sp, #28]
 8004fb0:	4681      	mov	r9, r0
 8004fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fb4:	930d      	str	r3, [sp, #52]	@ 0x34
 8004fb6:	b97f      	cbnz	r7, 8004fd8 <_dtoa_r+0x40>
 8004fb8:	2010      	movs	r0, #16
 8004fba:	f000 fd95 	bl	8005ae8 <malloc>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	f8c9 001c 	str.w	r0, [r9, #28]
 8004fc4:	b920      	cbnz	r0, 8004fd0 <_dtoa_r+0x38>
 8004fc6:	4ba0      	ldr	r3, [pc, #640]	@ (8005248 <_dtoa_r+0x2b0>)
 8004fc8:	21ef      	movs	r1, #239	@ 0xef
 8004fca:	48a0      	ldr	r0, [pc, #640]	@ (800524c <_dtoa_r+0x2b4>)
 8004fcc:	f001 fce0 	bl	8006990 <__assert_func>
 8004fd0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004fd4:	6007      	str	r7, [r0, #0]
 8004fd6:	60c7      	str	r7, [r0, #12]
 8004fd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	b159      	cbz	r1, 8004ff8 <_dtoa_r+0x60>
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	604a      	str	r2, [r1, #4]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4093      	lsls	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
 8004fea:	4648      	mov	r0, r9
 8004fec:	f000 fe72 	bl	8005cd4 <_Bfree>
 8004ff0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	1e2b      	subs	r3, r5, #0
 8004ffa:	bfbb      	ittet	lt
 8004ffc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005000:	9303      	strlt	r3, [sp, #12]
 8005002:	2300      	movge	r3, #0
 8005004:	2201      	movlt	r2, #1
 8005006:	bfac      	ite	ge
 8005008:	6033      	strge	r3, [r6, #0]
 800500a:	6032      	strlt	r2, [r6, #0]
 800500c:	4b90      	ldr	r3, [pc, #576]	@ (8005250 <_dtoa_r+0x2b8>)
 800500e:	9e03      	ldr	r6, [sp, #12]
 8005010:	43b3      	bics	r3, r6
 8005012:	d110      	bne.n	8005036 <_dtoa_r+0x9e>
 8005014:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005016:	f242 730f 	movw	r3, #9999	@ 0x270f
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005020:	4323      	orrs	r3, r4
 8005022:	f000 84e6 	beq.w	80059f2 <_dtoa_r+0xa5a>
 8005026:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005028:	4f8a      	ldr	r7, [pc, #552]	@ (8005254 <_dtoa_r+0x2bc>)
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 84e8 	beq.w	8005a00 <_dtoa_r+0xa68>
 8005030:	1cfb      	adds	r3, r7, #3
 8005032:	f000 bce3 	b.w	80059fc <_dtoa_r+0xa64>
 8005036:	ed9d 8b02 	vldr	d8, [sp, #8]
 800503a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	d10a      	bne.n	800505a <_dtoa_r+0xc2>
 8005044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005046:	2301      	movs	r3, #1
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800504c:	b113      	cbz	r3, 8005054 <_dtoa_r+0xbc>
 800504e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005050:	4b81      	ldr	r3, [pc, #516]	@ (8005258 <_dtoa_r+0x2c0>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4f81      	ldr	r7, [pc, #516]	@ (800525c <_dtoa_r+0x2c4>)
 8005056:	f000 bcd3 	b.w	8005a00 <_dtoa_r+0xa68>
 800505a:	aa0e      	add	r2, sp, #56	@ 0x38
 800505c:	a90f      	add	r1, sp, #60	@ 0x3c
 800505e:	4648      	mov	r0, r9
 8005060:	eeb0 0b48 	vmov.f64	d0, d8
 8005064:	f001 f918 	bl	8006298 <__d2b>
 8005068:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800506c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800506e:	9001      	str	r0, [sp, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d045      	beq.n	8005100 <_dtoa_r+0x168>
 8005074:	eeb0 7b48 	vmov.f64	d7, d8
 8005078:	ee18 1a90 	vmov	r1, s17
 800507c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005080:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005084:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005088:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800508c:	2500      	movs	r5, #0
 800508e:	ee07 1a90 	vmov	s15, r1
 8005092:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005096:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005230 <_dtoa_r+0x298>
 800509a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800509e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005238 <_dtoa_r+0x2a0>
 80050a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80050a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005240 <_dtoa_r+0x2a8>
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80050b2:	eeb0 7b46 	vmov.f64	d7, d6
 80050b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80050ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80050be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	ee16 8a90 	vmov	r8, s13
 80050ca:	d508      	bpl.n	80050de <_dtoa_r+0x146>
 80050cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80050d0:	eeb4 6b47 	vcmp.f64	d6, d7
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	bf18      	it	ne
 80050da:	f108 38ff 	addne.w	r8, r8, #4294967295
 80050de:	f1b8 0f16 	cmp.w	r8, #22
 80050e2:	d82b      	bhi.n	800513c <_dtoa_r+0x1a4>
 80050e4:	495e      	ldr	r1, [pc, #376]	@ (8005260 <_dtoa_r+0x2c8>)
 80050e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80050ea:	ed91 7b00 	vldr	d7, [r1]
 80050ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80050f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f6:	d501      	bpl.n	80050fc <_dtoa_r+0x164>
 80050f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80050fc:	2100      	movs	r1, #0
 80050fe:	e01e      	b.n	800513e <_dtoa_r+0x1a6>
 8005100:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005102:	4413      	add	r3, r2
 8005104:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005108:	2920      	cmp	r1, #32
 800510a:	bfc1      	itttt	gt
 800510c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005110:	408e      	lslgt	r6, r1
 8005112:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005116:	fa24 f101 	lsrgt.w	r1, r4, r1
 800511a:	bfd6      	itet	le
 800511c:	f1c1 0120 	rsble	r1, r1, #32
 8005120:	4331      	orrgt	r1, r6
 8005122:	fa04 f101 	lslle.w	r1, r4, r1
 8005126:	ee07 1a90 	vmov	s15, r1
 800512a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800512e:	3b01      	subs	r3, #1
 8005130:	ee17 1a90 	vmov	r1, s15
 8005134:	2501      	movs	r5, #1
 8005136:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800513a:	e7a8      	b.n	800508e <_dtoa_r+0xf6>
 800513c:	2101      	movs	r1, #1
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	1e53      	subs	r3, r2, #1
 8005142:	9306      	str	r3, [sp, #24]
 8005144:	bf45      	ittet	mi
 8005146:	f1c2 0301 	rsbmi	r3, r2, #1
 800514a:	9304      	strmi	r3, [sp, #16]
 800514c:	2300      	movpl	r3, #0
 800514e:	2300      	movmi	r3, #0
 8005150:	bf4c      	ite	mi
 8005152:	9306      	strmi	r3, [sp, #24]
 8005154:	9304      	strpl	r3, [sp, #16]
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	910c      	str	r1, [sp, #48]	@ 0x30
 800515c:	db18      	blt.n	8005190 <_dtoa_r+0x1f8>
 800515e:	9b06      	ldr	r3, [sp, #24]
 8005160:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005164:	4443      	add	r3, r8
 8005166:	9306      	str	r3, [sp, #24]
 8005168:	2300      	movs	r3, #0
 800516a:	9a07      	ldr	r2, [sp, #28]
 800516c:	2a09      	cmp	r2, #9
 800516e:	d845      	bhi.n	80051fc <_dtoa_r+0x264>
 8005170:	2a05      	cmp	r2, #5
 8005172:	bfc4      	itt	gt
 8005174:	3a04      	subgt	r2, #4
 8005176:	9207      	strgt	r2, [sp, #28]
 8005178:	9a07      	ldr	r2, [sp, #28]
 800517a:	f1a2 0202 	sub.w	r2, r2, #2
 800517e:	bfcc      	ite	gt
 8005180:	2400      	movgt	r4, #0
 8005182:	2401      	movle	r4, #1
 8005184:	2a03      	cmp	r2, #3
 8005186:	d844      	bhi.n	8005212 <_dtoa_r+0x27a>
 8005188:	e8df f002 	tbb	[pc, r2]
 800518c:	0b173634 	.word	0x0b173634
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	2200      	movs	r2, #0
 8005194:	eba3 0308 	sub.w	r3, r3, r8
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	920a      	str	r2, [sp, #40]	@ 0x28
 800519c:	f1c8 0300 	rsb	r3, r8, #0
 80051a0:	e7e3      	b.n	800516a <_dtoa_r+0x1d2>
 80051a2:	2201      	movs	r2, #1
 80051a4:	9208      	str	r2, [sp, #32]
 80051a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051a8:	eb08 0b02 	add.w	fp, r8, r2
 80051ac:	f10b 0a01 	add.w	sl, fp, #1
 80051b0:	4652      	mov	r2, sl
 80051b2:	2a01      	cmp	r2, #1
 80051b4:	bfb8      	it	lt
 80051b6:	2201      	movlt	r2, #1
 80051b8:	e006      	b.n	80051c8 <_dtoa_r+0x230>
 80051ba:	2201      	movs	r2, #1
 80051bc:	9208      	str	r2, [sp, #32]
 80051be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	dd29      	ble.n	8005218 <_dtoa_r+0x280>
 80051c4:	4693      	mov	fp, r2
 80051c6:	4692      	mov	sl, r2
 80051c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80051cc:	2100      	movs	r1, #0
 80051ce:	2004      	movs	r0, #4
 80051d0:	f100 0614 	add.w	r6, r0, #20
 80051d4:	4296      	cmp	r6, r2
 80051d6:	d926      	bls.n	8005226 <_dtoa_r+0x28e>
 80051d8:	6079      	str	r1, [r7, #4]
 80051da:	4648      	mov	r0, r9
 80051dc:	9305      	str	r3, [sp, #20]
 80051de:	f000 fd39 	bl	8005c54 <_Balloc>
 80051e2:	9b05      	ldr	r3, [sp, #20]
 80051e4:	4607      	mov	r7, r0
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d13e      	bne.n	8005268 <_dtoa_r+0x2d0>
 80051ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005264 <_dtoa_r+0x2cc>)
 80051ec:	4602      	mov	r2, r0
 80051ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80051f2:	e6ea      	b.n	8004fca <_dtoa_r+0x32>
 80051f4:	2200      	movs	r2, #0
 80051f6:	e7e1      	b.n	80051bc <_dtoa_r+0x224>
 80051f8:	2200      	movs	r2, #0
 80051fa:	e7d3      	b.n	80051a4 <_dtoa_r+0x20c>
 80051fc:	2401      	movs	r4, #1
 80051fe:	2200      	movs	r2, #0
 8005200:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005204:	f04f 3bff 	mov.w	fp, #4294967295
 8005208:	2100      	movs	r1, #0
 800520a:	46da      	mov	sl, fp
 800520c:	2212      	movs	r2, #18
 800520e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005210:	e7da      	b.n	80051c8 <_dtoa_r+0x230>
 8005212:	2201      	movs	r2, #1
 8005214:	9208      	str	r2, [sp, #32]
 8005216:	e7f5      	b.n	8005204 <_dtoa_r+0x26c>
 8005218:	f04f 0b01 	mov.w	fp, #1
 800521c:	46da      	mov	sl, fp
 800521e:	465a      	mov	r2, fp
 8005220:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005224:	e7d0      	b.n	80051c8 <_dtoa_r+0x230>
 8005226:	3101      	adds	r1, #1
 8005228:	0040      	lsls	r0, r0, #1
 800522a:	e7d1      	b.n	80051d0 <_dtoa_r+0x238>
 800522c:	f3af 8000 	nop.w
 8005230:	636f4361 	.word	0x636f4361
 8005234:	3fd287a7 	.word	0x3fd287a7
 8005238:	8b60c8b3 	.word	0x8b60c8b3
 800523c:	3fc68a28 	.word	0x3fc68a28
 8005240:	509f79fb 	.word	0x509f79fb
 8005244:	3fd34413 	.word	0x3fd34413
 8005248:	08006bd1 	.word	0x08006bd1
 800524c:	08006be8 	.word	0x08006be8
 8005250:	7ff00000 	.word	0x7ff00000
 8005254:	08006bcd 	.word	0x08006bcd
 8005258:	08006ba1 	.word	0x08006ba1
 800525c:	08006ba0 	.word	0x08006ba0
 8005260:	08006d38 	.word	0x08006d38
 8005264:	08006c40 	.word	0x08006c40
 8005268:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800526c:	f1ba 0f0e 	cmp.w	sl, #14
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	d86e      	bhi.n	8005352 <_dtoa_r+0x3ba>
 8005274:	2c00      	cmp	r4, #0
 8005276:	d06c      	beq.n	8005352 <_dtoa_r+0x3ba>
 8005278:	f1b8 0f00 	cmp.w	r8, #0
 800527c:	f340 80b4 	ble.w	80053e8 <_dtoa_r+0x450>
 8005280:	4ac8      	ldr	r2, [pc, #800]	@ (80055a4 <_dtoa_r+0x60c>)
 8005282:	f008 010f 	and.w	r1, r8, #15
 8005286:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800528a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800528e:	ed92 7b00 	vldr	d7, [r2]
 8005292:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005296:	f000 809b 	beq.w	80053d0 <_dtoa_r+0x438>
 800529a:	4ac3      	ldr	r2, [pc, #780]	@ (80055a8 <_dtoa_r+0x610>)
 800529c:	ed92 6b08 	vldr	d6, [r2, #32]
 80052a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80052a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80052a8:	f001 010f 	and.w	r1, r1, #15
 80052ac:	2203      	movs	r2, #3
 80052ae:	48be      	ldr	r0, [pc, #760]	@ (80055a8 <_dtoa_r+0x610>)
 80052b0:	2900      	cmp	r1, #0
 80052b2:	f040 808f 	bne.w	80053d4 <_dtoa_r+0x43c>
 80052b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80052ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80052be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80052c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052c8:	2900      	cmp	r1, #0
 80052ca:	f000 80b3 	beq.w	8005434 <_dtoa_r+0x49c>
 80052ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80052d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052da:	f140 80ab 	bpl.w	8005434 <_dtoa_r+0x49c>
 80052de:	f1ba 0f00 	cmp.w	sl, #0
 80052e2:	f000 80a7 	beq.w	8005434 <_dtoa_r+0x49c>
 80052e6:	f1bb 0f00 	cmp.w	fp, #0
 80052ea:	dd30      	ble.n	800534e <_dtoa_r+0x3b6>
 80052ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80052f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80052f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	3201      	adds	r2, #1
 8005300:	465c      	mov	r4, fp
 8005302:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005306:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800530a:	ee07 2a90 	vmov	s15, r2
 800530e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005312:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005316:	ee15 2a90 	vmov	r2, s11
 800531a:	ec51 0b15 	vmov	r0, r1, d5
 800531e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005322:	2c00      	cmp	r4, #0
 8005324:	f040 808a 	bne.w	800543c <_dtoa_r+0x4a4>
 8005328:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800532c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005330:	ec41 0b17 	vmov	d7, r0, r1
 8005334:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	f300 826a 	bgt.w	8005814 <_dtoa_r+0x87c>
 8005340:	eeb1 7b47 	vneg.f64	d7, d7
 8005344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	d423      	bmi.n	8005396 <_dtoa_r+0x3fe>
 800534e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005352:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005354:	2a00      	cmp	r2, #0
 8005356:	f2c0 8129 	blt.w	80055ac <_dtoa_r+0x614>
 800535a:	f1b8 0f0e 	cmp.w	r8, #14
 800535e:	f300 8125 	bgt.w	80055ac <_dtoa_r+0x614>
 8005362:	4b90      	ldr	r3, [pc, #576]	@ (80055a4 <_dtoa_r+0x60c>)
 8005364:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005368:	ed93 6b00 	vldr	d6, [r3]
 800536c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	f280 80c8 	bge.w	8005504 <_dtoa_r+0x56c>
 8005374:	f1ba 0f00 	cmp.w	sl, #0
 8005378:	f300 80c4 	bgt.w	8005504 <_dtoa_r+0x56c>
 800537c:	d10b      	bne.n	8005396 <_dtoa_r+0x3fe>
 800537e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005382:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005386:	ed9d 7b02 	vldr	d7, [sp, #8]
 800538a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005392:	f2c0 823c 	blt.w	800580e <_dtoa_r+0x876>
 8005396:	2400      	movs	r4, #0
 8005398:	4625      	mov	r5, r4
 800539a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800539c:	43db      	mvns	r3, r3
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	463e      	mov	r6, r7
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	4621      	mov	r1, r4
 80053a8:	4648      	mov	r0, r9
 80053aa:	f000 fc93 	bl	8005cd4 <_Bfree>
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	f000 80a2 	beq.w	80054f8 <_dtoa_r+0x560>
 80053b4:	f1b8 0f00 	cmp.w	r8, #0
 80053b8:	d005      	beq.n	80053c6 <_dtoa_r+0x42e>
 80053ba:	45a8      	cmp	r8, r5
 80053bc:	d003      	beq.n	80053c6 <_dtoa_r+0x42e>
 80053be:	4641      	mov	r1, r8
 80053c0:	4648      	mov	r0, r9
 80053c2:	f000 fc87 	bl	8005cd4 <_Bfree>
 80053c6:	4629      	mov	r1, r5
 80053c8:	4648      	mov	r0, r9
 80053ca:	f000 fc83 	bl	8005cd4 <_Bfree>
 80053ce:	e093      	b.n	80054f8 <_dtoa_r+0x560>
 80053d0:	2202      	movs	r2, #2
 80053d2:	e76c      	b.n	80052ae <_dtoa_r+0x316>
 80053d4:	07cc      	lsls	r4, r1, #31
 80053d6:	d504      	bpl.n	80053e2 <_dtoa_r+0x44a>
 80053d8:	ed90 6b00 	vldr	d6, [r0]
 80053dc:	3201      	adds	r2, #1
 80053de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053e2:	1049      	asrs	r1, r1, #1
 80053e4:	3008      	adds	r0, #8
 80053e6:	e763      	b.n	80052b0 <_dtoa_r+0x318>
 80053e8:	d022      	beq.n	8005430 <_dtoa_r+0x498>
 80053ea:	f1c8 0100 	rsb	r1, r8, #0
 80053ee:	4a6d      	ldr	r2, [pc, #436]	@ (80055a4 <_dtoa_r+0x60c>)
 80053f0:	f001 000f 	and.w	r0, r1, #15
 80053f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80053f8:	ed92 7b00 	vldr	d7, [r2]
 80053fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005400:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005404:	4868      	ldr	r0, [pc, #416]	@ (80055a8 <_dtoa_r+0x610>)
 8005406:	1109      	asrs	r1, r1, #4
 8005408:	2400      	movs	r4, #0
 800540a:	2202      	movs	r2, #2
 800540c:	b929      	cbnz	r1, 800541a <_dtoa_r+0x482>
 800540e:	2c00      	cmp	r4, #0
 8005410:	f43f af57 	beq.w	80052c2 <_dtoa_r+0x32a>
 8005414:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005418:	e753      	b.n	80052c2 <_dtoa_r+0x32a>
 800541a:	07ce      	lsls	r6, r1, #31
 800541c:	d505      	bpl.n	800542a <_dtoa_r+0x492>
 800541e:	ed90 6b00 	vldr	d6, [r0]
 8005422:	3201      	adds	r2, #1
 8005424:	2401      	movs	r4, #1
 8005426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800542a:	1049      	asrs	r1, r1, #1
 800542c:	3008      	adds	r0, #8
 800542e:	e7ed      	b.n	800540c <_dtoa_r+0x474>
 8005430:	2202      	movs	r2, #2
 8005432:	e746      	b.n	80052c2 <_dtoa_r+0x32a>
 8005434:	f8cd 8014 	str.w	r8, [sp, #20]
 8005438:	4654      	mov	r4, sl
 800543a:	e762      	b.n	8005302 <_dtoa_r+0x36a>
 800543c:	4a59      	ldr	r2, [pc, #356]	@ (80055a4 <_dtoa_r+0x60c>)
 800543e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005442:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005446:	9a08      	ldr	r2, [sp, #32]
 8005448:	ec41 0b17 	vmov	d7, r0, r1
 800544c:	443c      	add	r4, r7
 800544e:	b34a      	cbz	r2, 80054a4 <_dtoa_r+0x50c>
 8005450:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005454:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005458:	463e      	mov	r6, r7
 800545a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800545e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005462:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005466:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800546a:	ee14 2a90 	vmov	r2, s9
 800546e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005472:	3230      	adds	r2, #48	@ 0x30
 8005474:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005480:	f806 2b01 	strb.w	r2, [r6], #1
 8005484:	d438      	bmi.n	80054f8 <_dtoa_r+0x560>
 8005486:	ee32 5b46 	vsub.f64	d5, d2, d6
 800548a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005492:	d46e      	bmi.n	8005572 <_dtoa_r+0x5da>
 8005494:	42a6      	cmp	r6, r4
 8005496:	f43f af5a 	beq.w	800534e <_dtoa_r+0x3b6>
 800549a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800549e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80054a2:	e7e0      	b.n	8005466 <_dtoa_r+0x4ce>
 80054a4:	4621      	mov	r1, r4
 80054a6:	463e      	mov	r6, r7
 80054a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80054ac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80054b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80054b4:	ee14 2a90 	vmov	r2, s9
 80054b8:	3230      	adds	r2, #48	@ 0x30
 80054ba:	f806 2b01 	strb.w	r2, [r6], #1
 80054be:	42a6      	cmp	r6, r4
 80054c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80054c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80054c8:	d119      	bne.n	80054fe <_dtoa_r+0x566>
 80054ca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80054ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80054d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	dc4a      	bgt.n	8005572 <_dtoa_r+0x5da>
 80054dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80054e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80054e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e8:	f57f af31 	bpl.w	800534e <_dtoa_r+0x3b6>
 80054ec:	460e      	mov	r6, r1
 80054ee:	3901      	subs	r1, #1
 80054f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054f4:	2b30      	cmp	r3, #48	@ 0x30
 80054f6:	d0f9      	beq.n	80054ec <_dtoa_r+0x554>
 80054f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80054fc:	e027      	b.n	800554e <_dtoa_r+0x5b6>
 80054fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005502:	e7d5      	b.n	80054b0 <_dtoa_r+0x518>
 8005504:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005508:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800550c:	463e      	mov	r6, r7
 800550e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005512:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005516:	ee15 3a10 	vmov	r3, s10
 800551a:	3330      	adds	r3, #48	@ 0x30
 800551c:	f806 3b01 	strb.w	r3, [r6], #1
 8005520:	1bf3      	subs	r3, r6, r7
 8005522:	459a      	cmp	sl, r3
 8005524:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005528:	eea3 7b46 	vfms.f64	d7, d3, d6
 800552c:	d132      	bne.n	8005594 <_dtoa_r+0x5fc>
 800552e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005532:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	dc18      	bgt.n	800556e <_dtoa_r+0x5d6>
 800553c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	d103      	bne.n	800554e <_dtoa_r+0x5b6>
 8005546:	ee15 3a10 	vmov	r3, s10
 800554a:	07db      	lsls	r3, r3, #31
 800554c:	d40f      	bmi.n	800556e <_dtoa_r+0x5d6>
 800554e:	9901      	ldr	r1, [sp, #4]
 8005550:	4648      	mov	r0, r9
 8005552:	f000 fbbf 	bl	8005cd4 <_Bfree>
 8005556:	2300      	movs	r3, #0
 8005558:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800555a:	7033      	strb	r3, [r6, #0]
 800555c:	f108 0301 	add.w	r3, r8, #1
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 824b 	beq.w	8005a00 <_dtoa_r+0xa68>
 800556a:	601e      	str	r6, [r3, #0]
 800556c:	e248      	b.n	8005a00 <_dtoa_r+0xa68>
 800556e:	f8cd 8014 	str.w	r8, [sp, #20]
 8005572:	4633      	mov	r3, r6
 8005574:	461e      	mov	r6, r3
 8005576:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800557a:	2a39      	cmp	r2, #57	@ 0x39
 800557c:	d106      	bne.n	800558c <_dtoa_r+0x5f4>
 800557e:	429f      	cmp	r7, r3
 8005580:	d1f8      	bne.n	8005574 <_dtoa_r+0x5dc>
 8005582:	9a05      	ldr	r2, [sp, #20]
 8005584:	3201      	adds	r2, #1
 8005586:	9205      	str	r2, [sp, #20]
 8005588:	2230      	movs	r2, #48	@ 0x30
 800558a:	703a      	strb	r2, [r7, #0]
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	3201      	adds	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e7b1      	b.n	80054f8 <_dtoa_r+0x560>
 8005594:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005598:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	d1b5      	bne.n	800550e <_dtoa_r+0x576>
 80055a2:	e7d4      	b.n	800554e <_dtoa_r+0x5b6>
 80055a4:	08006d38 	.word	0x08006d38
 80055a8:	08006d10 	.word	0x08006d10
 80055ac:	9908      	ldr	r1, [sp, #32]
 80055ae:	2900      	cmp	r1, #0
 80055b0:	f000 80e9 	beq.w	8005786 <_dtoa_r+0x7ee>
 80055b4:	9907      	ldr	r1, [sp, #28]
 80055b6:	2901      	cmp	r1, #1
 80055b8:	f300 80cb 	bgt.w	8005752 <_dtoa_r+0x7ba>
 80055bc:	2d00      	cmp	r5, #0
 80055be:	f000 80c4 	beq.w	800574a <_dtoa_r+0x7b2>
 80055c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80055c6:	9e04      	ldr	r6, [sp, #16]
 80055c8:	461c      	mov	r4, r3
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	9b06      	ldr	r3, [sp, #24]
 80055d4:	2101      	movs	r1, #1
 80055d6:	4413      	add	r3, r2
 80055d8:	4648      	mov	r0, r9
 80055da:	9306      	str	r3, [sp, #24]
 80055dc:	f000 fc2e 	bl	8005e3c <__i2b>
 80055e0:	9b05      	ldr	r3, [sp, #20]
 80055e2:	4605      	mov	r5, r0
 80055e4:	b166      	cbz	r6, 8005600 <_dtoa_r+0x668>
 80055e6:	9a06      	ldr	r2, [sp, #24]
 80055e8:	2a00      	cmp	r2, #0
 80055ea:	dd09      	ble.n	8005600 <_dtoa_r+0x668>
 80055ec:	42b2      	cmp	r2, r6
 80055ee:	9904      	ldr	r1, [sp, #16]
 80055f0:	bfa8      	it	ge
 80055f2:	4632      	movge	r2, r6
 80055f4:	1a89      	subs	r1, r1, r2
 80055f6:	9104      	str	r1, [sp, #16]
 80055f8:	9906      	ldr	r1, [sp, #24]
 80055fa:	1ab6      	subs	r6, r6, r2
 80055fc:	1a8a      	subs	r2, r1, r2
 80055fe:	9206      	str	r2, [sp, #24]
 8005600:	b30b      	cbz	r3, 8005646 <_dtoa_r+0x6ae>
 8005602:	9a08      	ldr	r2, [sp, #32]
 8005604:	2a00      	cmp	r2, #0
 8005606:	f000 80c5 	beq.w	8005794 <_dtoa_r+0x7fc>
 800560a:	2c00      	cmp	r4, #0
 800560c:	f000 80bf 	beq.w	800578e <_dtoa_r+0x7f6>
 8005610:	4629      	mov	r1, r5
 8005612:	4622      	mov	r2, r4
 8005614:	4648      	mov	r0, r9
 8005616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005618:	f000 fcc8 	bl	8005fac <__pow5mult>
 800561c:	9a01      	ldr	r2, [sp, #4]
 800561e:	4601      	mov	r1, r0
 8005620:	4605      	mov	r5, r0
 8005622:	4648      	mov	r0, r9
 8005624:	f000 fc20 	bl	8005e68 <__multiply>
 8005628:	9901      	ldr	r1, [sp, #4]
 800562a:	9005      	str	r0, [sp, #20]
 800562c:	4648      	mov	r0, r9
 800562e:	f000 fb51 	bl	8005cd4 <_Bfree>
 8005632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005634:	1b1b      	subs	r3, r3, r4
 8005636:	f000 80b0 	beq.w	800579a <_dtoa_r+0x802>
 800563a:	9905      	ldr	r1, [sp, #20]
 800563c:	461a      	mov	r2, r3
 800563e:	4648      	mov	r0, r9
 8005640:	f000 fcb4 	bl	8005fac <__pow5mult>
 8005644:	9001      	str	r0, [sp, #4]
 8005646:	2101      	movs	r1, #1
 8005648:	4648      	mov	r0, r9
 800564a:	f000 fbf7 	bl	8005e3c <__i2b>
 800564e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005650:	4604      	mov	r4, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 81da 	beq.w	8005a0c <_dtoa_r+0xa74>
 8005658:	461a      	mov	r2, r3
 800565a:	4601      	mov	r1, r0
 800565c:	4648      	mov	r0, r9
 800565e:	f000 fca5 	bl	8005fac <__pow5mult>
 8005662:	9b07      	ldr	r3, [sp, #28]
 8005664:	2b01      	cmp	r3, #1
 8005666:	4604      	mov	r4, r0
 8005668:	f300 80a0 	bgt.w	80057ac <_dtoa_r+0x814>
 800566c:	9b02      	ldr	r3, [sp, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 8096 	bne.w	80057a0 <_dtoa_r+0x808>
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800567a:	2a00      	cmp	r2, #0
 800567c:	f040 8092 	bne.w	80057a4 <_dtoa_r+0x80c>
 8005680:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005684:	0d12      	lsrs	r2, r2, #20
 8005686:	0512      	lsls	r2, r2, #20
 8005688:	2a00      	cmp	r2, #0
 800568a:	f000 808d 	beq.w	80057a8 <_dtoa_r+0x810>
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	3301      	adds	r3, #1
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	9b06      	ldr	r3, [sp, #24]
 8005696:	3301      	adds	r3, #1
 8005698:	9306      	str	r3, [sp, #24]
 800569a:	2301      	movs	r3, #1
 800569c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800569e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 81b9 	beq.w	8005a18 <_dtoa_r+0xa80>
 80056a6:	6922      	ldr	r2, [r4, #16]
 80056a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80056ac:	6910      	ldr	r0, [r2, #16]
 80056ae:	f000 fb79 	bl	8005da4 <__hi0bits>
 80056b2:	f1c0 0020 	rsb	r0, r0, #32
 80056b6:	9b06      	ldr	r3, [sp, #24]
 80056b8:	4418      	add	r0, r3
 80056ba:	f010 001f 	ands.w	r0, r0, #31
 80056be:	f000 8081 	beq.w	80057c4 <_dtoa_r+0x82c>
 80056c2:	f1c0 0220 	rsb	r2, r0, #32
 80056c6:	2a04      	cmp	r2, #4
 80056c8:	dd73      	ble.n	80057b2 <_dtoa_r+0x81a>
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	f1c0 001c 	rsb	r0, r0, #28
 80056d0:	4403      	add	r3, r0
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	9b06      	ldr	r3, [sp, #24]
 80056d6:	4406      	add	r6, r0
 80056d8:	4403      	add	r3, r0
 80056da:	9306      	str	r3, [sp, #24]
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dd05      	ble.n	80056ee <_dtoa_r+0x756>
 80056e2:	9901      	ldr	r1, [sp, #4]
 80056e4:	461a      	mov	r2, r3
 80056e6:	4648      	mov	r0, r9
 80056e8:	f000 fcba 	bl	8006060 <__lshift>
 80056ec:	9001      	str	r0, [sp, #4]
 80056ee:	9b06      	ldr	r3, [sp, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dd05      	ble.n	8005700 <_dtoa_r+0x768>
 80056f4:	4621      	mov	r1, r4
 80056f6:	461a      	mov	r2, r3
 80056f8:	4648      	mov	r0, r9
 80056fa:	f000 fcb1 	bl	8006060 <__lshift>
 80056fe:	4604      	mov	r4, r0
 8005700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005702:	2b00      	cmp	r3, #0
 8005704:	d060      	beq.n	80057c8 <_dtoa_r+0x830>
 8005706:	9801      	ldr	r0, [sp, #4]
 8005708:	4621      	mov	r1, r4
 800570a:	f000 fd15 	bl	8006138 <__mcmp>
 800570e:	2800      	cmp	r0, #0
 8005710:	da5a      	bge.n	80057c8 <_dtoa_r+0x830>
 8005712:	f108 33ff 	add.w	r3, r8, #4294967295
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	9901      	ldr	r1, [sp, #4]
 800571a:	2300      	movs	r3, #0
 800571c:	220a      	movs	r2, #10
 800571e:	4648      	mov	r0, r9
 8005720:	f000 fafa 	bl	8005d18 <__multadd>
 8005724:	9b08      	ldr	r3, [sp, #32]
 8005726:	9001      	str	r0, [sp, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8177 	beq.w	8005a1c <_dtoa_r+0xa84>
 800572e:	4629      	mov	r1, r5
 8005730:	2300      	movs	r3, #0
 8005732:	220a      	movs	r2, #10
 8005734:	4648      	mov	r0, r9
 8005736:	f000 faef 	bl	8005d18 <__multadd>
 800573a:	f1bb 0f00 	cmp.w	fp, #0
 800573e:	4605      	mov	r5, r0
 8005740:	dc6e      	bgt.n	8005820 <_dtoa_r+0x888>
 8005742:	9b07      	ldr	r3, [sp, #28]
 8005744:	2b02      	cmp	r3, #2
 8005746:	dc48      	bgt.n	80057da <_dtoa_r+0x842>
 8005748:	e06a      	b.n	8005820 <_dtoa_r+0x888>
 800574a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800574c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005750:	e739      	b.n	80055c6 <_dtoa_r+0x62e>
 8005752:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005756:	42a3      	cmp	r3, r4
 8005758:	db07      	blt.n	800576a <_dtoa_r+0x7d2>
 800575a:	f1ba 0f00 	cmp.w	sl, #0
 800575e:	eba3 0404 	sub.w	r4, r3, r4
 8005762:	db0b      	blt.n	800577c <_dtoa_r+0x7e4>
 8005764:	9e04      	ldr	r6, [sp, #16]
 8005766:	4652      	mov	r2, sl
 8005768:	e72f      	b.n	80055ca <_dtoa_r+0x632>
 800576a:	1ae2      	subs	r2, r4, r3
 800576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576e:	9e04      	ldr	r6, [sp, #16]
 8005770:	4413      	add	r3, r2
 8005772:	930a      	str	r3, [sp, #40]	@ 0x28
 8005774:	4652      	mov	r2, sl
 8005776:	4623      	mov	r3, r4
 8005778:	2400      	movs	r4, #0
 800577a:	e726      	b.n	80055ca <_dtoa_r+0x632>
 800577c:	9a04      	ldr	r2, [sp, #16]
 800577e:	eba2 060a 	sub.w	r6, r2, sl
 8005782:	2200      	movs	r2, #0
 8005784:	e721      	b.n	80055ca <_dtoa_r+0x632>
 8005786:	9e04      	ldr	r6, [sp, #16]
 8005788:	9d08      	ldr	r5, [sp, #32]
 800578a:	461c      	mov	r4, r3
 800578c:	e72a      	b.n	80055e4 <_dtoa_r+0x64c>
 800578e:	9a01      	ldr	r2, [sp, #4]
 8005790:	9205      	str	r2, [sp, #20]
 8005792:	e752      	b.n	800563a <_dtoa_r+0x6a2>
 8005794:	9901      	ldr	r1, [sp, #4]
 8005796:	461a      	mov	r2, r3
 8005798:	e751      	b.n	800563e <_dtoa_r+0x6a6>
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	e752      	b.n	8005646 <_dtoa_r+0x6ae>
 80057a0:	2300      	movs	r3, #0
 80057a2:	e77b      	b.n	800569c <_dtoa_r+0x704>
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	e779      	b.n	800569c <_dtoa_r+0x704>
 80057a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80057aa:	e778      	b.n	800569e <_dtoa_r+0x706>
 80057ac:	2300      	movs	r3, #0
 80057ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057b0:	e779      	b.n	80056a6 <_dtoa_r+0x70e>
 80057b2:	d093      	beq.n	80056dc <_dtoa_r+0x744>
 80057b4:	9b04      	ldr	r3, [sp, #16]
 80057b6:	321c      	adds	r2, #28
 80057b8:	4413      	add	r3, r2
 80057ba:	9304      	str	r3, [sp, #16]
 80057bc:	9b06      	ldr	r3, [sp, #24]
 80057be:	4416      	add	r6, r2
 80057c0:	4413      	add	r3, r2
 80057c2:	e78a      	b.n	80056da <_dtoa_r+0x742>
 80057c4:	4602      	mov	r2, r0
 80057c6:	e7f5      	b.n	80057b4 <_dtoa_r+0x81c>
 80057c8:	f1ba 0f00 	cmp.w	sl, #0
 80057cc:	f8cd 8014 	str.w	r8, [sp, #20]
 80057d0:	46d3      	mov	fp, sl
 80057d2:	dc21      	bgt.n	8005818 <_dtoa_r+0x880>
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	dd1e      	ble.n	8005818 <_dtoa_r+0x880>
 80057da:	f1bb 0f00 	cmp.w	fp, #0
 80057de:	f47f addc 	bne.w	800539a <_dtoa_r+0x402>
 80057e2:	4621      	mov	r1, r4
 80057e4:	465b      	mov	r3, fp
 80057e6:	2205      	movs	r2, #5
 80057e8:	4648      	mov	r0, r9
 80057ea:	f000 fa95 	bl	8005d18 <__multadd>
 80057ee:	4601      	mov	r1, r0
 80057f0:	4604      	mov	r4, r0
 80057f2:	9801      	ldr	r0, [sp, #4]
 80057f4:	f000 fca0 	bl	8006138 <__mcmp>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	f77f adce 	ble.w	800539a <_dtoa_r+0x402>
 80057fe:	463e      	mov	r6, r7
 8005800:	2331      	movs	r3, #49	@ 0x31
 8005802:	f806 3b01 	strb.w	r3, [r6], #1
 8005806:	9b05      	ldr	r3, [sp, #20]
 8005808:	3301      	adds	r3, #1
 800580a:	9305      	str	r3, [sp, #20]
 800580c:	e5c9      	b.n	80053a2 <_dtoa_r+0x40a>
 800580e:	f8cd 8014 	str.w	r8, [sp, #20]
 8005812:	4654      	mov	r4, sl
 8005814:	4625      	mov	r5, r4
 8005816:	e7f2      	b.n	80057fe <_dtoa_r+0x866>
 8005818:	9b08      	ldr	r3, [sp, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8102 	beq.w	8005a24 <_dtoa_r+0xa8c>
 8005820:	2e00      	cmp	r6, #0
 8005822:	dd05      	ble.n	8005830 <_dtoa_r+0x898>
 8005824:	4629      	mov	r1, r5
 8005826:	4632      	mov	r2, r6
 8005828:	4648      	mov	r0, r9
 800582a:	f000 fc19 	bl	8006060 <__lshift>
 800582e:	4605      	mov	r5, r0
 8005830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d058      	beq.n	80058e8 <_dtoa_r+0x950>
 8005836:	6869      	ldr	r1, [r5, #4]
 8005838:	4648      	mov	r0, r9
 800583a:	f000 fa0b 	bl	8005c54 <_Balloc>
 800583e:	4606      	mov	r6, r0
 8005840:	b928      	cbnz	r0, 800584e <_dtoa_r+0x8b6>
 8005842:	4b82      	ldr	r3, [pc, #520]	@ (8005a4c <_dtoa_r+0xab4>)
 8005844:	4602      	mov	r2, r0
 8005846:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800584a:	f7ff bbbe 	b.w	8004fca <_dtoa_r+0x32>
 800584e:	692a      	ldr	r2, [r5, #16]
 8005850:	3202      	adds	r2, #2
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	f105 010c 	add.w	r1, r5, #12
 8005858:	300c      	adds	r0, #12
 800585a:	f001 f88b 	bl	8006974 <memcpy>
 800585e:	2201      	movs	r2, #1
 8005860:	4631      	mov	r1, r6
 8005862:	4648      	mov	r0, r9
 8005864:	f000 fbfc 	bl	8006060 <__lshift>
 8005868:	1c7b      	adds	r3, r7, #1
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	eb07 030b 	add.w	r3, r7, fp
 8005870:	9309      	str	r3, [sp, #36]	@ 0x24
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	46a8      	mov	r8, r5
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	4605      	mov	r5, r0
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	9801      	ldr	r0, [sp, #4]
 8005882:	4621      	mov	r1, r4
 8005884:	f103 3bff 	add.w	fp, r3, #4294967295
 8005888:	f7ff fafb 	bl	8004e82 <quorem>
 800588c:	4641      	mov	r1, r8
 800588e:	9002      	str	r0, [sp, #8]
 8005890:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005894:	9801      	ldr	r0, [sp, #4]
 8005896:	f000 fc4f 	bl	8006138 <__mcmp>
 800589a:	462a      	mov	r2, r5
 800589c:	9006      	str	r0, [sp, #24]
 800589e:	4621      	mov	r1, r4
 80058a0:	4648      	mov	r0, r9
 80058a2:	f000 fc65 	bl	8006170 <__mdiff>
 80058a6:	68c2      	ldr	r2, [r0, #12]
 80058a8:	4606      	mov	r6, r0
 80058aa:	b9fa      	cbnz	r2, 80058ec <_dtoa_r+0x954>
 80058ac:	4601      	mov	r1, r0
 80058ae:	9801      	ldr	r0, [sp, #4]
 80058b0:	f000 fc42 	bl	8006138 <__mcmp>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4631      	mov	r1, r6
 80058b8:	4648      	mov	r0, r9
 80058ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80058bc:	f000 fa0a 	bl	8005cd4 <_Bfree>
 80058c0:	9b07      	ldr	r3, [sp, #28]
 80058c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058c4:	9e04      	ldr	r6, [sp, #16]
 80058c6:	ea42 0103 	orr.w	r1, r2, r3
 80058ca:	9b08      	ldr	r3, [sp, #32]
 80058cc:	4319      	orrs	r1, r3
 80058ce:	d10f      	bne.n	80058f0 <_dtoa_r+0x958>
 80058d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80058d4:	d028      	beq.n	8005928 <_dtoa_r+0x990>
 80058d6:	9b06      	ldr	r3, [sp, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dd02      	ble.n	80058e2 <_dtoa_r+0x94a>
 80058dc:	9b02      	ldr	r3, [sp, #8]
 80058de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80058e2:	f88b a000 	strb.w	sl, [fp]
 80058e6:	e55e      	b.n	80053a6 <_dtoa_r+0x40e>
 80058e8:	4628      	mov	r0, r5
 80058ea:	e7bd      	b.n	8005868 <_dtoa_r+0x8d0>
 80058ec:	2201      	movs	r2, #1
 80058ee:	e7e2      	b.n	80058b6 <_dtoa_r+0x91e>
 80058f0:	9b06      	ldr	r3, [sp, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	db04      	blt.n	8005900 <_dtoa_r+0x968>
 80058f6:	9907      	ldr	r1, [sp, #28]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	9908      	ldr	r1, [sp, #32]
 80058fc:	430b      	orrs	r3, r1
 80058fe:	d120      	bne.n	8005942 <_dtoa_r+0x9aa>
 8005900:	2a00      	cmp	r2, #0
 8005902:	ddee      	ble.n	80058e2 <_dtoa_r+0x94a>
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	4648      	mov	r0, r9
 800590a:	f000 fba9 	bl	8006060 <__lshift>
 800590e:	4621      	mov	r1, r4
 8005910:	9001      	str	r0, [sp, #4]
 8005912:	f000 fc11 	bl	8006138 <__mcmp>
 8005916:	2800      	cmp	r0, #0
 8005918:	dc03      	bgt.n	8005922 <_dtoa_r+0x98a>
 800591a:	d1e2      	bne.n	80058e2 <_dtoa_r+0x94a>
 800591c:	f01a 0f01 	tst.w	sl, #1
 8005920:	d0df      	beq.n	80058e2 <_dtoa_r+0x94a>
 8005922:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005926:	d1d9      	bne.n	80058dc <_dtoa_r+0x944>
 8005928:	2339      	movs	r3, #57	@ 0x39
 800592a:	f88b 3000 	strb.w	r3, [fp]
 800592e:	4633      	mov	r3, r6
 8005930:	461e      	mov	r6, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005938:	2a39      	cmp	r2, #57	@ 0x39
 800593a:	d052      	beq.n	80059e2 <_dtoa_r+0xa4a>
 800593c:	3201      	adds	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e531      	b.n	80053a6 <_dtoa_r+0x40e>
 8005942:	2a00      	cmp	r2, #0
 8005944:	dd07      	ble.n	8005956 <_dtoa_r+0x9be>
 8005946:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800594a:	d0ed      	beq.n	8005928 <_dtoa_r+0x990>
 800594c:	f10a 0301 	add.w	r3, sl, #1
 8005950:	f88b 3000 	strb.w	r3, [fp]
 8005954:	e527      	b.n	80053a6 <_dtoa_r+0x40e>
 8005956:	9b04      	ldr	r3, [sp, #16]
 8005958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800595e:	4293      	cmp	r3, r2
 8005960:	d029      	beq.n	80059b6 <_dtoa_r+0xa1e>
 8005962:	9901      	ldr	r1, [sp, #4]
 8005964:	2300      	movs	r3, #0
 8005966:	220a      	movs	r2, #10
 8005968:	4648      	mov	r0, r9
 800596a:	f000 f9d5 	bl	8005d18 <__multadd>
 800596e:	45a8      	cmp	r8, r5
 8005970:	9001      	str	r0, [sp, #4]
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	f04f 020a 	mov.w	r2, #10
 800597a:	4641      	mov	r1, r8
 800597c:	4648      	mov	r0, r9
 800597e:	d107      	bne.n	8005990 <_dtoa_r+0x9f8>
 8005980:	f000 f9ca 	bl	8005d18 <__multadd>
 8005984:	4680      	mov	r8, r0
 8005986:	4605      	mov	r5, r0
 8005988:	9b04      	ldr	r3, [sp, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	e776      	b.n	800587e <_dtoa_r+0x8e6>
 8005990:	f000 f9c2 	bl	8005d18 <__multadd>
 8005994:	4629      	mov	r1, r5
 8005996:	4680      	mov	r8, r0
 8005998:	2300      	movs	r3, #0
 800599a:	220a      	movs	r2, #10
 800599c:	4648      	mov	r0, r9
 800599e:	f000 f9bb 	bl	8005d18 <__multadd>
 80059a2:	4605      	mov	r5, r0
 80059a4:	e7f0      	b.n	8005988 <_dtoa_r+0x9f0>
 80059a6:	f1bb 0f00 	cmp.w	fp, #0
 80059aa:	bfcc      	ite	gt
 80059ac:	465e      	movgt	r6, fp
 80059ae:	2601      	movle	r6, #1
 80059b0:	443e      	add	r6, r7
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	9901      	ldr	r1, [sp, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4648      	mov	r0, r9
 80059bc:	f000 fb50 	bl	8006060 <__lshift>
 80059c0:	4621      	mov	r1, r4
 80059c2:	9001      	str	r0, [sp, #4]
 80059c4:	f000 fbb8 	bl	8006138 <__mcmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dcb0      	bgt.n	800592e <_dtoa_r+0x996>
 80059cc:	d102      	bne.n	80059d4 <_dtoa_r+0xa3c>
 80059ce:	f01a 0f01 	tst.w	sl, #1
 80059d2:	d1ac      	bne.n	800592e <_dtoa_r+0x996>
 80059d4:	4633      	mov	r3, r6
 80059d6:	461e      	mov	r6, r3
 80059d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059dc:	2a30      	cmp	r2, #48	@ 0x30
 80059de:	d0fa      	beq.n	80059d6 <_dtoa_r+0xa3e>
 80059e0:	e4e1      	b.n	80053a6 <_dtoa_r+0x40e>
 80059e2:	429f      	cmp	r7, r3
 80059e4:	d1a4      	bne.n	8005930 <_dtoa_r+0x998>
 80059e6:	9b05      	ldr	r3, [sp, #20]
 80059e8:	3301      	adds	r3, #1
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	2331      	movs	r3, #49	@ 0x31
 80059ee:	703b      	strb	r3, [r7, #0]
 80059f0:	e4d9      	b.n	80053a6 <_dtoa_r+0x40e>
 80059f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80059f4:	4f16      	ldr	r7, [pc, #88]	@ (8005a50 <_dtoa_r+0xab8>)
 80059f6:	b11b      	cbz	r3, 8005a00 <_dtoa_r+0xa68>
 80059f8:	f107 0308 	add.w	r3, r7, #8
 80059fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	4638      	mov	r0, r7
 8005a02:	b011      	add	sp, #68	@ 0x44
 8005a04:	ecbd 8b02 	vpop	{d8}
 8005a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0c:	9b07      	ldr	r3, [sp, #28]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	f77f ae2c 	ble.w	800566c <_dtoa_r+0x6d4>
 8005a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e64c      	b.n	80056b6 <_dtoa_r+0x71e>
 8005a1c:	f1bb 0f00 	cmp.w	fp, #0
 8005a20:	f77f aed8 	ble.w	80057d4 <_dtoa_r+0x83c>
 8005a24:	463e      	mov	r6, r7
 8005a26:	9801      	ldr	r0, [sp, #4]
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f7ff fa2a 	bl	8004e82 <quorem>
 8005a2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005a32:	f806 ab01 	strb.w	sl, [r6], #1
 8005a36:	1bf2      	subs	r2, r6, r7
 8005a38:	4593      	cmp	fp, r2
 8005a3a:	ddb4      	ble.n	80059a6 <_dtoa_r+0xa0e>
 8005a3c:	9901      	ldr	r1, [sp, #4]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	220a      	movs	r2, #10
 8005a42:	4648      	mov	r0, r9
 8005a44:	f000 f968 	bl	8005d18 <__multadd>
 8005a48:	9001      	str	r0, [sp, #4]
 8005a4a:	e7ec      	b.n	8005a26 <_dtoa_r+0xa8e>
 8005a4c:	08006c40 	.word	0x08006c40
 8005a50:	08006bc4 	.word	0x08006bc4

08005a54 <_free_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4605      	mov	r5, r0
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	d041      	beq.n	8005ae0 <_free_r+0x8c>
 8005a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a60:	1f0c      	subs	r4, r1, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfb8      	it	lt
 8005a66:	18e4      	addlt	r4, r4, r3
 8005a68:	f000 f8e8 	bl	8005c3c <__malloc_lock>
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae4 <_free_r+0x90>)
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	b933      	cbnz	r3, 8005a80 <_free_r+0x2c>
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	6014      	str	r4, [r2, #0]
 8005a76:	4628      	mov	r0, r5
 8005a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a7c:	f000 b8e4 	b.w	8005c48 <__malloc_unlock>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d908      	bls.n	8005a96 <_free_r+0x42>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	1821      	adds	r1, r4, r0
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	bf01      	itttt	eq
 8005a8c:	6819      	ldreq	r1, [r3, #0]
 8005a8e:	685b      	ldreq	r3, [r3, #4]
 8005a90:	1809      	addeq	r1, r1, r0
 8005a92:	6021      	streq	r1, [r4, #0]
 8005a94:	e7ed      	b.n	8005a72 <_free_r+0x1e>
 8005a96:	461a      	mov	r2, r3
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b10b      	cbz	r3, 8005aa0 <_free_r+0x4c>
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d9fa      	bls.n	8005a96 <_free_r+0x42>
 8005aa0:	6811      	ldr	r1, [r2, #0]
 8005aa2:	1850      	adds	r0, r2, r1
 8005aa4:	42a0      	cmp	r0, r4
 8005aa6:	d10b      	bne.n	8005ac0 <_free_r+0x6c>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	4401      	add	r1, r0
 8005aac:	1850      	adds	r0, r2, r1
 8005aae:	4283      	cmp	r3, r0
 8005ab0:	6011      	str	r1, [r2, #0]
 8005ab2:	d1e0      	bne.n	8005a76 <_free_r+0x22>
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	6053      	str	r3, [r2, #4]
 8005aba:	4408      	add	r0, r1
 8005abc:	6010      	str	r0, [r2, #0]
 8005abe:	e7da      	b.n	8005a76 <_free_r+0x22>
 8005ac0:	d902      	bls.n	8005ac8 <_free_r+0x74>
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	e7d6      	b.n	8005a76 <_free_r+0x22>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf04      	itt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	bf04      	itt	eq
 8005ad8:	1809      	addeq	r1, r1, r0
 8005ada:	6021      	streq	r1, [r4, #0]
 8005adc:	6054      	str	r4, [r2, #4]
 8005ade:	e7ca      	b.n	8005a76 <_free_r+0x22>
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000420 	.word	0x20000420

08005ae8 <malloc>:
 8005ae8:	4b02      	ldr	r3, [pc, #8]	@ (8005af4 <malloc+0xc>)
 8005aea:	4601      	mov	r1, r0
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	f000 b825 	b.w	8005b3c <_malloc_r>
 8005af2:	bf00      	nop
 8005af4:	2000001c 	.word	0x2000001c

08005af8 <sbrk_aligned>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4e0f      	ldr	r6, [pc, #60]	@ (8005b38 <sbrk_aligned+0x40>)
 8005afc:	460c      	mov	r4, r1
 8005afe:	6831      	ldr	r1, [r6, #0]
 8005b00:	4605      	mov	r5, r0
 8005b02:	b911      	cbnz	r1, 8005b0a <sbrk_aligned+0x12>
 8005b04:	f000 ff26 	bl	8006954 <_sbrk_r>
 8005b08:	6030      	str	r0, [r6, #0]
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f000 ff21 	bl	8006954 <_sbrk_r>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d103      	bne.n	8005b1e <sbrk_aligned+0x26>
 8005b16:	f04f 34ff 	mov.w	r4, #4294967295
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	1cc4      	adds	r4, r0, #3
 8005b20:	f024 0403 	bic.w	r4, r4, #3
 8005b24:	42a0      	cmp	r0, r4
 8005b26:	d0f8      	beq.n	8005b1a <sbrk_aligned+0x22>
 8005b28:	1a21      	subs	r1, r4, r0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 ff12 	bl	8006954 <_sbrk_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d1f2      	bne.n	8005b1a <sbrk_aligned+0x22>
 8005b34:	e7ef      	b.n	8005b16 <sbrk_aligned+0x1e>
 8005b36:	bf00      	nop
 8005b38:	2000041c 	.word	0x2000041c

08005b3c <_malloc_r>:
 8005b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b40:	1ccd      	adds	r5, r1, #3
 8005b42:	f025 0503 	bic.w	r5, r5, #3
 8005b46:	3508      	adds	r5, #8
 8005b48:	2d0c      	cmp	r5, #12
 8005b4a:	bf38      	it	cc
 8005b4c:	250c      	movcc	r5, #12
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	4606      	mov	r6, r0
 8005b52:	db01      	blt.n	8005b58 <_malloc_r+0x1c>
 8005b54:	42a9      	cmp	r1, r5
 8005b56:	d904      	bls.n	8005b62 <_malloc_r+0x26>
 8005b58:	230c      	movs	r3, #12
 8005b5a:	6033      	str	r3, [r6, #0]
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c38 <_malloc_r+0xfc>
 8005b66:	f000 f869 	bl	8005c3c <__malloc_lock>
 8005b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6e:	461c      	mov	r4, r3
 8005b70:	bb44      	cbnz	r4, 8005bc4 <_malloc_r+0x88>
 8005b72:	4629      	mov	r1, r5
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7ff ffbf 	bl	8005af8 <sbrk_aligned>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	d158      	bne.n	8005c32 <_malloc_r+0xf6>
 8005b80:	f8d8 4000 	ldr.w	r4, [r8]
 8005b84:	4627      	mov	r7, r4
 8005b86:	2f00      	cmp	r7, #0
 8005b88:	d143      	bne.n	8005c12 <_malloc_r+0xd6>
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	d04b      	beq.n	8005c26 <_malloc_r+0xea>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	4639      	mov	r1, r7
 8005b92:	4630      	mov	r0, r6
 8005b94:	eb04 0903 	add.w	r9, r4, r3
 8005b98:	f000 fedc 	bl	8006954 <_sbrk_r>
 8005b9c:	4581      	cmp	r9, r0
 8005b9e:	d142      	bne.n	8005c26 <_malloc_r+0xea>
 8005ba0:	6821      	ldr	r1, [r4, #0]
 8005ba2:	1a6d      	subs	r5, r5, r1
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ffa6 	bl	8005af8 <sbrk_aligned>
 8005bac:	3001      	adds	r0, #1
 8005bae:	d03a      	beq.n	8005c26 <_malloc_r+0xea>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	442b      	add	r3, r5
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	bb62      	cbnz	r2, 8005c18 <_malloc_r+0xdc>
 8005bbe:	f8c8 7000 	str.w	r7, [r8]
 8005bc2:	e00f      	b.n	8005be4 <_malloc_r+0xa8>
 8005bc4:	6822      	ldr	r2, [r4, #0]
 8005bc6:	1b52      	subs	r2, r2, r5
 8005bc8:	d420      	bmi.n	8005c0c <_malloc_r+0xd0>
 8005bca:	2a0b      	cmp	r2, #11
 8005bcc:	d917      	bls.n	8005bfe <_malloc_r+0xc2>
 8005bce:	1961      	adds	r1, r4, r5
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	6025      	str	r5, [r4, #0]
 8005bd4:	bf18      	it	ne
 8005bd6:	6059      	strne	r1, [r3, #4]
 8005bd8:	6863      	ldr	r3, [r4, #4]
 8005bda:	bf08      	it	eq
 8005bdc:	f8c8 1000 	streq.w	r1, [r8]
 8005be0:	5162      	str	r2, [r4, r5]
 8005be2:	604b      	str	r3, [r1, #4]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 f82f 	bl	8005c48 <__malloc_unlock>
 8005bea:	f104 000b 	add.w	r0, r4, #11
 8005bee:	1d23      	adds	r3, r4, #4
 8005bf0:	f020 0007 	bic.w	r0, r0, #7
 8005bf4:	1ac2      	subs	r2, r0, r3
 8005bf6:	bf1c      	itt	ne
 8005bf8:	1a1b      	subne	r3, r3, r0
 8005bfa:	50a3      	strne	r3, [r4, r2]
 8005bfc:	e7af      	b.n	8005b5e <_malloc_r+0x22>
 8005bfe:	6862      	ldr	r2, [r4, #4]
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	bf0c      	ite	eq
 8005c04:	f8c8 2000 	streq.w	r2, [r8]
 8005c08:	605a      	strne	r2, [r3, #4]
 8005c0a:	e7eb      	b.n	8005be4 <_malloc_r+0xa8>
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	6864      	ldr	r4, [r4, #4]
 8005c10:	e7ae      	b.n	8005b70 <_malloc_r+0x34>
 8005c12:	463c      	mov	r4, r7
 8005c14:	687f      	ldr	r7, [r7, #4]
 8005c16:	e7b6      	b.n	8005b86 <_malloc_r+0x4a>
 8005c18:	461a      	mov	r2, r3
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d1fb      	bne.n	8005c18 <_malloc_r+0xdc>
 8005c20:	2300      	movs	r3, #0
 8005c22:	6053      	str	r3, [r2, #4]
 8005c24:	e7de      	b.n	8005be4 <_malloc_r+0xa8>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f000 f80c 	bl	8005c48 <__malloc_unlock>
 8005c30:	e794      	b.n	8005b5c <_malloc_r+0x20>
 8005c32:	6005      	str	r5, [r0, #0]
 8005c34:	e7d6      	b.n	8005be4 <_malloc_r+0xa8>
 8005c36:	bf00      	nop
 8005c38:	20000420 	.word	0x20000420

08005c3c <__malloc_lock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	@ (8005c44 <__malloc_lock+0x8>)
 8005c3e:	f7ff b91e 	b.w	8004e7e <__retarget_lock_acquire_recursive>
 8005c42:	bf00      	nop
 8005c44:	20000418 	.word	0x20000418

08005c48 <__malloc_unlock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	@ (8005c50 <__malloc_unlock+0x8>)
 8005c4a:	f7ff b919 	b.w	8004e80 <__retarget_lock_release_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20000418 	.word	0x20000418

08005c54 <_Balloc>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	69c6      	ldr	r6, [r0, #28]
 8005c58:	4604      	mov	r4, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	b976      	cbnz	r6, 8005c7c <_Balloc+0x28>
 8005c5e:	2010      	movs	r0, #16
 8005c60:	f7ff ff42 	bl	8005ae8 <malloc>
 8005c64:	4602      	mov	r2, r0
 8005c66:	61e0      	str	r0, [r4, #28]
 8005c68:	b920      	cbnz	r0, 8005c74 <_Balloc+0x20>
 8005c6a:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <_Balloc+0x78>)
 8005c6c:	4818      	ldr	r0, [pc, #96]	@ (8005cd0 <_Balloc+0x7c>)
 8005c6e:	216b      	movs	r1, #107	@ 0x6b
 8005c70:	f000 fe8e 	bl	8006990 <__assert_func>
 8005c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c78:	6006      	str	r6, [r0, #0]
 8005c7a:	60c6      	str	r6, [r0, #12]
 8005c7c:	69e6      	ldr	r6, [r4, #28]
 8005c7e:	68f3      	ldr	r3, [r6, #12]
 8005c80:	b183      	cbz	r3, 8005ca4 <_Balloc+0x50>
 8005c82:	69e3      	ldr	r3, [r4, #28]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c8a:	b9b8      	cbnz	r0, 8005cbc <_Balloc+0x68>
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c92:	1d72      	adds	r2, r6, #5
 8005c94:	0092      	lsls	r2, r2, #2
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fe98 	bl	80069cc <_calloc_r>
 8005c9c:	b160      	cbz	r0, 8005cb8 <_Balloc+0x64>
 8005c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ca2:	e00e      	b.n	8005cc2 <_Balloc+0x6e>
 8005ca4:	2221      	movs	r2, #33	@ 0x21
 8005ca6:	2104      	movs	r1, #4
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fe8f 	bl	80069cc <_calloc_r>
 8005cae:	69e3      	ldr	r3, [r4, #28]
 8005cb0:	60f0      	str	r0, [r6, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e4      	bne.n	8005c82 <_Balloc+0x2e>
 8005cb8:	2000      	movs	r0, #0
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	6802      	ldr	r2, [r0, #0]
 8005cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cc8:	e7f7      	b.n	8005cba <_Balloc+0x66>
 8005cca:	bf00      	nop
 8005ccc:	08006bd1 	.word	0x08006bd1
 8005cd0:	08006c51 	.word	0x08006c51

08005cd4 <_Bfree>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	69c6      	ldr	r6, [r0, #28]
 8005cd8:	4605      	mov	r5, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	b976      	cbnz	r6, 8005cfc <_Bfree+0x28>
 8005cde:	2010      	movs	r0, #16
 8005ce0:	f7ff ff02 	bl	8005ae8 <malloc>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	61e8      	str	r0, [r5, #28]
 8005ce8:	b920      	cbnz	r0, 8005cf4 <_Bfree+0x20>
 8005cea:	4b09      	ldr	r3, [pc, #36]	@ (8005d10 <_Bfree+0x3c>)
 8005cec:	4809      	ldr	r0, [pc, #36]	@ (8005d14 <_Bfree+0x40>)
 8005cee:	218f      	movs	r1, #143	@ 0x8f
 8005cf0:	f000 fe4e 	bl	8006990 <__assert_func>
 8005cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cf8:	6006      	str	r6, [r0, #0]
 8005cfa:	60c6      	str	r6, [r0, #12]
 8005cfc:	b13c      	cbz	r4, 8005d0e <_Bfree+0x3a>
 8005cfe:	69eb      	ldr	r3, [r5, #28]
 8005d00:	6862      	ldr	r2, [r4, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d08:	6021      	str	r1, [r4, #0]
 8005d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	08006bd1 	.word	0x08006bd1
 8005d14:	08006c51 	.word	0x08006c51

08005d18 <__multadd>:
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	690d      	ldr	r5, [r1, #16]
 8005d1e:	4607      	mov	r7, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	461e      	mov	r6, r3
 8005d24:	f101 0c14 	add.w	ip, r1, #20
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8005d2e:	b299      	uxth	r1, r3
 8005d30:	fb02 6101 	mla	r1, r2, r1, r6
 8005d34:	0c1e      	lsrs	r6, r3, #16
 8005d36:	0c0b      	lsrs	r3, r1, #16
 8005d38:	fb02 3306 	mla	r3, r2, r6, r3
 8005d3c:	b289      	uxth	r1, r1
 8005d3e:	3001      	adds	r0, #1
 8005d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d44:	4285      	cmp	r5, r0
 8005d46:	f84c 1b04 	str.w	r1, [ip], #4
 8005d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d4e:	dcec      	bgt.n	8005d2a <__multadd+0x12>
 8005d50:	b30e      	cbz	r6, 8005d96 <__multadd+0x7e>
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dc19      	bgt.n	8005d8c <__multadd+0x74>
 8005d58:	6861      	ldr	r1, [r4, #4]
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	f7ff ff79 	bl	8005c54 <_Balloc>
 8005d62:	4680      	mov	r8, r0
 8005d64:	b928      	cbnz	r0, 8005d72 <__multadd+0x5a>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <__multadd+0x84>)
 8005d6a:	480d      	ldr	r0, [pc, #52]	@ (8005da0 <__multadd+0x88>)
 8005d6c:	21ba      	movs	r1, #186	@ 0xba
 8005d6e:	f000 fe0f 	bl	8006990 <__assert_func>
 8005d72:	6922      	ldr	r2, [r4, #16]
 8005d74:	3202      	adds	r2, #2
 8005d76:	f104 010c 	add.w	r1, r4, #12
 8005d7a:	0092      	lsls	r2, r2, #2
 8005d7c:	300c      	adds	r0, #12
 8005d7e:	f000 fdf9 	bl	8006974 <memcpy>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff ffa5 	bl	8005cd4 <_Bfree>
 8005d8a:	4644      	mov	r4, r8
 8005d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d90:	3501      	adds	r5, #1
 8005d92:	615e      	str	r6, [r3, #20]
 8005d94:	6125      	str	r5, [r4, #16]
 8005d96:	4620      	mov	r0, r4
 8005d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9c:	08006c40 	.word	0x08006c40
 8005da0:	08006c51 	.word	0x08006c51

08005da4 <__hi0bits>:
 8005da4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005da8:	4603      	mov	r3, r0
 8005daa:	bf36      	itet	cc
 8005dac:	0403      	lslcc	r3, r0, #16
 8005dae:	2000      	movcs	r0, #0
 8005db0:	2010      	movcc	r0, #16
 8005db2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db6:	bf3c      	itt	cc
 8005db8:	021b      	lslcc	r3, r3, #8
 8005dba:	3008      	addcc	r0, #8
 8005dbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc0:	bf3c      	itt	cc
 8005dc2:	011b      	lslcc	r3, r3, #4
 8005dc4:	3004      	addcc	r0, #4
 8005dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dca:	bf3c      	itt	cc
 8005dcc:	009b      	lslcc	r3, r3, #2
 8005dce:	3002      	addcc	r0, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db05      	blt.n	8005de0 <__hi0bits+0x3c>
 8005dd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005dd8:	f100 0001 	add.w	r0, r0, #1
 8005ddc:	bf08      	it	eq
 8005dde:	2020      	moveq	r0, #32
 8005de0:	4770      	bx	lr

08005de2 <__lo0bits>:
 8005de2:	6803      	ldr	r3, [r0, #0]
 8005de4:	4602      	mov	r2, r0
 8005de6:	f013 0007 	ands.w	r0, r3, #7
 8005dea:	d00b      	beq.n	8005e04 <__lo0bits+0x22>
 8005dec:	07d9      	lsls	r1, r3, #31
 8005dee:	d421      	bmi.n	8005e34 <__lo0bits+0x52>
 8005df0:	0798      	lsls	r0, r3, #30
 8005df2:	bf49      	itett	mi
 8005df4:	085b      	lsrmi	r3, r3, #1
 8005df6:	089b      	lsrpl	r3, r3, #2
 8005df8:	2001      	movmi	r0, #1
 8005dfa:	6013      	strmi	r3, [r2, #0]
 8005dfc:	bf5c      	itt	pl
 8005dfe:	6013      	strpl	r3, [r2, #0]
 8005e00:	2002      	movpl	r0, #2
 8005e02:	4770      	bx	lr
 8005e04:	b299      	uxth	r1, r3
 8005e06:	b909      	cbnz	r1, 8005e0c <__lo0bits+0x2a>
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	2010      	movs	r0, #16
 8005e0c:	b2d9      	uxtb	r1, r3
 8005e0e:	b909      	cbnz	r1, 8005e14 <__lo0bits+0x32>
 8005e10:	3008      	adds	r0, #8
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	0719      	lsls	r1, r3, #28
 8005e16:	bf04      	itt	eq
 8005e18:	091b      	lsreq	r3, r3, #4
 8005e1a:	3004      	addeq	r0, #4
 8005e1c:	0799      	lsls	r1, r3, #30
 8005e1e:	bf04      	itt	eq
 8005e20:	089b      	lsreq	r3, r3, #2
 8005e22:	3002      	addeq	r0, #2
 8005e24:	07d9      	lsls	r1, r3, #31
 8005e26:	d403      	bmi.n	8005e30 <__lo0bits+0x4e>
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	f100 0001 	add.w	r0, r0, #1
 8005e2e:	d003      	beq.n	8005e38 <__lo0bits+0x56>
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4770      	bx	lr
 8005e34:	2000      	movs	r0, #0
 8005e36:	4770      	bx	lr
 8005e38:	2020      	movs	r0, #32
 8005e3a:	4770      	bx	lr

08005e3c <__i2b>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	2101      	movs	r1, #1
 8005e42:	f7ff ff07 	bl	8005c54 <_Balloc>
 8005e46:	4602      	mov	r2, r0
 8005e48:	b928      	cbnz	r0, 8005e56 <__i2b+0x1a>
 8005e4a:	4b05      	ldr	r3, [pc, #20]	@ (8005e60 <__i2b+0x24>)
 8005e4c:	4805      	ldr	r0, [pc, #20]	@ (8005e64 <__i2b+0x28>)
 8005e4e:	f240 1145 	movw	r1, #325	@ 0x145
 8005e52:	f000 fd9d 	bl	8006990 <__assert_func>
 8005e56:	2301      	movs	r3, #1
 8005e58:	6144      	str	r4, [r0, #20]
 8005e5a:	6103      	str	r3, [r0, #16]
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	bf00      	nop
 8005e60:	08006c40 	.word	0x08006c40
 8005e64:	08006c51 	.word	0x08006c51

08005e68 <__multiply>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	4617      	mov	r7, r2
 8005e6e:	690a      	ldr	r2, [r1, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bfa8      	it	ge
 8005e76:	463b      	movge	r3, r7
 8005e78:	4689      	mov	r9, r1
 8005e7a:	bfa4      	itt	ge
 8005e7c:	460f      	movge	r7, r1
 8005e7e:	4699      	movge	r9, r3
 8005e80:	693d      	ldr	r5, [r7, #16]
 8005e82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	eb05 060a 	add.w	r6, r5, sl
 8005e8e:	42b3      	cmp	r3, r6
 8005e90:	b085      	sub	sp, #20
 8005e92:	bfb8      	it	lt
 8005e94:	3101      	addlt	r1, #1
 8005e96:	f7ff fedd 	bl	8005c54 <_Balloc>
 8005e9a:	b930      	cbnz	r0, 8005eaa <__multiply+0x42>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b41      	ldr	r3, [pc, #260]	@ (8005fa4 <__multiply+0x13c>)
 8005ea0:	4841      	ldr	r0, [pc, #260]	@ (8005fa8 <__multiply+0x140>)
 8005ea2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ea6:	f000 fd73 	bl	8006990 <__assert_func>
 8005eaa:	f100 0414 	add.w	r4, r0, #20
 8005eae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4573      	cmp	r3, lr
 8005eb8:	d320      	bcc.n	8005efc <__multiply+0x94>
 8005eba:	f107 0814 	add.w	r8, r7, #20
 8005ebe:	f109 0114 	add.w	r1, r9, #20
 8005ec2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005ec6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005eca:	9302      	str	r3, [sp, #8]
 8005ecc:	1beb      	subs	r3, r5, r7
 8005ece:	3b15      	subs	r3, #21
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	3715      	adds	r7, #21
 8005ed8:	42bd      	cmp	r5, r7
 8005eda:	bf38      	it	cc
 8005edc:	2304      	movcc	r3, #4
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	9b02      	ldr	r3, [sp, #8]
 8005ee2:	9103      	str	r1, [sp, #12]
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	d80c      	bhi.n	8005f02 <__multiply+0x9a>
 8005ee8:	2e00      	cmp	r6, #0
 8005eea:	dd03      	ble.n	8005ef4 <__multiply+0x8c>
 8005eec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d055      	beq.n	8005fa0 <__multiply+0x138>
 8005ef4:	6106      	str	r6, [r0, #16]
 8005ef6:	b005      	add	sp, #20
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	f843 2b04 	str.w	r2, [r3], #4
 8005f00:	e7d9      	b.n	8005eb6 <__multiply+0x4e>
 8005f02:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f06:	f1ba 0f00 	cmp.w	sl, #0
 8005f0a:	d01f      	beq.n	8005f4c <__multiply+0xe4>
 8005f0c:	46c4      	mov	ip, r8
 8005f0e:	46a1      	mov	r9, r4
 8005f10:	2700      	movs	r7, #0
 8005f12:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f16:	f8d9 3000 	ldr.w	r3, [r9]
 8005f1a:	fa1f fb82 	uxth.w	fp, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f24:	443b      	add	r3, r7
 8005f26:	f8d9 7000 	ldr.w	r7, [r9]
 8005f2a:	0c12      	lsrs	r2, r2, #16
 8005f2c:	0c3f      	lsrs	r7, r7, #16
 8005f2e:	fb0a 7202 	mla	r2, sl, r2, r7
 8005f32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f3c:	4565      	cmp	r5, ip
 8005f3e:	f849 3b04 	str.w	r3, [r9], #4
 8005f42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005f46:	d8e4      	bhi.n	8005f12 <__multiply+0xaa>
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	50e7      	str	r7, [r4, r3]
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f52:	3104      	adds	r1, #4
 8005f54:	f1b9 0f00 	cmp.w	r9, #0
 8005f58:	d020      	beq.n	8005f9c <__multiply+0x134>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	4647      	mov	r7, r8
 8005f5e:	46a4      	mov	ip, r4
 8005f60:	f04f 0a00 	mov.w	sl, #0
 8005f64:	f8b7 b000 	ldrh.w	fp, [r7]
 8005f68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005f6c:	fb09 220b 	mla	r2, r9, fp, r2
 8005f70:	4452      	add	r2, sl
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f78:	f84c 3b04 	str.w	r3, [ip], #4
 8005f7c:	f857 3b04 	ldr.w	r3, [r7], #4
 8005f80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f84:	f8bc 3000 	ldrh.w	r3, [ip]
 8005f88:	fb09 330a 	mla	r3, r9, sl, r3
 8005f8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005f90:	42bd      	cmp	r5, r7
 8005f92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f96:	d8e5      	bhi.n	8005f64 <__multiply+0xfc>
 8005f98:	9a01      	ldr	r2, [sp, #4]
 8005f9a:	50a3      	str	r3, [r4, r2]
 8005f9c:	3404      	adds	r4, #4
 8005f9e:	e79f      	b.n	8005ee0 <__multiply+0x78>
 8005fa0:	3e01      	subs	r6, #1
 8005fa2:	e7a1      	b.n	8005ee8 <__multiply+0x80>
 8005fa4:	08006c40 	.word	0x08006c40
 8005fa8:	08006c51 	.word	0x08006c51

08005fac <__pow5mult>:
 8005fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb0:	4615      	mov	r5, r2
 8005fb2:	f012 0203 	ands.w	r2, r2, #3
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	460e      	mov	r6, r1
 8005fba:	d007      	beq.n	8005fcc <__pow5mult+0x20>
 8005fbc:	4c25      	ldr	r4, [pc, #148]	@ (8006054 <__pow5mult+0xa8>)
 8005fbe:	3a01      	subs	r2, #1
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fc6:	f7ff fea7 	bl	8005d18 <__multadd>
 8005fca:	4606      	mov	r6, r0
 8005fcc:	10ad      	asrs	r5, r5, #2
 8005fce:	d03d      	beq.n	800604c <__pow5mult+0xa0>
 8005fd0:	69fc      	ldr	r4, [r7, #28]
 8005fd2:	b97c      	cbnz	r4, 8005ff4 <__pow5mult+0x48>
 8005fd4:	2010      	movs	r0, #16
 8005fd6:	f7ff fd87 	bl	8005ae8 <malloc>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	61f8      	str	r0, [r7, #28]
 8005fde:	b928      	cbnz	r0, 8005fec <__pow5mult+0x40>
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <__pow5mult+0xac>)
 8005fe2:	481e      	ldr	r0, [pc, #120]	@ (800605c <__pow5mult+0xb0>)
 8005fe4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005fe8:	f000 fcd2 	bl	8006990 <__assert_func>
 8005fec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ff0:	6004      	str	r4, [r0, #0]
 8005ff2:	60c4      	str	r4, [r0, #12]
 8005ff4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ffc:	b94c      	cbnz	r4, 8006012 <__pow5mult+0x66>
 8005ffe:	f240 2171 	movw	r1, #625	@ 0x271
 8006002:	4638      	mov	r0, r7
 8006004:	f7ff ff1a 	bl	8005e3c <__i2b>
 8006008:	2300      	movs	r3, #0
 800600a:	f8c8 0008 	str.w	r0, [r8, #8]
 800600e:	4604      	mov	r4, r0
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	07eb      	lsls	r3, r5, #31
 8006018:	d50a      	bpl.n	8006030 <__pow5mult+0x84>
 800601a:	4631      	mov	r1, r6
 800601c:	4622      	mov	r2, r4
 800601e:	4638      	mov	r0, r7
 8006020:	f7ff ff22 	bl	8005e68 <__multiply>
 8006024:	4631      	mov	r1, r6
 8006026:	4680      	mov	r8, r0
 8006028:	4638      	mov	r0, r7
 800602a:	f7ff fe53 	bl	8005cd4 <_Bfree>
 800602e:	4646      	mov	r6, r8
 8006030:	106d      	asrs	r5, r5, #1
 8006032:	d00b      	beq.n	800604c <__pow5mult+0xa0>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	b938      	cbnz	r0, 8006048 <__pow5mult+0x9c>
 8006038:	4622      	mov	r2, r4
 800603a:	4621      	mov	r1, r4
 800603c:	4638      	mov	r0, r7
 800603e:	f7ff ff13 	bl	8005e68 <__multiply>
 8006042:	6020      	str	r0, [r4, #0]
 8006044:	f8c0 9000 	str.w	r9, [r0]
 8006048:	4604      	mov	r4, r0
 800604a:	e7e4      	b.n	8006016 <__pow5mult+0x6a>
 800604c:	4630      	mov	r0, r6
 800604e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006052:	bf00      	nop
 8006054:	08006d04 	.word	0x08006d04
 8006058:	08006bd1 	.word	0x08006bd1
 800605c:	08006c51 	.word	0x08006c51

08006060 <__lshift>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	460c      	mov	r4, r1
 8006066:	6849      	ldr	r1, [r1, #4]
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	4607      	mov	r7, r0
 8006072:	4691      	mov	r9, r2
 8006074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006078:	f108 0601 	add.w	r6, r8, #1
 800607c:	42b3      	cmp	r3, r6
 800607e:	db0b      	blt.n	8006098 <__lshift+0x38>
 8006080:	4638      	mov	r0, r7
 8006082:	f7ff fde7 	bl	8005c54 <_Balloc>
 8006086:	4605      	mov	r5, r0
 8006088:	b948      	cbnz	r0, 800609e <__lshift+0x3e>
 800608a:	4602      	mov	r2, r0
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <__lshift+0xd0>)
 800608e:	4829      	ldr	r0, [pc, #164]	@ (8006134 <__lshift+0xd4>)
 8006090:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006094:	f000 fc7c 	bl	8006990 <__assert_func>
 8006098:	3101      	adds	r1, #1
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	e7ee      	b.n	800607c <__lshift+0x1c>
 800609e:	2300      	movs	r3, #0
 80060a0:	f100 0114 	add.w	r1, r0, #20
 80060a4:	f100 0210 	add.w	r2, r0, #16
 80060a8:	4618      	mov	r0, r3
 80060aa:	4553      	cmp	r3, sl
 80060ac:	db33      	blt.n	8006116 <__lshift+0xb6>
 80060ae:	6920      	ldr	r0, [r4, #16]
 80060b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060b4:	f104 0314 	add.w	r3, r4, #20
 80060b8:	f019 091f 	ands.w	r9, r9, #31
 80060bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060c4:	d02b      	beq.n	800611e <__lshift+0xbe>
 80060c6:	f1c9 0e20 	rsb	lr, r9, #32
 80060ca:	468a      	mov	sl, r1
 80060cc:	2200      	movs	r2, #0
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	fa00 f009 	lsl.w	r0, r0, r9
 80060d4:	4310      	orrs	r0, r2
 80060d6:	f84a 0b04 	str.w	r0, [sl], #4
 80060da:	f853 2b04 	ldr.w	r2, [r3], #4
 80060de:	459c      	cmp	ip, r3
 80060e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80060e4:	d8f3      	bhi.n	80060ce <__lshift+0x6e>
 80060e6:	ebac 0304 	sub.w	r3, ip, r4
 80060ea:	3b15      	subs	r3, #21
 80060ec:	f023 0303 	bic.w	r3, r3, #3
 80060f0:	3304      	adds	r3, #4
 80060f2:	f104 0015 	add.w	r0, r4, #21
 80060f6:	4560      	cmp	r0, ip
 80060f8:	bf88      	it	hi
 80060fa:	2304      	movhi	r3, #4
 80060fc:	50ca      	str	r2, [r1, r3]
 80060fe:	b10a      	cbz	r2, 8006104 <__lshift+0xa4>
 8006100:	f108 0602 	add.w	r6, r8, #2
 8006104:	3e01      	subs	r6, #1
 8006106:	4638      	mov	r0, r7
 8006108:	612e      	str	r6, [r5, #16]
 800610a:	4621      	mov	r1, r4
 800610c:	f7ff fde2 	bl	8005cd4 <_Bfree>
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006116:	f842 0f04 	str.w	r0, [r2, #4]!
 800611a:	3301      	adds	r3, #1
 800611c:	e7c5      	b.n	80060aa <__lshift+0x4a>
 800611e:	3904      	subs	r1, #4
 8006120:	f853 2b04 	ldr.w	r2, [r3], #4
 8006124:	f841 2f04 	str.w	r2, [r1, #4]!
 8006128:	459c      	cmp	ip, r3
 800612a:	d8f9      	bhi.n	8006120 <__lshift+0xc0>
 800612c:	e7ea      	b.n	8006104 <__lshift+0xa4>
 800612e:	bf00      	nop
 8006130:	08006c40 	.word	0x08006c40
 8006134:	08006c51 	.word	0x08006c51

08006138 <__mcmp>:
 8006138:	690a      	ldr	r2, [r1, #16]
 800613a:	4603      	mov	r3, r0
 800613c:	6900      	ldr	r0, [r0, #16]
 800613e:	1a80      	subs	r0, r0, r2
 8006140:	b530      	push	{r4, r5, lr}
 8006142:	d10e      	bne.n	8006162 <__mcmp+0x2a>
 8006144:	3314      	adds	r3, #20
 8006146:	3114      	adds	r1, #20
 8006148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800614c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006158:	4295      	cmp	r5, r2
 800615a:	d003      	beq.n	8006164 <__mcmp+0x2c>
 800615c:	d205      	bcs.n	800616a <__mcmp+0x32>
 800615e:	f04f 30ff 	mov.w	r0, #4294967295
 8006162:	bd30      	pop	{r4, r5, pc}
 8006164:	42a3      	cmp	r3, r4
 8006166:	d3f3      	bcc.n	8006150 <__mcmp+0x18>
 8006168:	e7fb      	b.n	8006162 <__mcmp+0x2a>
 800616a:	2001      	movs	r0, #1
 800616c:	e7f9      	b.n	8006162 <__mcmp+0x2a>
	...

08006170 <__mdiff>:
 8006170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	4689      	mov	r9, r1
 8006176:	4606      	mov	r6, r0
 8006178:	4611      	mov	r1, r2
 800617a:	4648      	mov	r0, r9
 800617c:	4614      	mov	r4, r2
 800617e:	f7ff ffdb 	bl	8006138 <__mcmp>
 8006182:	1e05      	subs	r5, r0, #0
 8006184:	d112      	bne.n	80061ac <__mdiff+0x3c>
 8006186:	4629      	mov	r1, r5
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff fd63 	bl	8005c54 <_Balloc>
 800618e:	4602      	mov	r2, r0
 8006190:	b928      	cbnz	r0, 800619e <__mdiff+0x2e>
 8006192:	4b3f      	ldr	r3, [pc, #252]	@ (8006290 <__mdiff+0x120>)
 8006194:	f240 2137 	movw	r1, #567	@ 0x237
 8006198:	483e      	ldr	r0, [pc, #248]	@ (8006294 <__mdiff+0x124>)
 800619a:	f000 fbf9 	bl	8006990 <__assert_func>
 800619e:	2301      	movs	r3, #1
 80061a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061a4:	4610      	mov	r0, r2
 80061a6:	b003      	add	sp, #12
 80061a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	bfbc      	itt	lt
 80061ae:	464b      	movlt	r3, r9
 80061b0:	46a1      	movlt	r9, r4
 80061b2:	4630      	mov	r0, r6
 80061b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061b8:	bfba      	itte	lt
 80061ba:	461c      	movlt	r4, r3
 80061bc:	2501      	movlt	r5, #1
 80061be:	2500      	movge	r5, #0
 80061c0:	f7ff fd48 	bl	8005c54 <_Balloc>
 80061c4:	4602      	mov	r2, r0
 80061c6:	b918      	cbnz	r0, 80061d0 <__mdiff+0x60>
 80061c8:	4b31      	ldr	r3, [pc, #196]	@ (8006290 <__mdiff+0x120>)
 80061ca:	f240 2145 	movw	r1, #581	@ 0x245
 80061ce:	e7e3      	b.n	8006198 <__mdiff+0x28>
 80061d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80061d4:	6926      	ldr	r6, [r4, #16]
 80061d6:	60c5      	str	r5, [r0, #12]
 80061d8:	f109 0310 	add.w	r3, r9, #16
 80061dc:	f109 0514 	add.w	r5, r9, #20
 80061e0:	f104 0e14 	add.w	lr, r4, #20
 80061e4:	f100 0b14 	add.w	fp, r0, #20
 80061e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80061ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	46d9      	mov	r9, fp
 80061f4:	f04f 0c00 	mov.w	ip, #0
 80061f8:	9b01      	ldr	r3, [sp, #4]
 80061fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80061fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	fa1f f38a 	uxth.w	r3, sl
 8006208:	4619      	mov	r1, r3
 800620a:	b283      	uxth	r3, r0
 800620c:	1acb      	subs	r3, r1, r3
 800620e:	0c00      	lsrs	r0, r0, #16
 8006210:	4463      	add	r3, ip
 8006212:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006216:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800621a:	b29b      	uxth	r3, r3
 800621c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006220:	4576      	cmp	r6, lr
 8006222:	f849 3b04 	str.w	r3, [r9], #4
 8006226:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800622a:	d8e5      	bhi.n	80061f8 <__mdiff+0x88>
 800622c:	1b33      	subs	r3, r6, r4
 800622e:	3b15      	subs	r3, #21
 8006230:	f023 0303 	bic.w	r3, r3, #3
 8006234:	3415      	adds	r4, #21
 8006236:	3304      	adds	r3, #4
 8006238:	42a6      	cmp	r6, r4
 800623a:	bf38      	it	cc
 800623c:	2304      	movcc	r3, #4
 800623e:	441d      	add	r5, r3
 8006240:	445b      	add	r3, fp
 8006242:	461e      	mov	r6, r3
 8006244:	462c      	mov	r4, r5
 8006246:	4544      	cmp	r4, r8
 8006248:	d30e      	bcc.n	8006268 <__mdiff+0xf8>
 800624a:	f108 0103 	add.w	r1, r8, #3
 800624e:	1b49      	subs	r1, r1, r5
 8006250:	f021 0103 	bic.w	r1, r1, #3
 8006254:	3d03      	subs	r5, #3
 8006256:	45a8      	cmp	r8, r5
 8006258:	bf38      	it	cc
 800625a:	2100      	movcc	r1, #0
 800625c:	440b      	add	r3, r1
 800625e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006262:	b191      	cbz	r1, 800628a <__mdiff+0x11a>
 8006264:	6117      	str	r7, [r2, #16]
 8006266:	e79d      	b.n	80061a4 <__mdiff+0x34>
 8006268:	f854 1b04 	ldr.w	r1, [r4], #4
 800626c:	46e6      	mov	lr, ip
 800626e:	0c08      	lsrs	r0, r1, #16
 8006270:	fa1c fc81 	uxtah	ip, ip, r1
 8006274:	4471      	add	r1, lr
 8006276:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800627a:	b289      	uxth	r1, r1
 800627c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006280:	f846 1b04 	str.w	r1, [r6], #4
 8006284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006288:	e7dd      	b.n	8006246 <__mdiff+0xd6>
 800628a:	3f01      	subs	r7, #1
 800628c:	e7e7      	b.n	800625e <__mdiff+0xee>
 800628e:	bf00      	nop
 8006290:	08006c40 	.word	0x08006c40
 8006294:	08006c51 	.word	0x08006c51

08006298 <__d2b>:
 8006298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800629c:	460f      	mov	r7, r1
 800629e:	2101      	movs	r1, #1
 80062a0:	ec59 8b10 	vmov	r8, r9, d0
 80062a4:	4616      	mov	r6, r2
 80062a6:	f7ff fcd5 	bl	8005c54 <_Balloc>
 80062aa:	4604      	mov	r4, r0
 80062ac:	b930      	cbnz	r0, 80062bc <__d2b+0x24>
 80062ae:	4602      	mov	r2, r0
 80062b0:	4b23      	ldr	r3, [pc, #140]	@ (8006340 <__d2b+0xa8>)
 80062b2:	4824      	ldr	r0, [pc, #144]	@ (8006344 <__d2b+0xac>)
 80062b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80062b8:	f000 fb6a 	bl	8006990 <__assert_func>
 80062bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062c4:	b10d      	cbz	r5, 80062ca <__d2b+0x32>
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	f1b8 0300 	subs.w	r3, r8, #0
 80062d0:	d023      	beq.n	800631a <__d2b+0x82>
 80062d2:	4668      	mov	r0, sp
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	f7ff fd84 	bl	8005de2 <__lo0bits>
 80062da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80062de:	b1d0      	cbz	r0, 8006316 <__d2b+0x7e>
 80062e0:	f1c0 0320 	rsb	r3, r0, #32
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	430b      	orrs	r3, r1
 80062ea:	40c2      	lsrs	r2, r0
 80062ec:	6163      	str	r3, [r4, #20]
 80062ee:	9201      	str	r2, [sp, #4]
 80062f0:	9b01      	ldr	r3, [sp, #4]
 80062f2:	61a3      	str	r3, [r4, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf0c      	ite	eq
 80062f8:	2201      	moveq	r2, #1
 80062fa:	2202      	movne	r2, #2
 80062fc:	6122      	str	r2, [r4, #16]
 80062fe:	b1a5      	cbz	r5, 800632a <__d2b+0x92>
 8006300:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006304:	4405      	add	r5, r0
 8006306:	603d      	str	r5, [r7, #0]
 8006308:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800630c:	6030      	str	r0, [r6, #0]
 800630e:	4620      	mov	r0, r4
 8006310:	b003      	add	sp, #12
 8006312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006316:	6161      	str	r1, [r4, #20]
 8006318:	e7ea      	b.n	80062f0 <__d2b+0x58>
 800631a:	a801      	add	r0, sp, #4
 800631c:	f7ff fd61 	bl	8005de2 <__lo0bits>
 8006320:	9b01      	ldr	r3, [sp, #4]
 8006322:	6163      	str	r3, [r4, #20]
 8006324:	3020      	adds	r0, #32
 8006326:	2201      	movs	r2, #1
 8006328:	e7e8      	b.n	80062fc <__d2b+0x64>
 800632a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800632e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006332:	6038      	str	r0, [r7, #0]
 8006334:	6918      	ldr	r0, [r3, #16]
 8006336:	f7ff fd35 	bl	8005da4 <__hi0bits>
 800633a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800633e:	e7e5      	b.n	800630c <__d2b+0x74>
 8006340:	08006c40 	.word	0x08006c40
 8006344:	08006c51 	.word	0x08006c51

08006348 <__sfputc_r>:
 8006348:	6893      	ldr	r3, [r2, #8]
 800634a:	3b01      	subs	r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	b410      	push	{r4}
 8006350:	6093      	str	r3, [r2, #8]
 8006352:	da08      	bge.n	8006366 <__sfputc_r+0x1e>
 8006354:	6994      	ldr	r4, [r2, #24]
 8006356:	42a3      	cmp	r3, r4
 8006358:	db01      	blt.n	800635e <__sfputc_r+0x16>
 800635a:	290a      	cmp	r1, #10
 800635c:	d103      	bne.n	8006366 <__sfputc_r+0x1e>
 800635e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006362:	f000 ba41 	b.w	80067e8 <__swbuf_r>
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	1c58      	adds	r0, r3, #1
 800636a:	6010      	str	r0, [r2, #0]
 800636c:	7019      	strb	r1, [r3, #0]
 800636e:	4608      	mov	r0, r1
 8006370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006374:	4770      	bx	lr

08006376 <__sfputs_r>:
 8006376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	4614      	mov	r4, r2
 800637e:	18d5      	adds	r5, r2, r3
 8006380:	42ac      	cmp	r4, r5
 8006382:	d101      	bne.n	8006388 <__sfputs_r+0x12>
 8006384:	2000      	movs	r0, #0
 8006386:	e007      	b.n	8006398 <__sfputs_r+0x22>
 8006388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638c:	463a      	mov	r2, r7
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ffda 	bl	8006348 <__sfputc_r>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d1f3      	bne.n	8006380 <__sfputs_r+0xa>
 8006398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800639c <_vfiprintf_r>:
 800639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	460d      	mov	r5, r1
 80063a2:	b09d      	sub	sp, #116	@ 0x74
 80063a4:	4614      	mov	r4, r2
 80063a6:	4698      	mov	r8, r3
 80063a8:	4606      	mov	r6, r0
 80063aa:	b118      	cbz	r0, 80063b4 <_vfiprintf_r+0x18>
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b90b      	cbnz	r3, 80063b4 <_vfiprintf_r+0x18>
 80063b0:	f7fe fba0 	bl	8004af4 <__sinit>
 80063b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063b6:	07d9      	lsls	r1, r3, #31
 80063b8:	d405      	bmi.n	80063c6 <_vfiprintf_r+0x2a>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	059a      	lsls	r2, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_vfiprintf_r+0x2a>
 80063c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c2:	f7fe fd5c 	bl	8004e7e <__retarget_lock_acquire_recursive>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	071b      	lsls	r3, r3, #28
 80063ca:	d501      	bpl.n	80063d0 <_vfiprintf_r+0x34>
 80063cc:	692b      	ldr	r3, [r5, #16]
 80063ce:	b99b      	cbnz	r3, 80063f8 <_vfiprintf_r+0x5c>
 80063d0:	4629      	mov	r1, r5
 80063d2:	4630      	mov	r0, r6
 80063d4:	f000 fa46 	bl	8006864 <__swsetup_r>
 80063d8:	b170      	cbz	r0, 80063f8 <_vfiprintf_r+0x5c>
 80063da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063dc:	07dc      	lsls	r4, r3, #31
 80063de:	d504      	bpl.n	80063ea <_vfiprintf_r+0x4e>
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	b01d      	add	sp, #116	@ 0x74
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	0598      	lsls	r0, r3, #22
 80063ee:	d4f7      	bmi.n	80063e0 <_vfiprintf_r+0x44>
 80063f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063f2:	f7fe fd45 	bl	8004e80 <__retarget_lock_release_recursive>
 80063f6:	e7f3      	b.n	80063e0 <_vfiprintf_r+0x44>
 80063f8:	2300      	movs	r3, #0
 80063fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fc:	2320      	movs	r3, #32
 80063fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006402:	f8cd 800c 	str.w	r8, [sp, #12]
 8006406:	2330      	movs	r3, #48	@ 0x30
 8006408:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065b8 <_vfiprintf_r+0x21c>
 800640c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006410:	f04f 0901 	mov.w	r9, #1
 8006414:	4623      	mov	r3, r4
 8006416:	469a      	mov	sl, r3
 8006418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800641c:	b10a      	cbz	r2, 8006422 <_vfiprintf_r+0x86>
 800641e:	2a25      	cmp	r2, #37	@ 0x25
 8006420:	d1f9      	bne.n	8006416 <_vfiprintf_r+0x7a>
 8006422:	ebba 0b04 	subs.w	fp, sl, r4
 8006426:	d00b      	beq.n	8006440 <_vfiprintf_r+0xa4>
 8006428:	465b      	mov	r3, fp
 800642a:	4622      	mov	r2, r4
 800642c:	4629      	mov	r1, r5
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ffa1 	bl	8006376 <__sfputs_r>
 8006434:	3001      	adds	r0, #1
 8006436:	f000 80a7 	beq.w	8006588 <_vfiprintf_r+0x1ec>
 800643a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800643c:	445a      	add	r2, fp
 800643e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006440:	f89a 3000 	ldrb.w	r3, [sl]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 809f 	beq.w	8006588 <_vfiprintf_r+0x1ec>
 800644a:	2300      	movs	r3, #0
 800644c:	f04f 32ff 	mov.w	r2, #4294967295
 8006450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006454:	f10a 0a01 	add.w	sl, sl, #1
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006460:	931a      	str	r3, [sp, #104]	@ 0x68
 8006462:	4654      	mov	r4, sl
 8006464:	2205      	movs	r2, #5
 8006466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800646a:	4853      	ldr	r0, [pc, #332]	@ (80065b8 <_vfiprintf_r+0x21c>)
 800646c:	f7f9 fee8 	bl	8000240 <memchr>
 8006470:	9a04      	ldr	r2, [sp, #16]
 8006472:	b9d8      	cbnz	r0, 80064ac <_vfiprintf_r+0x110>
 8006474:	06d1      	lsls	r1, r2, #27
 8006476:	bf44      	itt	mi
 8006478:	2320      	movmi	r3, #32
 800647a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800647e:	0713      	lsls	r3, r2, #28
 8006480:	bf44      	itt	mi
 8006482:	232b      	movmi	r3, #43	@ 0x2b
 8006484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006488:	f89a 3000 	ldrb.w	r3, [sl]
 800648c:	2b2a      	cmp	r3, #42	@ 0x2a
 800648e:	d015      	beq.n	80064bc <_vfiprintf_r+0x120>
 8006490:	9a07      	ldr	r2, [sp, #28]
 8006492:	4654      	mov	r4, sl
 8006494:	2000      	movs	r0, #0
 8006496:	f04f 0c0a 	mov.w	ip, #10
 800649a:	4621      	mov	r1, r4
 800649c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064a0:	3b30      	subs	r3, #48	@ 0x30
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d94b      	bls.n	800653e <_vfiprintf_r+0x1a2>
 80064a6:	b1b0      	cbz	r0, 80064d6 <_vfiprintf_r+0x13a>
 80064a8:	9207      	str	r2, [sp, #28]
 80064aa:	e014      	b.n	80064d6 <_vfiprintf_r+0x13a>
 80064ac:	eba0 0308 	sub.w	r3, r0, r8
 80064b0:	fa09 f303 	lsl.w	r3, r9, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	9304      	str	r3, [sp, #16]
 80064b8:	46a2      	mov	sl, r4
 80064ba:	e7d2      	b.n	8006462 <_vfiprintf_r+0xc6>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	1d19      	adds	r1, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	9103      	str	r1, [sp, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfbb      	ittet	lt
 80064c8:	425b      	neglt	r3, r3
 80064ca:	f042 0202 	orrlt.w	r2, r2, #2
 80064ce:	9307      	strge	r3, [sp, #28]
 80064d0:	9307      	strlt	r3, [sp, #28]
 80064d2:	bfb8      	it	lt
 80064d4:	9204      	strlt	r2, [sp, #16]
 80064d6:	7823      	ldrb	r3, [r4, #0]
 80064d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80064da:	d10a      	bne.n	80064f2 <_vfiprintf_r+0x156>
 80064dc:	7863      	ldrb	r3, [r4, #1]
 80064de:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e0:	d132      	bne.n	8006548 <_vfiprintf_r+0x1ac>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	1d1a      	adds	r2, r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	9203      	str	r2, [sp, #12]
 80064ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064ee:	3402      	adds	r4, #2
 80064f0:	9305      	str	r3, [sp, #20]
 80064f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065c8 <_vfiprintf_r+0x22c>
 80064f6:	7821      	ldrb	r1, [r4, #0]
 80064f8:	2203      	movs	r2, #3
 80064fa:	4650      	mov	r0, sl
 80064fc:	f7f9 fea0 	bl	8000240 <memchr>
 8006500:	b138      	cbz	r0, 8006512 <_vfiprintf_r+0x176>
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	eba0 000a 	sub.w	r0, r0, sl
 8006508:	2240      	movs	r2, #64	@ 0x40
 800650a:	4082      	lsls	r2, r0
 800650c:	4313      	orrs	r3, r2
 800650e:	3401      	adds	r4, #1
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4829      	ldr	r0, [pc, #164]	@ (80065bc <_vfiprintf_r+0x220>)
 8006518:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800651c:	2206      	movs	r2, #6
 800651e:	f7f9 fe8f 	bl	8000240 <memchr>
 8006522:	2800      	cmp	r0, #0
 8006524:	d03f      	beq.n	80065a6 <_vfiprintf_r+0x20a>
 8006526:	4b26      	ldr	r3, [pc, #152]	@ (80065c0 <_vfiprintf_r+0x224>)
 8006528:	bb1b      	cbnz	r3, 8006572 <_vfiprintf_r+0x1d6>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	3307      	adds	r3, #7
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	3308      	adds	r3, #8
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006538:	443b      	add	r3, r7
 800653a:	9309      	str	r3, [sp, #36]	@ 0x24
 800653c:	e76a      	b.n	8006414 <_vfiprintf_r+0x78>
 800653e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006542:	460c      	mov	r4, r1
 8006544:	2001      	movs	r0, #1
 8006546:	e7a8      	b.n	800649a <_vfiprintf_r+0xfe>
 8006548:	2300      	movs	r3, #0
 800654a:	3401      	adds	r4, #1
 800654c:	9305      	str	r3, [sp, #20]
 800654e:	4619      	mov	r1, r3
 8006550:	f04f 0c0a 	mov.w	ip, #10
 8006554:	4620      	mov	r0, r4
 8006556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800655a:	3a30      	subs	r2, #48	@ 0x30
 800655c:	2a09      	cmp	r2, #9
 800655e:	d903      	bls.n	8006568 <_vfiprintf_r+0x1cc>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0c6      	beq.n	80064f2 <_vfiprintf_r+0x156>
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	e7c4      	b.n	80064f2 <_vfiprintf_r+0x156>
 8006568:	fb0c 2101 	mla	r1, ip, r1, r2
 800656c:	4604      	mov	r4, r0
 800656e:	2301      	movs	r3, #1
 8006570:	e7f0      	b.n	8006554 <_vfiprintf_r+0x1b8>
 8006572:	ab03      	add	r3, sp, #12
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	462a      	mov	r2, r5
 8006578:	4b12      	ldr	r3, [pc, #72]	@ (80065c4 <_vfiprintf_r+0x228>)
 800657a:	a904      	add	r1, sp, #16
 800657c:	4630      	mov	r0, r6
 800657e:	f7fd fe87 	bl	8004290 <_printf_float>
 8006582:	4607      	mov	r7, r0
 8006584:	1c78      	adds	r0, r7, #1
 8006586:	d1d6      	bne.n	8006536 <_vfiprintf_r+0x19a>
 8006588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800658a:	07d9      	lsls	r1, r3, #31
 800658c:	d405      	bmi.n	800659a <_vfiprintf_r+0x1fe>
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	059a      	lsls	r2, r3, #22
 8006592:	d402      	bmi.n	800659a <_vfiprintf_r+0x1fe>
 8006594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006596:	f7fe fc73 	bl	8004e80 <__retarget_lock_release_recursive>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	065b      	lsls	r3, r3, #25
 800659e:	f53f af1f 	bmi.w	80063e0 <_vfiprintf_r+0x44>
 80065a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065a4:	e71e      	b.n	80063e4 <_vfiprintf_r+0x48>
 80065a6:	ab03      	add	r3, sp, #12
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	462a      	mov	r2, r5
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <_vfiprintf_r+0x228>)
 80065ae:	a904      	add	r1, sp, #16
 80065b0:	4630      	mov	r0, r6
 80065b2:	f7fe f8f5 	bl	80047a0 <_printf_i>
 80065b6:	e7e4      	b.n	8006582 <_vfiprintf_r+0x1e6>
 80065b8:	08006caa 	.word	0x08006caa
 80065bc:	08006cb4 	.word	0x08006cb4
 80065c0:	08004291 	.word	0x08004291
 80065c4:	08006377 	.word	0x08006377
 80065c8:	08006cb0 	.word	0x08006cb0

080065cc <__sflush_r>:
 80065cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	0716      	lsls	r6, r2, #28
 80065d6:	4605      	mov	r5, r0
 80065d8:	460c      	mov	r4, r1
 80065da:	d454      	bmi.n	8006686 <__sflush_r+0xba>
 80065dc:	684b      	ldr	r3, [r1, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dc02      	bgt.n	80065e8 <__sflush_r+0x1c>
 80065e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dd48      	ble.n	800667a <__sflush_r+0xae>
 80065e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	d045      	beq.n	800667a <__sflush_r+0xae>
 80065ee:	2300      	movs	r3, #0
 80065f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065f4:	682f      	ldr	r7, [r5, #0]
 80065f6:	6a21      	ldr	r1, [r4, #32]
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	d030      	beq.n	800665e <__sflush_r+0x92>
 80065fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	0759      	lsls	r1, r3, #29
 8006602:	d505      	bpl.n	8006610 <__sflush_r+0x44>
 8006604:	6863      	ldr	r3, [r4, #4]
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800660a:	b10b      	cbz	r3, 8006610 <__sflush_r+0x44>
 800660c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006614:	6a21      	ldr	r1, [r4, #32]
 8006616:	4628      	mov	r0, r5
 8006618:	47b0      	blx	r6
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	d106      	bne.n	800662e <__sflush_r+0x62>
 8006620:	6829      	ldr	r1, [r5, #0]
 8006622:	291d      	cmp	r1, #29
 8006624:	d82b      	bhi.n	800667e <__sflush_r+0xb2>
 8006626:	4a2a      	ldr	r2, [pc, #168]	@ (80066d0 <__sflush_r+0x104>)
 8006628:	40ca      	lsrs	r2, r1
 800662a:	07d6      	lsls	r6, r2, #31
 800662c:	d527      	bpl.n	800667e <__sflush_r+0xb2>
 800662e:	2200      	movs	r2, #0
 8006630:	6062      	str	r2, [r4, #4]
 8006632:	04d9      	lsls	r1, r3, #19
 8006634:	6922      	ldr	r2, [r4, #16]
 8006636:	6022      	str	r2, [r4, #0]
 8006638:	d504      	bpl.n	8006644 <__sflush_r+0x78>
 800663a:	1c42      	adds	r2, r0, #1
 800663c:	d101      	bne.n	8006642 <__sflush_r+0x76>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	b903      	cbnz	r3, 8006644 <__sflush_r+0x78>
 8006642:	6560      	str	r0, [r4, #84]	@ 0x54
 8006644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006646:	602f      	str	r7, [r5, #0]
 8006648:	b1b9      	cbz	r1, 800667a <__sflush_r+0xae>
 800664a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800664e:	4299      	cmp	r1, r3
 8006650:	d002      	beq.n	8006658 <__sflush_r+0x8c>
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff f9fe 	bl	8005a54 <_free_r>
 8006658:	2300      	movs	r3, #0
 800665a:	6363      	str	r3, [r4, #52]	@ 0x34
 800665c:	e00d      	b.n	800667a <__sflush_r+0xae>
 800665e:	2301      	movs	r3, #1
 8006660:	4628      	mov	r0, r5
 8006662:	47b0      	blx	r6
 8006664:	4602      	mov	r2, r0
 8006666:	1c50      	adds	r0, r2, #1
 8006668:	d1c9      	bne.n	80065fe <__sflush_r+0x32>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0c6      	beq.n	80065fe <__sflush_r+0x32>
 8006670:	2b1d      	cmp	r3, #29
 8006672:	d001      	beq.n	8006678 <__sflush_r+0xac>
 8006674:	2b16      	cmp	r3, #22
 8006676:	d11e      	bne.n	80066b6 <__sflush_r+0xea>
 8006678:	602f      	str	r7, [r5, #0]
 800667a:	2000      	movs	r0, #0
 800667c:	e022      	b.n	80066c4 <__sflush_r+0xf8>
 800667e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006682:	b21b      	sxth	r3, r3
 8006684:	e01b      	b.n	80066be <__sflush_r+0xf2>
 8006686:	690f      	ldr	r7, [r1, #16]
 8006688:	2f00      	cmp	r7, #0
 800668a:	d0f6      	beq.n	800667a <__sflush_r+0xae>
 800668c:	0793      	lsls	r3, r2, #30
 800668e:	680e      	ldr	r6, [r1, #0]
 8006690:	bf08      	it	eq
 8006692:	694b      	ldreq	r3, [r1, #20]
 8006694:	600f      	str	r7, [r1, #0]
 8006696:	bf18      	it	ne
 8006698:	2300      	movne	r3, #0
 800669a:	eba6 0807 	sub.w	r8, r6, r7
 800669e:	608b      	str	r3, [r1, #8]
 80066a0:	f1b8 0f00 	cmp.w	r8, #0
 80066a4:	dde9      	ble.n	800667a <__sflush_r+0xae>
 80066a6:	6a21      	ldr	r1, [r4, #32]
 80066a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066aa:	4643      	mov	r3, r8
 80066ac:	463a      	mov	r2, r7
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b0      	blx	r6
 80066b2:	2800      	cmp	r0, #0
 80066b4:	dc08      	bgt.n	80066c8 <__sflush_r+0xfc>
 80066b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c8:	4407      	add	r7, r0
 80066ca:	eba8 0800 	sub.w	r8, r8, r0
 80066ce:	e7e7      	b.n	80066a0 <__sflush_r+0xd4>
 80066d0:	20400001 	.word	0x20400001

080066d4 <_fflush_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	690b      	ldr	r3, [r1, #16]
 80066d8:	4605      	mov	r5, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	b913      	cbnz	r3, 80066e4 <_fflush_r+0x10>
 80066de:	2500      	movs	r5, #0
 80066e0:	4628      	mov	r0, r5
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	b118      	cbz	r0, 80066ee <_fflush_r+0x1a>
 80066e6:	6a03      	ldr	r3, [r0, #32]
 80066e8:	b90b      	cbnz	r3, 80066ee <_fflush_r+0x1a>
 80066ea:	f7fe fa03 	bl	8004af4 <__sinit>
 80066ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f3      	beq.n	80066de <_fflush_r+0xa>
 80066f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066f8:	07d0      	lsls	r0, r2, #31
 80066fa:	d404      	bmi.n	8006706 <_fflush_r+0x32>
 80066fc:	0599      	lsls	r1, r3, #22
 80066fe:	d402      	bmi.n	8006706 <_fflush_r+0x32>
 8006700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006702:	f7fe fbbc 	bl	8004e7e <__retarget_lock_acquire_recursive>
 8006706:	4628      	mov	r0, r5
 8006708:	4621      	mov	r1, r4
 800670a:	f7ff ff5f 	bl	80065cc <__sflush_r>
 800670e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006710:	07da      	lsls	r2, r3, #31
 8006712:	4605      	mov	r5, r0
 8006714:	d4e4      	bmi.n	80066e0 <_fflush_r+0xc>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	059b      	lsls	r3, r3, #22
 800671a:	d4e1      	bmi.n	80066e0 <_fflush_r+0xc>
 800671c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671e:	f7fe fbaf 	bl	8004e80 <__retarget_lock_release_recursive>
 8006722:	e7dd      	b.n	80066e0 <_fflush_r+0xc>

08006724 <__swhatbuf_r>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	460c      	mov	r4, r1
 8006728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672c:	2900      	cmp	r1, #0
 800672e:	b096      	sub	sp, #88	@ 0x58
 8006730:	4615      	mov	r5, r2
 8006732:	461e      	mov	r6, r3
 8006734:	da0d      	bge.n	8006752 <__swhatbuf_r+0x2e>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800673c:	f04f 0100 	mov.w	r1, #0
 8006740:	bf14      	ite	ne
 8006742:	2340      	movne	r3, #64	@ 0x40
 8006744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006748:	2000      	movs	r0, #0
 800674a:	6031      	str	r1, [r6, #0]
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	b016      	add	sp, #88	@ 0x58
 8006750:	bd70      	pop	{r4, r5, r6, pc}
 8006752:	466a      	mov	r2, sp
 8006754:	f000 f8dc 	bl	8006910 <_fstat_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	dbec      	blt.n	8006736 <__swhatbuf_r+0x12>
 800675c:	9901      	ldr	r1, [sp, #4]
 800675e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006766:	4259      	negs	r1, r3
 8006768:	4159      	adcs	r1, r3
 800676a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800676e:	e7eb      	b.n	8006748 <__swhatbuf_r+0x24>

08006770 <__smakebuf_r>:
 8006770:	898b      	ldrh	r3, [r1, #12]
 8006772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006774:	079d      	lsls	r5, r3, #30
 8006776:	4606      	mov	r6, r0
 8006778:	460c      	mov	r4, r1
 800677a:	d507      	bpl.n	800678c <__smakebuf_r+0x1c>
 800677c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	6123      	str	r3, [r4, #16]
 8006784:	2301      	movs	r3, #1
 8006786:	6163      	str	r3, [r4, #20]
 8006788:	b003      	add	sp, #12
 800678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678c:	ab01      	add	r3, sp, #4
 800678e:	466a      	mov	r2, sp
 8006790:	f7ff ffc8 	bl	8006724 <__swhatbuf_r>
 8006794:	9f00      	ldr	r7, [sp, #0]
 8006796:	4605      	mov	r5, r0
 8006798:	4639      	mov	r1, r7
 800679a:	4630      	mov	r0, r6
 800679c:	f7ff f9ce 	bl	8005b3c <_malloc_r>
 80067a0:	b948      	cbnz	r0, 80067b6 <__smakebuf_r+0x46>
 80067a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a6:	059a      	lsls	r2, r3, #22
 80067a8:	d4ee      	bmi.n	8006788 <__smakebuf_r+0x18>
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	f043 0302 	orr.w	r3, r3, #2
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	e7e2      	b.n	800677c <__smakebuf_r+0xc>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	6020      	str	r0, [r4, #0]
 80067ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067c6:	b15b      	cbz	r3, 80067e0 <__smakebuf_r+0x70>
 80067c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067cc:	4630      	mov	r0, r6
 80067ce:	f000 f8b1 	bl	8006934 <_isatty_r>
 80067d2:	b128      	cbz	r0, 80067e0 <__smakebuf_r+0x70>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	431d      	orrs	r5, r3
 80067e4:	81a5      	strh	r5, [r4, #12]
 80067e6:	e7cf      	b.n	8006788 <__smakebuf_r+0x18>

080067e8 <__swbuf_r>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	460e      	mov	r6, r1
 80067ec:	4614      	mov	r4, r2
 80067ee:	4605      	mov	r5, r0
 80067f0:	b118      	cbz	r0, 80067fa <__swbuf_r+0x12>
 80067f2:	6a03      	ldr	r3, [r0, #32]
 80067f4:	b90b      	cbnz	r3, 80067fa <__swbuf_r+0x12>
 80067f6:	f7fe f97d 	bl	8004af4 <__sinit>
 80067fa:	69a3      	ldr	r3, [r4, #24]
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	071a      	lsls	r2, r3, #28
 8006802:	d501      	bpl.n	8006808 <__swbuf_r+0x20>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	b943      	cbnz	r3, 800681a <__swbuf_r+0x32>
 8006808:	4621      	mov	r1, r4
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f82a 	bl	8006864 <__swsetup_r>
 8006810:	b118      	cbz	r0, 800681a <__swbuf_r+0x32>
 8006812:	f04f 37ff 	mov.w	r7, #4294967295
 8006816:	4638      	mov	r0, r7
 8006818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	1a98      	subs	r0, r3, r2
 8006820:	6963      	ldr	r3, [r4, #20]
 8006822:	b2f6      	uxtb	r6, r6
 8006824:	4283      	cmp	r3, r0
 8006826:	4637      	mov	r7, r6
 8006828:	dc05      	bgt.n	8006836 <__swbuf_r+0x4e>
 800682a:	4621      	mov	r1, r4
 800682c:	4628      	mov	r0, r5
 800682e:	f7ff ff51 	bl	80066d4 <_fflush_r>
 8006832:	2800      	cmp	r0, #0
 8006834:	d1ed      	bne.n	8006812 <__swbuf_r+0x2a>
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	3b01      	subs	r3, #1
 800683a:	60a3      	str	r3, [r4, #8]
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	6022      	str	r2, [r4, #0]
 8006842:	701e      	strb	r6, [r3, #0]
 8006844:	6962      	ldr	r2, [r4, #20]
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	429a      	cmp	r2, r3
 800684a:	d004      	beq.n	8006856 <__swbuf_r+0x6e>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	07db      	lsls	r3, r3, #31
 8006850:	d5e1      	bpl.n	8006816 <__swbuf_r+0x2e>
 8006852:	2e0a      	cmp	r6, #10
 8006854:	d1df      	bne.n	8006816 <__swbuf_r+0x2e>
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff ff3b 	bl	80066d4 <_fflush_r>
 800685e:	2800      	cmp	r0, #0
 8006860:	d0d9      	beq.n	8006816 <__swbuf_r+0x2e>
 8006862:	e7d6      	b.n	8006812 <__swbuf_r+0x2a>

08006864 <__swsetup_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4b29      	ldr	r3, [pc, #164]	@ (800690c <__swsetup_r+0xa8>)
 8006868:	4605      	mov	r5, r0
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	460c      	mov	r4, r1
 800686e:	b118      	cbz	r0, 8006878 <__swsetup_r+0x14>
 8006870:	6a03      	ldr	r3, [r0, #32]
 8006872:	b90b      	cbnz	r3, 8006878 <__swsetup_r+0x14>
 8006874:	f7fe f93e 	bl	8004af4 <__sinit>
 8006878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687c:	0719      	lsls	r1, r3, #28
 800687e:	d422      	bmi.n	80068c6 <__swsetup_r+0x62>
 8006880:	06da      	lsls	r2, r3, #27
 8006882:	d407      	bmi.n	8006894 <__swsetup_r+0x30>
 8006884:	2209      	movs	r2, #9
 8006886:	602a      	str	r2, [r5, #0]
 8006888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	e033      	b.n	80068fc <__swsetup_r+0x98>
 8006894:	0758      	lsls	r0, r3, #29
 8006896:	d512      	bpl.n	80068be <__swsetup_r+0x5a>
 8006898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800689a:	b141      	cbz	r1, 80068ae <__swsetup_r+0x4a>
 800689c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068a0:	4299      	cmp	r1, r3
 80068a2:	d002      	beq.n	80068aa <__swsetup_r+0x46>
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff f8d5 	bl	8005a54 <_free_r>
 80068aa:	2300      	movs	r3, #0
 80068ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	2300      	movs	r3, #0
 80068b8:	6063      	str	r3, [r4, #4]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f043 0308 	orr.w	r3, r3, #8
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	b94b      	cbnz	r3, 80068de <__swsetup_r+0x7a>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d4:	d003      	beq.n	80068de <__swsetup_r+0x7a>
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	f7ff ff49 	bl	8006770 <__smakebuf_r>
 80068de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e2:	f013 0201 	ands.w	r2, r3, #1
 80068e6:	d00a      	beq.n	80068fe <__swsetup_r+0x9a>
 80068e8:	2200      	movs	r2, #0
 80068ea:	60a2      	str	r2, [r4, #8]
 80068ec:	6962      	ldr	r2, [r4, #20]
 80068ee:	4252      	negs	r2, r2
 80068f0:	61a2      	str	r2, [r4, #24]
 80068f2:	6922      	ldr	r2, [r4, #16]
 80068f4:	b942      	cbnz	r2, 8006908 <__swsetup_r+0xa4>
 80068f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068fa:	d1c5      	bne.n	8006888 <__swsetup_r+0x24>
 80068fc:	bd38      	pop	{r3, r4, r5, pc}
 80068fe:	0799      	lsls	r1, r3, #30
 8006900:	bf58      	it	pl
 8006902:	6962      	ldrpl	r2, [r4, #20]
 8006904:	60a2      	str	r2, [r4, #8]
 8006906:	e7f4      	b.n	80068f2 <__swsetup_r+0x8e>
 8006908:	2000      	movs	r0, #0
 800690a:	e7f7      	b.n	80068fc <__swsetup_r+0x98>
 800690c:	2000001c 	.word	0x2000001c

08006910 <_fstat_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d07      	ldr	r5, [pc, #28]	@ (8006930 <_fstat_r+0x20>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	602b      	str	r3, [r5, #0]
 800691e:	f7fa fbec 	bl	80010fa <_fstat>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	d102      	bne.n	800692c <_fstat_r+0x1c>
 8006926:	682b      	ldr	r3, [r5, #0]
 8006928:	b103      	cbz	r3, 800692c <_fstat_r+0x1c>
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	bd38      	pop	{r3, r4, r5, pc}
 800692e:	bf00      	nop
 8006930:	20000414 	.word	0x20000414

08006934 <_isatty_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4d06      	ldr	r5, [pc, #24]	@ (8006950 <_isatty_r+0x1c>)
 8006938:	2300      	movs	r3, #0
 800693a:	4604      	mov	r4, r0
 800693c:	4608      	mov	r0, r1
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	f7fa fbeb 	bl	800111a <_isatty>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_isatty_r+0x1a>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_isatty_r+0x1a>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	20000414 	.word	0x20000414

08006954 <_sbrk_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	@ (8006970 <_sbrk_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fa fbf4 	bl	800114c <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_sbrk_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_sbrk_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000414 	.word	0x20000414

08006974 <memcpy>:
 8006974:	440a      	add	r2, r1
 8006976:	4291      	cmp	r1, r2
 8006978:	f100 33ff 	add.w	r3, r0, #4294967295
 800697c:	d100      	bne.n	8006980 <memcpy+0xc>
 800697e:	4770      	bx	lr
 8006980:	b510      	push	{r4, lr}
 8006982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698a:	4291      	cmp	r1, r2
 800698c:	d1f9      	bne.n	8006982 <memcpy+0xe>
 800698e:	bd10      	pop	{r4, pc}

08006990 <__assert_func>:
 8006990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006992:	4614      	mov	r4, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <__assert_func+0x2c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4605      	mov	r5, r0
 800699c:	68d8      	ldr	r0, [r3, #12]
 800699e:	b14c      	cbz	r4, 80069b4 <__assert_func+0x24>
 80069a0:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <__assert_func+0x30>)
 80069a2:	9100      	str	r1, [sp, #0]
 80069a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069a8:	4906      	ldr	r1, [pc, #24]	@ (80069c4 <__assert_func+0x34>)
 80069aa:	462b      	mov	r3, r5
 80069ac:	f000 f842 	bl	8006a34 <fiprintf>
 80069b0:	f000 f852 	bl	8006a58 <abort>
 80069b4:	4b04      	ldr	r3, [pc, #16]	@ (80069c8 <__assert_func+0x38>)
 80069b6:	461c      	mov	r4, r3
 80069b8:	e7f3      	b.n	80069a2 <__assert_func+0x12>
 80069ba:	bf00      	nop
 80069bc:	2000001c 	.word	0x2000001c
 80069c0:	08006cc5 	.word	0x08006cc5
 80069c4:	08006cd2 	.word	0x08006cd2
 80069c8:	08006d00 	.word	0x08006d00

080069cc <_calloc_r>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	fba1 5402 	umull	r5, r4, r1, r2
 80069d2:	b934      	cbnz	r4, 80069e2 <_calloc_r+0x16>
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7ff f8b1 	bl	8005b3c <_malloc_r>
 80069da:	4606      	mov	r6, r0
 80069dc:	b928      	cbnz	r0, 80069ea <_calloc_r+0x1e>
 80069de:	4630      	mov	r0, r6
 80069e0:	bd70      	pop	{r4, r5, r6, pc}
 80069e2:	220c      	movs	r2, #12
 80069e4:	6002      	str	r2, [r0, #0]
 80069e6:	2600      	movs	r6, #0
 80069e8:	e7f9      	b.n	80069de <_calloc_r+0x12>
 80069ea:	462a      	mov	r2, r5
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7fe f9c8 	bl	8004d82 <memset>
 80069f2:	e7f4      	b.n	80069de <_calloc_r+0x12>

080069f4 <__ascii_mbtowc>:
 80069f4:	b082      	sub	sp, #8
 80069f6:	b901      	cbnz	r1, 80069fa <__ascii_mbtowc+0x6>
 80069f8:	a901      	add	r1, sp, #4
 80069fa:	b142      	cbz	r2, 8006a0e <__ascii_mbtowc+0x1a>
 80069fc:	b14b      	cbz	r3, 8006a12 <__ascii_mbtowc+0x1e>
 80069fe:	7813      	ldrb	r3, [r2, #0]
 8006a00:	600b      	str	r3, [r1, #0]
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	1e10      	subs	r0, r2, #0
 8006a06:	bf18      	it	ne
 8006a08:	2001      	movne	r0, #1
 8006a0a:	b002      	add	sp, #8
 8006a0c:	4770      	bx	lr
 8006a0e:	4610      	mov	r0, r2
 8006a10:	e7fb      	b.n	8006a0a <__ascii_mbtowc+0x16>
 8006a12:	f06f 0001 	mvn.w	r0, #1
 8006a16:	e7f8      	b.n	8006a0a <__ascii_mbtowc+0x16>

08006a18 <__ascii_wctomb>:
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	b141      	cbz	r1, 8006a30 <__ascii_wctomb+0x18>
 8006a1e:	2aff      	cmp	r2, #255	@ 0xff
 8006a20:	d904      	bls.n	8006a2c <__ascii_wctomb+0x14>
 8006a22:	228a      	movs	r2, #138	@ 0x8a
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	4770      	bx	lr
 8006a2c:	700a      	strb	r2, [r1, #0]
 8006a2e:	2001      	movs	r0, #1
 8006a30:	4770      	bx	lr
	...

08006a34 <fiprintf>:
 8006a34:	b40e      	push	{r1, r2, r3}
 8006a36:	b503      	push	{r0, r1, lr}
 8006a38:	4601      	mov	r1, r0
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	4805      	ldr	r0, [pc, #20]	@ (8006a54 <fiprintf+0x20>)
 8006a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	f7ff fca9 	bl	800639c <_vfiprintf_r>
 8006a4a:	b002      	add	sp, #8
 8006a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr
 8006a54:	2000001c 	.word	0x2000001c

08006a58 <abort>:
 8006a58:	b508      	push	{r3, lr}
 8006a5a:	2006      	movs	r0, #6
 8006a5c:	f000 f82c 	bl	8006ab8 <raise>
 8006a60:	2001      	movs	r0, #1
 8006a62:	f7fa fb16 	bl	8001092 <_exit>

08006a66 <_raise_r>:
 8006a66:	291f      	cmp	r1, #31
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	d904      	bls.n	8006a7a <_raise_r+0x14>
 8006a70:	2316      	movs	r3, #22
 8006a72:	6003      	str	r3, [r0, #0]
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	bd38      	pop	{r3, r4, r5, pc}
 8006a7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a7c:	b112      	cbz	r2, 8006a84 <_raise_r+0x1e>
 8006a7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a82:	b94b      	cbnz	r3, 8006a98 <_raise_r+0x32>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f831 	bl	8006aec <_getpid_r>
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a94:	f000 b818 	b.w	8006ac8 <_kill_r>
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d00a      	beq.n	8006ab2 <_raise_r+0x4c>
 8006a9c:	1c59      	adds	r1, r3, #1
 8006a9e:	d103      	bne.n	8006aa8 <_raise_r+0x42>
 8006aa0:	2316      	movs	r3, #22
 8006aa2:	6003      	str	r3, [r0, #0]
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	e7e7      	b.n	8006a78 <_raise_r+0x12>
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4798      	blx	r3
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e7e0      	b.n	8006a78 <_raise_r+0x12>
	...

08006ab8 <raise>:
 8006ab8:	4b02      	ldr	r3, [pc, #8]	@ (8006ac4 <raise+0xc>)
 8006aba:	4601      	mov	r1, r0
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	f7ff bfd2 	b.w	8006a66 <_raise_r>
 8006ac2:	bf00      	nop
 8006ac4:	2000001c 	.word	0x2000001c

08006ac8 <_kill_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d07      	ldr	r5, [pc, #28]	@ (8006ae8 <_kill_r+0x20>)
 8006acc:	2300      	movs	r3, #0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	f7fa facc 	bl	8001072 <_kill>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	d102      	bne.n	8006ae4 <_kill_r+0x1c>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	b103      	cbz	r3, 8006ae4 <_kill_r+0x1c>
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	bd38      	pop	{r3, r4, r5, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000414 	.word	0x20000414

08006aec <_getpid_r>:
 8006aec:	f7fa bab9 	b.w	8001062 <_getpid>

08006af0 <_init>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr

08006afc <_fini>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr


OLED_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de4  0800424c  0800424c  0000524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005038  08005038  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005038  08005038  00006038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800503c  0800503c  0000603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005040  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000650  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ac  200006ac  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc83  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df3  00000000  00000000  00013d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  00015b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fe  00000000  00000000  00016568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2a1  00000000  00000000  00016d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed4e  00000000  00000000  00032007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cc45  00000000  00000000  00040d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dd99a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f1c  00000000  00000000  000dd9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e08fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004234 	.word	0x08004234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004234 	.word	0x08004234

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fcc1 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f841 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8ff 	bl	8000480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000282:	f000 f8cd 	bl	8000420 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000286:	f000 f88d 	bl	80003a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800028a:	f000 f969 	bl	8000560 <ssd1306_Init>
  uint32_t counter = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
  char text[20] = {0};
 8000292:	463b      	mov	r3, r7
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  ssd1306_SetCursor(1,1);
 80002a0:	2101      	movs	r1, #1
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 fb12 	bl	80008cc <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World", Font_11x18, White);
 80002a8:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <main+0x84>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	9200      	str	r2, [sp, #0]
 80002ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002b0:	4811      	ldr	r0, [pc, #68]	@ (80002f8 <main+0x88>)
 80002b2:	f000 fae5 	bl	8000880 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80002b6:	f000 f9d5 	bl	8000664 <ssd1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(text, "%ld", counter);
 80002ba:	463b      	mov	r3, r7
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	490f      	ldr	r1, [pc, #60]	@ (80002fc <main+0x8c>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 fb17 	bl	80038f4 <siprintf>
	  ssd1306_SetCursor(1, 25);
 80002c6:	2119      	movs	r1, #25
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 faff 	bl	80008cc <ssd1306_SetCursor>
	  ssd1306_WriteString(text, Font_11x18, White);
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <main+0x84>)
 80002d0:	4638      	mov	r0, r7
 80002d2:	2201      	movs	r2, #1
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002d8:	f000 fad2 	bl	8000880 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80002dc:	f000 f9c2 	bl	8000664 <ssd1306_UpdateScreen>
	  counter++;
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	3301      	adds	r3, #1
 80002e4:	617b      	str	r3, [r7, #20]
	  HAL_Delay(1000);
 80002e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ea:	f000 fced 	bl	8000cc8 <HAL_Delay>
	  sprintf(text, "%ld", counter);
 80002ee:	bf00      	nop
 80002f0:	e7e3      	b.n	80002ba <main+0x4a>
 80002f2:	bf00      	nop
 80002f4:	08004fb8 	.word	0x08004fb8
 80002f8:	0800424c 	.word	0x0800424c
 80002fc:	08004258 	.word	0x08004258

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b096      	sub	sp, #88	@ 0x58
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800030a:	2228      	movs	r2, #40	@ 0x28
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fb2c 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 031c 	add.w	r3, r7, #28
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]
 8000332:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	2302      	movs	r3, #2
 8000336:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2310      	movs	r3, #16
 800033e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fbef 	bl	8001b2c <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000354:	f000 f8c4 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	230f      	movs	r3, #15
 800035a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fbe8 	bl	8002b48 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800037e:	f000 f8af 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000382:	2320      	movs	r3, #32
 8000384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f002 fded 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000398:	f000 f8a2 	bl	80004e0 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3758      	adds	r7, #88	@ 0x58
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	@ (800041c <MX_I2C1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003b0:	f240 220b 	movw	r2, #523	@ 0x20b
 80003b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003b6:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003bc:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003be:	2201      	movs	r2, #1
 80003c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003c8:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d4:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e0:	480d      	ldr	r0, [pc, #52]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003e2:	f000 feed 	bl	80011c0 <HAL_I2C_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003ec:	f000 f878 	bl	80004e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003f0:	2100      	movs	r1, #0
 80003f2:	4809      	ldr	r0, [pc, #36]	@ (8000418 <MX_I2C1_Init+0x74>)
 80003f4:	f001 fb02 	bl	80019fc <HAL_I2CEx_ConfigAnalogFilter>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003fe:	f000 f86f 	bl	80004e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000402:	2100      	movs	r1, #0
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_I2C1_Init+0x74>)
 8000406:	f001 fb44 	bl	8001a92 <HAL_I2CEx_ConfigDigitalFilter>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000410:	f000 f866 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000078 	.word	0x20000078
 800041c:	40005400 	.word	0x40005400

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	@ (800047c <MX_USART2_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800042a:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800042c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000464:	f002 fea6 	bl	80031b4 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f837 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200000cc 	.word	0x200000cc
 800047c:	40004400 	.word	0x40004400

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <MX_GPIO_Init+0x5c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a14      	ldr	r2, [pc, #80]	@ (80004dc <MX_GPIO_Init+0x5c>)
 800048c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <MX_GPIO_Init+0x5c>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <MX_GPIO_Init+0x5c>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <MX_GPIO_Init+0x5c>)
 80004a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_GPIO_Init+0x5c>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_GPIO_Init+0x5c>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <MX_GPIO_Init+0x5c>)
 80004bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_GPIO_Init+0x5c>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <Error_Handler+0x8>

080004ec <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af04      	add	r7, sp, #16
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	9302      	str	r3, [sp, #8]
 800050c:	2301      	movs	r3, #1
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2200      	movs	r2, #0
 8000518:	217a      	movs	r1, #122	@ 0x7a
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <ssd1306_WriteCommand+0x2c>)
 800051c:	f000 feec 	bl	80012f8 <HAL_I2C_Mem_Write>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000078 	.word	0x20000078

0800052c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af04      	add	r7, sp, #16
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	b29b      	uxth	r3, r3
 800053a:	f04f 32ff 	mov.w	r2, #4294967295
 800053e:	9202      	str	r2, [sp, #8]
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	2240      	movs	r2, #64	@ 0x40
 800054a:	217a      	movs	r1, #122	@ 0x7a
 800054c:	4803      	ldr	r0, [pc, #12]	@ (800055c <ssd1306_WriteData+0x30>)
 800054e:	f000 fed3 	bl	80012f8 <HAL_I2C_Mem_Write>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000078 	.word	0x20000078

08000560 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000564:	f7ff ffc2 	bl	80004ec <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f000 fbad 	bl	8000cc8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800056e:	2000      	movs	r0, #0
 8000570:	f000 f9d8 	bl	8000924 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000574:	2020      	movs	r0, #32
 8000576:	f7ff ffc1 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ffbe 	bl	80004fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000580:	20b0      	movs	r0, #176	@ 0xb0
 8000582:	f7ff ffbb 	bl	80004fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000586:	20c8      	movs	r0, #200	@ 0xc8
 8000588:	f7ff ffb8 	bl	80004fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff ffb5 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000592:	2010      	movs	r0, #16
 8000594:	f7ff ffb2 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000598:	2040      	movs	r0, #64	@ 0x40
 800059a:	f7ff ffaf 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800059e:	20ff      	movs	r0, #255	@ 0xff
 80005a0:	f000 f9ac 	bl	80008fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005a4:	20a1      	movs	r0, #161	@ 0xa1
 80005a6:	f7ff ffa9 	bl	80004fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005aa:	20a6      	movs	r0, #166	@ 0xa6
 80005ac:	f7ff ffa6 	bl	80004fc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005b0:	20a8      	movs	r0, #168	@ 0xa8
 80005b2:	f7ff ffa3 	bl	80004fc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80005b6:	203f      	movs	r0, #63	@ 0x3f
 80005b8:	f7ff ffa0 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005bc:	20a4      	movs	r0, #164	@ 0xa4
 80005be:	f7ff ff9d 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005c2:	20d3      	movs	r0, #211	@ 0xd3
 80005c4:	f7ff ff9a 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ff97 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80005ce:	20d5      	movs	r0, #213	@ 0xd5
 80005d0:	f7ff ff94 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80005d4:	20f0      	movs	r0, #240	@ 0xf0
 80005d6:	f7ff ff91 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80005da:	20d9      	movs	r0, #217	@ 0xd9
 80005dc:	f7ff ff8e 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80005e0:	2022      	movs	r0, #34	@ 0x22
 80005e2:	f7ff ff8b 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80005e6:	20da      	movs	r0, #218	@ 0xda
 80005e8:	f7ff ff88 	bl	80004fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80005ec:	2012      	movs	r0, #18
 80005ee:	f7ff ff85 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80005f2:	20db      	movs	r0, #219	@ 0xdb
 80005f4:	f7ff ff82 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80005f8:	2020      	movs	r0, #32
 80005fa:	f7ff ff7f 	bl	80004fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80005fe:	208d      	movs	r0, #141	@ 0x8d
 8000600:	f7ff ff7c 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000604:	2014      	movs	r0, #20
 8000606:	f7ff ff79 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800060a:	2001      	movs	r0, #1
 800060c:	f000 f98a 	bl	8000924 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f80f 	bl	8000634 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000616:	f000 f825 	bl	8000664 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <ssd1306_Init+0xd0>)
 800061c:	2200      	movs	r2, #0
 800061e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000620:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <ssd1306_Init+0xd0>)
 8000622:	2200      	movs	r2, #0
 8000624:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000626:	4b02      	ldr	r3, [pc, #8]	@ (8000630 <ssd1306_Init+0xd0>)
 8000628:	2201      	movs	r2, #1
 800062a:	711a      	strb	r2, [r3, #4]
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000554 	.word	0x20000554

08000634 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d101      	bne.n	8000648 <ssd1306_Fill+0x14>
 8000644:	2300      	movs	r3, #0
 8000646:	e000      	b.n	800064a <ssd1306_Fill+0x16>
 8000648:	23ff      	movs	r3, #255	@ 0xff
 800064a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800064e:	4619      	mov	r1, r3
 8000650:	4803      	ldr	r0, [pc, #12]	@ (8000660 <ssd1306_Fill+0x2c>)
 8000652:	f003 f98b 	bl	800396c <memset>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000154 	.word	0x20000154

08000664 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e016      	b.n	800069e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	3b50      	subs	r3, #80	@ 0x50
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff40 	bl	80004fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff3d 	bl	80004fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000682:	2010      	movs	r0, #16
 8000684:	f7ff ff3a 	bl	80004fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	01db      	lsls	r3, r3, #7
 800068c:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <ssd1306_UpdateScreen+0x4c>)
 800068e:	4413      	add	r3, r2
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff4a 	bl	800052c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	3301      	adds	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	d9e5      	bls.n	8000670 <ssd1306_UpdateScreen+0xc>
    }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000154 	.word	0x20000154

080006b4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	460b      	mov	r3, r1
 80006c0:	71bb      	strb	r3, [r7, #6]
 80006c2:	4613      	mov	r3, r2
 80006c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db3d      	blt.n	800074a <ssd1306_DrawPixel+0x96>
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006d2:	d83a      	bhi.n	800074a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d11a      	bne.n	8000710 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	b2d8      	uxtb	r0, r3
 80006e2:	4603      	mov	r3, r0
 80006e4:	01db      	lsls	r3, r3, #7
 80006e6:	4413      	add	r3, r2
 80006e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <ssd1306_DrawPixel+0xa4>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b259      	sxtb	r1, r3
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	4603      	mov	r3, r0
 8000704:	01db      	lsls	r3, r3, #7
 8000706:	4413      	add	r3, r2
 8000708:	b2c9      	uxtb	r1, r1
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <ssd1306_DrawPixel+0xa4>)
 800070c:	54d1      	strb	r1, [r2, r3]
 800070e:	e01d      	b.n	800074c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	4603      	mov	r3, r0
 800071a:	01db      	lsls	r3, r3, #7
 800071c:	4413      	add	r3, r2
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <ssd1306_DrawPixel+0xa4>)
 8000720:	5cd3      	ldrb	r3, [r2, r3]
 8000722:	b25a      	sxtb	r2, r3
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	b25b      	sxtb	r3, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	b25b      	sxtb	r3, r3
 8000736:	4013      	ands	r3, r2
 8000738:	b259      	sxtb	r1, r3
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	4603      	mov	r3, r0
 800073e:	01db      	lsls	r3, r3, #7
 8000740:	4413      	add	r3, r2
 8000742:	b2c9      	uxtb	r1, r1
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <ssd1306_DrawPixel+0xa4>)
 8000746:	54d1      	strb	r1, [r2, r3]
 8000748:	e000      	b.n	800074c <ssd1306_DrawPixel+0x98>
        return;
 800074a:	bf00      	nop
    }
}
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000154 	.word	0x20000154

0800075c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	4604      	mov	r4, r0
 8000764:	4638      	mov	r0, r7
 8000766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800076a:	4623      	mov	r3, r4
 800076c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2b1f      	cmp	r3, #31
 8000772:	d902      	bls.n	800077a <ssd1306_WriteChar+0x1e>
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b7e      	cmp	r3, #126	@ 0x7e
 8000778:	d901      	bls.n	800077e <ssd1306_WriteChar+0x22>
        return 0;
 800077a:	2300      	movs	r3, #0
 800077c:	e079      	b.n	8000872 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <ssd1306_WriteChar+0x34>
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	3b20      	subs	r3, #32
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	e000      	b.n	8000792 <ssd1306_WriteChar+0x36>
 8000790:	783b      	ldrb	r3, [r7, #0]
 8000792:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000794:	4b39      	ldr	r3, [pc, #228]	@ (800087c <ssd1306_WriteChar+0x120>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	4413      	add	r3, r2
 800079e:	2b80      	cmp	r3, #128	@ 0x80
 80007a0:	dc06      	bgt.n	80007b0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80007a2:	4b36      	ldr	r3, [pc, #216]	@ (800087c <ssd1306_WriteChar+0x120>)
 80007a4:	885b      	ldrh	r3, [r3, #2]
 80007a6:	461a      	mov	r2, r3
 80007a8:	787b      	ldrb	r3, [r7, #1]
 80007aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80007ac:	2b40      	cmp	r3, #64	@ 0x40
 80007ae:	dd01      	ble.n	80007b4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e05e      	b.n	8000872 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
 80007b8:	e04d      	b.n	8000856 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3b20      	subs	r3, #32
 80007c0:	7879      	ldrb	r1, [r7, #1]
 80007c2:	fb01 f303 	mul.w	r3, r1, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	e036      	b.n	8000848 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d013      	beq.n	8000812 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <ssd1306_WriteChar+0x120>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	b2d8      	uxtb	r0, r3
 80007f8:	4b20      	ldr	r3, [pc, #128]	@ (800087c <ssd1306_WriteChar+0x120>)
 80007fa:	885b      	ldrh	r3, [r3, #2]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4413      	add	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800080a:	4619      	mov	r1, r3
 800080c:	f7ff ff52 	bl	80006b4 <ssd1306_DrawPixel>
 8000810:	e017      	b.n	8000842 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000812:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <ssd1306_WriteChar+0x120>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4413      	add	r3, r2
 800081e:	b2d8      	uxtb	r0, r3
 8000820:	4b16      	ldr	r3, [pc, #88]	@ (800087c <ssd1306_WriteChar+0x120>)
 8000822:	885b      	ldrh	r3, [r3, #2]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4413      	add	r3, r2
 800082c:	b2d9      	uxtb	r1, r3
 800082e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	f7ff ff39 	bl	80006b4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	3301      	adds	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3c4      	bcc.n	80007da <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	3301      	adds	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	787b      	ldrb	r3, [r7, #1]
 8000858:	461a      	mov	r2, r3
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	4293      	cmp	r3, r2
 800085e:	d3ac      	bcc.n	80007ba <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <ssd1306_WriteChar+0x120>)
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4413      	add	r3, r2
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <ssd1306_WriteChar+0x120>)
 800086e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000870:	7bfb      	ldrb	r3, [r7, #15]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	@ 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	20000554 	.word	0x20000554

08000880 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	4638      	mov	r0, r7
 800088a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800088e:	e013      	b.n	80008b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	7818      	ldrb	r0, [r3, #0]
 8000894:	7e3b      	ldrb	r3, [r7, #24]
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	463b      	mov	r3, r7
 800089a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800089c:	f7ff ff5e 	bl	800075c <ssd1306_WriteChar>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d002      	beq.n	80008b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	e008      	b.n	80008c4 <ssd1306_WriteString+0x44>
        }
        str++;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e7      	bne.n	8000890 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	781b      	ldrb	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <ssd1306_SetCursor+0x2c>)
 80008e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <ssd1306_SetCursor+0x2c>)
 80008ea:	805a      	strh	r2, [r3, #2]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	20000554 	.word	0x20000554

080008fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000906:	2381      	movs	r3, #129	@ 0x81
 8000908:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdf5 	bl	80004fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fdf1 	bl	80004fc <ssd1306_WriteCommand>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000934:	23af      	movs	r3, #175	@ 0xaf
 8000936:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <ssd1306_SetDisplayOn+0x38>)
 800093a:	2201      	movs	r2, #1
 800093c:	715a      	strb	r2, [r3, #5]
 800093e:	e004      	b.n	800094a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000940:	23ae      	movs	r3, #174	@ 0xae
 8000942:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <ssd1306_SetDisplayOn+0x38>)
 8000946:	2200      	movs	r2, #0
 8000948:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fdd5 	bl	80004fc <ssd1306_WriteCommand>
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000554 	.word	0x20000554

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <HAL_MspInit+0x44>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x44>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x44>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <HAL_I2C_MspInit+0x7c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d127      	bne.n	8000a1a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_I2C_MspInit+0x80>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <HAL_I2C_MspInit+0x80>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_I2C_MspInit+0x80>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e2:	23c0      	movs	r3, #192	@ 0xc0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f2:	2304      	movs	r3, #4
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <HAL_I2C_MspInit+0x84>)
 80009fe:	f000 fa6d 	bl	8000edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_I2C_MspInit+0x80>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_I2C_MspInit+0x80>)
 8000a08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_I2C_MspInit+0x80>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	@ 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40005400 	.word	0x40005400
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400

08000a30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d129      	bne.n	8000aa6 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a82:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a94:	2307      	movs	r3, #7
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f000 fa1b 	bl	8000edc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f8bb 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f002 ff18 	bl	800397c <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20003000 	.word	0x20003000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	2000055c 	.word	0x2000055c
 8000b80:	200006b0 	.word	0x200006b0

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f002 fed7 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bda:	f7ff fb49 	bl	8000270 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bec:	08005040 	.word	0x08005040
  ldr r2, =_sbss
 8000bf0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bf4:	200006ac 	.word	0x200006ac

08000bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_2_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f931 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fea2 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f93b 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f911 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000560 	.word	0x20000560

08000cb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cb4:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000560 	.word	0x20000560

08000cc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff47 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff5c 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffb0 	bl	8000e30 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e14e      	b.n	800118a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8140 	beq.w	8001184 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x40>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0203 	and.w	r2, r3, #3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 809a 	beq.w	8001184 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b55      	ldr	r3, [pc, #340]	@ (80011a8 <HAL_GPIO_Init+0x2cc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a54      	ldr	r2, [pc, #336]	@ (80011a8 <HAL_GPIO_Init+0x2cc>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b52      	ldr	r3, [pc, #328]	@ (80011a8 <HAL_GPIO_Init+0x2cc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001068:	4a50      	ldr	r2, [pc, #320]	@ (80011ac <HAL_GPIO_Init+0x2d0>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x1e0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a46      	ldr	r2, [pc, #280]	@ (80011b0 <HAL_GPIO_Init+0x2d4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1dc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a45      	ldr	r2, [pc, #276]	@ (80011b4 <HAL_GPIO_Init+0x2d8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1d8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a44      	ldr	r2, [pc, #272]	@ (80011b8 <HAL_GPIO_Init+0x2dc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1d4>
 80010ac:	2303      	movs	r3, #3
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x1e2>
 80010b0:	2305      	movs	r3, #5
 80010b2:	e004      	b.n	80010be <HAL_GPIO_Init+0x1e2>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x1e2>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_GPIO_Init+0x1e2>
 80010bc:	2300      	movs	r3, #0
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ce:	4937      	ldr	r1, [pc, #220]	@ (80011ac <HAL_GPIO_Init+0x2d0>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010dc:	4b37      	ldr	r3, [pc, #220]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001100:	4a2e      	ldr	r2, [pc, #184]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001106:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001154:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_GPIO_Init+0x2e0>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f aea9 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e08d      	b.n	80012ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fbde 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2224      	movs	r2, #36	@ 0x24
 80011f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001210:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001220:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e006      	b.n	8001248 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001246:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d108      	bne.n	8001262 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	e007      	b.n	8001272 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69d9      	ldr	r1, [r3, #28]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1a      	ldr	r2, [r3, #32]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2220      	movs	r2, #32
 80012da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	4608      	mov	r0, r1
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4603      	mov	r3, r0
 8001308:	817b      	strh	r3, [r7, #10]
 800130a:	460b      	mov	r3, r1
 800130c:	813b      	strh	r3, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b20      	cmp	r3, #32
 800131c:	f040 80f9 	bne.w	8001512 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_I2C_Mem_Write+0x34>
 8001326:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001332:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0ed      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_I2C_Mem_Write+0x4e>
 8001342:	2302      	movs	r3, #2
 8001344:	e0e6      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800134e:	f7ff fcaf 	bl	8000cb0 <HAL_GetTick>
 8001352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2319      	movs	r3, #25
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f955 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0d1      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2221      	movs	r2, #33	@ 0x21
 8001374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2240      	movs	r2, #64	@ 0x40
 800137c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a3a      	ldr	r2, [r7, #32]
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001390:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001398:	88f8      	ldrh	r0, [r7, #6]
 800139a:	893a      	ldrh	r2, [r7, #8]
 800139c:	8979      	ldrh	r1, [r7, #10]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	4603      	mov	r3, r0
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f8b9 	bl	8001520 <I2C_RequestMemoryWrite>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0a9      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	2bff      	cmp	r3, #255	@ 0xff
 80013c8:	d90e      	bls.n	80013e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	22ff      	movs	r2, #255	@ 0xff
 80013ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	8979      	ldrh	r1, [r7, #10]
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fad9 	bl	8001998 <I2C_TransferConfig>
 80013e6:	e00f      	b.n	8001408 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	8979      	ldrh	r1, [r7, #10]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fac8 	bl	8001998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f958 	bl	80016c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e07b      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001436:	b29b      	uxth	r3, r3
 8001438:	3b01      	subs	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d034      	beq.n	80014c0 <HAL_I2C_Mem_Write+0x1c8>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145a:	2b00      	cmp	r3, #0
 800145c:	d130      	bne.n	80014c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001464:	2200      	movs	r2, #0
 8001466:	2180      	movs	r1, #128	@ 0x80
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f8d1 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e04d      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147c:	b29b      	uxth	r3, r3
 800147e:	2bff      	cmp	r3, #255	@ 0xff
 8001480:	d90e      	bls.n	80014a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	22ff      	movs	r2, #255	@ 0xff
 8001486:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148c:	b2da      	uxtb	r2, r3
 800148e:	8979      	ldrh	r1, [r7, #10]
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 fa7d 	bl	8001998 <I2C_TransferConfig>
 800149e:	e00f      	b.n	80014c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	8979      	ldrh	r1, [r7, #10]
 80014b2:	2300      	movs	r3, #0
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 fa6c 	bl	8001998 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d19e      	bne.n	8001408 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f93e 	bl	8001750 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e01a      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2220      	movs	r2, #32
 80014e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_I2C_Mem_Write+0x224>)
 80014f2:	400b      	ands	r3, r1
 80014f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001512:	2302      	movs	r3, #2
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	fe00e800 	.word	0xfe00e800

08001520 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	817b      	strh	r3, [r7, #10]
 8001532:	460b      	mov	r3, r1
 8001534:	813b      	strh	r3, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	8979      	ldrh	r1, [r7, #10]
 8001540:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <I2C_RequestMemoryWrite+0xa4>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 fa25 	bl	8001998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	69b9      	ldr	r1, [r7, #24]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f8b5 	bl	80016c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e02c      	b.n	80015bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001568:	893b      	ldrh	r3, [r7, #8]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
 8001572:	e015      	b.n	80015a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001574:	893b      	ldrh	r3, [r7, #8]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	b2da      	uxtb	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f89b 	bl	80016c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e012      	b.n	80015bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001596:	893b      	ldrh	r3, [r7, #8]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2200      	movs	r2, #0
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f830 	bl	8001610 <I2C_WaitOnFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	80002000 	.word	0x80002000

080015c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d103      	bne.n	80015e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d007      	beq.n	8001604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	619a      	str	r2, [r3, #24]
  }
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001620:	e03b      	b.n	800169a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f8d6 	bl	80017d8 <I2C_IsErrorOccurred>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e041      	b.n	80016ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d02d      	beq.n	800169a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff fb37 	bl	8000cb0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <I2C_WaitOnFlagUntilTimeout+0x44>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d122      	bne.n	800169a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4013      	ands	r3, r2
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	429a      	cmp	r2, r3
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	429a      	cmp	r2, r3
 8001670:	d113      	bne.n	800169a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2220      	movs	r2, #32
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4013      	ands	r3, r2
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d0b4      	beq.n	8001622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016ce:	e033      	b.n	8001738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f87f 	bl	80017d8 <I2C_IsErrorOccurred>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e031      	b.n	8001748 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	d025      	beq.n	8001738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ec:	f7ff fae0 	bl	8000cb0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d302      	bcc.n	8001702 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d11a      	bne.n	8001738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b02      	cmp	r3, #2
 800170e:	d013      	beq.n	8001738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e007      	b.n	8001748 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b02      	cmp	r3, #2
 8001744:	d1c4      	bne.n	80016d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800175c:	e02f      	b.n	80017be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f838 	bl	80017d8 <I2C_IsErrorOccurred>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e02d      	b.n	80017ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001772:	f7ff fa9d 	bl	8000cb0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	429a      	cmp	r2, r3
 8001780:	d302      	bcc.n	8001788 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d11a      	bne.n	80017be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b20      	cmp	r3, #32
 8001794:	d013      	beq.n	80017be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f043 0220 	orr.w	r2, r3, #32
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e007      	b.n	80017ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d1c8      	bne.n	800175e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b00      	cmp	r3, #0
 8001802:	d068      	beq.n	80018d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800180c:	e049      	b.n	80018a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d045      	beq.n	80018a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7ff fa4b 	bl	8000cb0 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <I2C_IsErrorOccurred+0x54>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d13a      	bne.n	80018a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800183e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800184a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800184e:	d121      	bne.n	8001894 <I2C_IsErrorOccurred+0xbc>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001856:	d01d      	beq.n	8001894 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001858:	7cfb      	ldrb	r3, [r7, #19]
 800185a:	2b20      	cmp	r3, #32
 800185c:	d01a      	beq.n	8001894 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800186c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800186e:	f7ff fa1f 	bl	8000cb0 <HAL_GetTick>
 8001872:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001874:	e00e      	b.n	8001894 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001876:	f7ff fa1b 	bl	8000cb0 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b19      	cmp	r3, #25
 8001882:	d907      	bls.n	8001894 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001892:	e006      	b.n	80018a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d1e9      	bne.n	8001876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b20      	cmp	r3, #32
 80018ae:	d003      	beq.n	80018b8 <I2C_IsErrorOccurred+0xe0>
 80018b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0aa      	beq.n	800180e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2220      	movs	r2, #32
 80018c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00b      	beq.n	8001900 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00b      	beq.n	8001944 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01c      	beq.n	8001986 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7ff fe3b 	bl	80015c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <I2C_IsErrorOccurred+0x1bc>)
 800195e:	400b      	ands	r3, r1
 8001960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	431a      	orrs	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2220      	movs	r2, #32
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800198a:	4618      	mov	r0, r3
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	fe00e800 	.word	0xfe00e800

08001998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	4613      	mov	r3, r2
 80019a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019b0:	7a7b      	ldrb	r3, [r7, #9]
 80019b2:	041b      	lsls	r3, r3, #16
 80019b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	0d5b      	lsrs	r3, r3, #21
 80019d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <I2C_TransferConfig+0x60>)
 80019d8:	430b      	orrs	r3, r1
 80019da:	43db      	mvns	r3, r3
 80019dc:	ea02 0103 	and.w	r1, r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	03ff63ff 	.word	0x03ff63ff

080019fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	d138      	bne.n	8001a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e032      	b.n	8001a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	@ 0x24
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	d139      	bne.n	8001b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e033      	b.n	8001b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2224      	movs	r2, #36	@ 0x24
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e000      	b.n	8001b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f000 bff4 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 816d 	beq.w	8001e42 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b68:	4bb4      	ldr	r3, [pc, #720]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d00c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b74:	4bb1      	ldr	r3, [pc, #708]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d157      	bne.n	8001c30 <HAL_RCC_OscConfig+0x104>
 8001b80:	4bae      	ldr	r3, [pc, #696]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b8c:	d150      	bne.n	8001c30 <HAL_RCC_OscConfig+0x104>
 8001b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b92:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bae:	d802      	bhi.n	8001bb6 <HAL_RCC_OscConfig+0x8a>
 8001bb0:	4ba2      	ldr	r3, [pc, #648]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0xb6>
 8001bb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bba:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001bca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bce:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001bd2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001bde:	4b97      	ldr	r3, [pc, #604]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001be6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001bea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001bee:	fa92 f2a2 	rbit	r2, r2
 8001bf2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bf6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bfa:	fab2 f282 	clz	r2, r2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f042 0220 	orr.w	r2, r2, #32
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8114 	beq.w	8001e40 <HAL_RCC_OscConfig+0x314>
 8001c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 810b 	bne.w	8001e40 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f000 bf85 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x124>
 8001c42:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7d      	ldr	r2, [pc, #500]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e036      	b.n	8001cbe <HAL_RCC_OscConfig+0x192>
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x14e>
 8001c60:	4b76      	ldr	r3, [pc, #472]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a75      	ldr	r2, [pc, #468]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b73      	ldr	r3, [pc, #460]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a72      	ldr	r2, [pc, #456]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e021      	b.n	8001cbe <HAL_RCC_OscConfig+0x192>
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x17a>
 8001c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a67      	ldr	r2, [pc, #412]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x192>
 8001ca6:	4b65      	ldr	r3, [pc, #404]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a64      	ldr	r2, [pc, #400]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a61      	ldr	r2, [pc, #388]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc2:	f023 020f 	bic.w	r2, r3, #15
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	495a      	ldr	r1, [pc, #360]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d054      	beq.n	8001d92 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ffe2 	bl	8000cb0 <HAL_GetTick>
 8001cec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf2:	f7fe ffdd 	bl	8000cb0 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d902      	bls.n	8001d08 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	f000 bf19 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
 8001d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001d1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d28:	d802      	bhi.n	8001d30 <HAL_RCC_OscConfig+0x204>
 8001d2a:	4b44      	ldr	r3, [pc, #272]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_OscConfig+0x230>
 8001d30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d34:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d48:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d58:	4b38      	ldr	r3, [pc, #224]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d60:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d68:	fa92 f2a2 	rbit	r2, r2
 8001d6c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d74:	fab2 f282 	clz	r2, r2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f042 0220 	orr.w	r2, r2, #32
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	f002 021f 	and.w	r2, r2, #31
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0b0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1c6>
 8001d90:	e057      	b.n	8001e42 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe ff8d 	bl	8000cb0 <HAL_GetTick>
 8001d96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7fe ff88 	bl	8000cb0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	@ 0x64
 8001daa:	d902      	bls.n	8001db2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f000 bec4 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
 8001db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001dc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dd2:	d802      	bhi.n	8001dda <HAL_RCC_OscConfig+0x2ae>
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x2da>
 8001dda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dde:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001df6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_RCC_OscConfig+0x310>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e0a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001e0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001e1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001e1e:	fab2 f282 	clz	r2, r2
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f042 0220 	orr.w	r2, r2, #32
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f002 021f 	and.w	r2, r2, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1b0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x270>
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_OscConfig+0x316>
 8001e3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 816c 	beq.w	8002130 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e58:	4bcc      	ldr	r3, [pc, #816]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00b      	beq.n	8001e7c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e64:	4bc9      	ldr	r3, [pc, #804]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d16d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x420>
 8001e70:	4bc6      	ldr	r3, [pc, #792]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d167      	bne.n	8001f4c <HAL_RCC_OscConfig+0x420>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e9a:	d802      	bhi.n	8001ea2 <HAL_RCC_OscConfig+0x376>
 8001e9c:	4bbb      	ldr	r3, [pc, #748]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e013      	b.n	8001eca <HAL_RCC_OscConfig+0x39e>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001eba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ec6:	4bb1      	ldr	r3, [pc, #708]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ed0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ed4:	fa92 f2a2 	rbit	r2, r2
 8001ed8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001edc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3e6>
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d002      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f000 be14 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b9e      	ldr	r3, [pc, #632]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	21f8      	movs	r1, #248	@ 0xf8
 8001f28:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f30:	fa91 f1a1 	rbit	r1, r1
 8001f34:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f38:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f3c:	fab1 f181 	clz	r1, r1
 8001f40:	b2c9      	uxtb	r1, r1
 8001f42:	408b      	lsls	r3, r1
 8001f44:	4991      	ldr	r1, [pc, #580]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e0f1      	b.n	8002130 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8083 	beq.w	8002064 <HAL_RCC_OscConfig+0x538>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f70:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	2301      	movs	r3, #1
 8001f88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fe91 	bl	8000cb0 <HAL_GetTick>
 8001f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f94:	f7fe fe8c 	bl	8000cb0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d902      	bls.n	8001faa <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f000 bdc8 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001fbc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_RCC_OscConfig+0x4a4>
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4cc>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fe8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ff4:	4b65      	ldr	r3, [pc, #404]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ffe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800200a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0b4      	beq.n	8001f94 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b58      	ldr	r3, [pc, #352]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	21f8      	movs	r1, #248	@ 0xf8
 8002040:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002048:	fa91 f1a1 	rbit	r1, r1
 800204c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002050:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002054:	fab1 f181 	clz	r1, r1
 8002058:	b2c9      	uxtb	r1, r1
 800205a:	408b      	lsls	r3, r1
 800205c:	494b      	ldr	r1, [pc, #300]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	e065      	b.n	8002130 <HAL_RCC_OscConfig+0x604>
 8002064:	2301      	movs	r3, #1
 8002066:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002076:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002084:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe fe0e 	bl	8000cb0 <HAL_GetTick>
 8002094:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fe09 	bl	8000cb0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d902      	bls.n	80020b0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f000 bd45 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80020c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80020ce:	d802      	bhi.n	80020d6 <HAL_RCC_OscConfig+0x5aa>
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e013      	b.n	80020fe <HAL_RCC_OscConfig+0x5d2>
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x660>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	2202      	movs	r2, #2
 8002100:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002104:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002110:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f002 021f 	and.w	r2, r2, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1b4      	bne.n	800209a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8115 	beq.w	8002370 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07e      	beq.n	8002254 <HAL_RCC_OscConfig+0x728>
 8002156:	2301      	movs	r3, #1
 8002158:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_RCC_OscConfig+0x664>)
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	461a      	mov	r2, r3
 800217c:	2301      	movs	r3, #1
 800217e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe fd96 	bl	8000cb0 <HAL_GetTick>
 8002184:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002188:	e00f      	b.n	80021aa <HAL_RCC_OscConfig+0x67e>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe fd8c 	bl	8000cb0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d902      	bls.n	80021aa <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	f000 bcc8 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021c4:	2202      	movs	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002202:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002204:	4bb0      	ldr	r3, [pc, #704]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002210:	2102      	movs	r1, #2
 8002212:	6019      	str	r1, [r3, #0]
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f1a3 	rbit	r1, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800222a:	6019      	str	r1, [r3, #0]
  return result;
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0a0      	beq.n	8002194 <HAL_RCC_OscConfig+0x668>
 8002252:	e08d      	b.n	8002370 <HAL_RCC_OscConfig+0x844>
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002276:	601a      	str	r2, [r3, #0]
  return result;
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002280:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4b90      	ldr	r3, [pc, #576]	@ (80024cc <HAL_RCC_OscConfig+0x9a0>)
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2300      	movs	r3, #0
 8002294:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe fd0b 	bl	8000cb0 <HAL_GetTick>
 800229a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe fd06 	bl	8000cb0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d902      	bls.n	80022b6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f000 bc42 	b.w	8002b3a <HAL_RCC_OscConfig+0x100e>
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002306:	2202      	movs	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f2a3 	rbit	r2, r3
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002320:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	4b69      	ldr	r3, [pc, #420]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800232e:	2102      	movs	r1, #2
 8002330:	6019      	str	r1, [r3, #0]
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f1a3 	rbit	r1, r3
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002348:	6019      	str	r1, [r3, #0]
  return result;
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d197      	bne.n	80022a0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 819e 	beq.w	80026c2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238c:	4b4e      	ldr	r3, [pc, #312]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d116      	bne.n	80023c6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a4a      	ldr	r2, [pc, #296]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
 80023a4:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b42      	ldr	r3, [pc, #264]	@ (80024d0 <HAL_RCC_OscConfig+0x9a4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b3f      	ldr	r3, [pc, #252]	@ (80024d0 <HAL_RCC_OscConfig+0x9a4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3e      	ldr	r2, [pc, #248]	@ (80024d0 <HAL_RCC_OscConfig+0x9a4>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fc67 	bl	8000cb0 <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7fe fc62 	bl	8000cb0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	@ 0x64
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e39e      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <HAL_RCC_OscConfig+0x9a4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x8fa>
 8002418:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e035      	b.n	8002492 <HAL_RCC_OscConfig+0x966>
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x924>
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a23      	ldr	r2, [pc, #140]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a20      	ldr	r2, [pc, #128]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	e020      	b.n	8002492 <HAL_RCC_OscConfig+0x966>
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x94e>
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a15      	ldr	r2, [pc, #84]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0x966>
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a0f      	ldr	r2, [pc, #60]	@ (80024c8 <HAL_RCC_OscConfig+0x99c>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8087 	beq.w	80025b2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7fe fc04 	bl	8000cb0 <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e012      	b.n	80024d4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fbff 	bl	8000cb0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d908      	bls.n	80024d4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e339      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	10908120 	.word	0x10908120
 80024d0:	40007000 	.word	0x40007000
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024dc:	2202      	movs	r2, #2
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002500:	2202      	movs	r2, #2
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002516:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800251a:	601a      	str	r2, [r3, #0]
  return result;
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002524:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0xa10>
 8002536:	4b98      	ldr	r3, [pc, #608]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0xa38>
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002568:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800256c:	2102      	movs	r1, #2
 800256e:	6011      	str	r1, [r2, #0]
 8002570:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002574:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	fa92 f1a2 	rbit	r1, r2
 800257e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002582:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002586:	6011      	str	r1, [r2, #0]
  return result;
 8002588:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800258c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	fab2 f282 	clz	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f002 021f 	and.w	r2, r2, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f43f af7f 	beq.w	80024ae <HAL_RCC_OscConfig+0x982>
 80025b0:	e07d      	b.n	80026ae <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fb7d 	bl	8000cb0 <HAL_GetTick>
 80025b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fb78 	bl	8000cb0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e2b2      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002600:	2202      	movs	r2, #2
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002608:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800261a:	601a      	str	r2, [r3, #0]
  return result;
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_RCC_OscConfig+0xb10>
 8002636:	4b58      	ldr	r3, [pc, #352]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	e013      	b.n	8002664 <HAL_RCC_OscConfig+0xb38>
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002644:	2202      	movs	r2, #2
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	fa93 f2a3 	rbit	r2, r3
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002668:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800266c:	2102      	movs	r1, #2
 800266e:	6011      	str	r1, [r2, #0]
 8002670:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002674:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	fa92 f1a2 	rbit	r1, r2
 800267e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002682:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002686:	6011      	str	r1, [r2, #0]
  return result;
 8002688:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800268c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d186      	bne.n	80025bc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ae:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a37      	ldr	r2, [pc, #220]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8232 	beq.w	8002b38 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d4:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f000 8201 	beq.w	8002ae4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	f040 8157 	bne.w	80029a2 <HAL_RCC_OscConfig+0xe76>
 80026f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa93 f2a3 	rbit	r2, r3
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002718:	601a      	str	r2, [r3, #0]
  return result;
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002722:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800272e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	461a      	mov	r2, r3
 8002736:	2300      	movs	r3, #0
 8002738:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fab9 	bl	8000cb0 <HAL_GetTick>
 800273e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002742:	e009      	b.n	8002758 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe fab4 	bl	8000cb0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1f0      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002760:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800277c:	601a      	str	r2, [r3, #0]
  return result;
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002790:	d804      	bhi.n	800279c <HAL_RCC_OscConfig+0xc70>
 8002792:	4b01      	ldr	r3, [pc, #4]	@ (8002798 <HAL_RCC_OscConfig+0xc6c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	e029      	b.n	80027ec <HAL_RCC_OscConfig+0xcc0>
 8002798:	40021000 	.word	0x40021000
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	4bc3      	ldr	r3, [pc, #780]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027f8:	6011      	str	r1, [r2, #0]
 80027fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	fa92 f1a2 	rbit	r1, r2
 8002808:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002816:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f042 0220 	orr.w	r2, r2, #32
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f002 021f 	and.w	r2, r2, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d185      	bne.n	8002744 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4baf      	ldr	r3, [pc, #700]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	430b      	orrs	r3, r1
 800285a:	49a7      	ldr	r1, [pc, #668]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002884:	601a      	str	r2, [r3, #0]
  return result;
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800288e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800289a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	461a      	mov	r2, r3
 80028a2:	2301      	movs	r3, #1
 80028a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fa03 	bl	8000cb0 <HAL_GetTick>
 80028aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ae:	e009      	b.n	80028c4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe f9fe 	bl	8000cb0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e13a      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028e8:	601a      	str	r2, [r3, #0]
  return result;
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80028fc:	d802      	bhi.n	8002904 <HAL_RCC_OscConfig+0xdd8>
 80028fe:	4b7e      	ldr	r3, [pc, #504]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	e027      	b.n	8002954 <HAL_RCC_OscConfig+0xe28>
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800290c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002932:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002958:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800295c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002960:	6011      	str	r1, [r2, #0]
 8002962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002966:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fa92 f1a2 	rbit	r1, r2
 8002970:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002974:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002978:	6011      	str	r1, [r2, #0]
  return result;
 800297a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f042 0220 	orr.w	r2, r2, #32
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f002 021f 	and.w	r2, r2, #31
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d087      	beq.n	80028b0 <HAL_RCC_OscConfig+0xd84>
 80029a0:	e0ca      	b.n	8002b38 <HAL_RCC_OscConfig+0x100c>
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029c6:	601a      	str	r2, [r3, #0]
  return result;
 80029c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	461a      	mov	r2, r3
 80029e4:	2300      	movs	r3, #0
 80029e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe f962 	bl	8000cb0 <HAL_GetTick>
 80029ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f0:	e009      	b.n	8002a06 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe f95d 	bl	8000cb0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e099      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a2a:	601a      	str	r2, [r3, #0]
  return result;
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a3e:	d802      	bhi.n	8002a46 <HAL_RCC_OscConfig+0xf1a>
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e027      	b.n	8002a96 <HAL_RCC_OscConfig+0xf6a>
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_RCC_OscConfig+0xfcc>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a9e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002aa2:	6011      	str	r1, [r2, #0]
 8002aa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	fa92 f1a2 	rbit	r1, r2
 8002ab2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002aba:	6011      	str	r1, [r2, #0]
  return result;
 8002abc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ac0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f002 021f 	and.w	r2, r2, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d187      	bne.n	80029f2 <HAL_RCC_OscConfig+0xec6>
 8002ae2:	e029      	b.n	8002b38 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d103      	bne.n	8002afc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e020      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
 8002af8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x1018>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b04:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b20:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b09e      	sub	sp, #120	@ 0x78
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e154      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b89      	ldr	r3, [pc, #548]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b86      	ldr	r3, [pc, #536]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4984      	ldr	r1, [pc, #528]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e13c      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4978      	ldr	r1, [pc, #480]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80cd 	beq.w	8002d56 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d137      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xec>
 8002bc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bdc:	d802      	bhi.n	8002be4 <HAL_RCC_ClockConfig+0x9c>
 8002bde:	4b6b      	ldr	r3, [pc, #428]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	e00f      	b.n	8002c04 <HAL_RCC_ClockConfig+0xbc>
 8002be4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c00:	4b62      	ldr	r3, [pc, #392]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c0c:	fa92 f2a2 	rbit	r2, r2
 8002c10:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c14:	fab2 f282 	clz	r2, r2
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f002 021f 	and.w	r2, r2, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d171      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0ea      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d137      	bne.n	8002cac <HAL_RCC_ClockConfig+0x164>
 8002c3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c40:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c54:	d802      	bhi.n	8002c5c <HAL_RCC_ClockConfig+0x114>
 8002c56:	4b4d      	ldr	r3, [pc, #308]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_ClockConfig+0x134>
 8002c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c78:	4b44      	ldr	r3, [pc, #272]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c80:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c84:	fa92 f2a2 	rbit	r2, r2
 8002c88:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f002 021f 	and.w	r2, r2, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d135      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ae      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
 8002cac:	2302      	movs	r3, #2
 8002cae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc2:	d802      	bhi.n	8002cca <HAL_RCC_ClockConfig+0x182>
 8002cc4:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	e00d      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x19e>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	61ba      	str	r2, [r7, #24]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	617a      	str	r2, [r7, #20]
  return result;
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f002 021f 	and.w	r2, r2, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e07a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	491a      	ldr	r1, [pc, #104]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d26:	f7fd ffc3 	bl	8000cb0 <HAL_GetTick>
 8002d2a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2e:	f7fd ffbf 	bl	8000cb0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e062      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_RCC_ClockConfig+0x244>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 020c 	and.w	r2, r3, #12
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d1eb      	bne.n	8002d2e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d56:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d215      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 0207 	bic.w	r2, r3, #7
 8002d6c:	4906      	ldr	r1, [pc, #24]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <HAL_RCC_ClockConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d006      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e041      	b.n	8002e0a <HAL_RCC_ClockConfig+0x2c2>
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <HAL_RCC_ClockConfig+0x2cc>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	491a      	ldr	r1, [pc, #104]	@ (8002e14 <HAL_RCC_ClockConfig+0x2cc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dba:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <HAL_RCC_ClockConfig+0x2cc>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4912      	ldr	r1, [pc, #72]	@ (8002e14 <HAL_RCC_ClockConfig+0x2cc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dce:	f000 f829 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <HAL_RCC_ClockConfig+0x2cc>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ddc:	22f0      	movs	r2, #240	@ 0xf0
 8002dde:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	fa92 f2a2 	rbit	r2, r2
 8002de6:	60fa      	str	r2, [r7, #12]
  return result;
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	40d3      	lsrs	r3, r2
 8002df2:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <HAL_RCC_ClockConfig+0x2d0>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <HAL_RCC_ClockConfig+0x2d4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_RCC_ClockConfig+0x2d8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd ff10 	bl	8000c28 <HAL_InitTick>
  
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3778      	adds	r7, #120	@ 0x78
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08004fc4 	.word	0x08004fc4
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x30>
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x36>
 8002e52:	e026      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e56:	613b      	str	r3, [r7, #16]
      break;
 8002e58:	e026      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	0c9b      	lsrs	r3, r3, #18
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	4a17      	ldr	r2, [pc, #92]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	4a14      	ldr	r2, [pc, #80]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e80:	4a0e      	ldr	r2, [pc, #56]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e004      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea4:	613b      	str	r3, [r7, #16]
      break;
 8002ea6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea8:	693b      	ldr	r3, [r7, #16]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	007a1200 	.word	0x007a1200
 8002ec0:	08004fdc 	.word	0x08004fdc
 8002ec4:	08004fec 	.word	0x08004fec
 8002ec8:	003d0900 	.word	0x003d0900

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eea:	f7ff ffef 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ef8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002efc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	603a      	str	r2, [r7, #0]
  return result;
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	40d3      	lsrs	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08004fd4 	.word	0x08004fd4

08002f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f2e:	f7ff ffcd 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f3c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	fa92 f2a2 	rbit	r2, r2
 8002f48:	603a      	str	r2, [r7, #0]
  return result;
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	fab2 f282 	clz	r2, r2
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	40d3      	lsrs	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08004fd4 	.word	0x08004fd4

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b092      	sub	sp, #72	@ 0x48
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80cb 	beq.w	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b85      	ldr	r3, [pc, #532]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b82      	ldr	r3, [pc, #520]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4a81      	ldr	r2, [pc, #516]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	61d3      	str	r3, [r2, #28]
 8002fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b7c      	ldr	r3, [pc, #496]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b79      	ldr	r3, [pc, #484]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a78      	ldr	r2, [pc, #480]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fd fe6d 	bl	8000cb0 <HAL_GetTick>
 8002fd6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fd fe69 	bl	8000cb0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	@ 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0d9      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b6f      	ldr	r3, [pc, #444]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003000:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07b      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003010:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003012:	429a      	cmp	r2, r3
 8003014:	d074      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003016:	4b64      	ldr	r3, [pc, #400]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003024:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	4b5d      	ldr	r3, [pc, #372]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003048:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	4b54      	ldr	r3, [pc, #336]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	2300      	movs	r3, #0
 8003066:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003068:	4a4f      	ldr	r2, [pc, #316]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800306a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d043      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd fe1a 	bl	8000cb0 <HAL_GetTick>
 800307c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fd fe16 	bl	8000cb0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e084      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003096:	2302      	movs	r3, #2
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61fb      	str	r3, [r7, #28]
  return result;
 80030ae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	e007      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	4b35      	ldr	r3, [pc, #212]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	2202      	movs	r2, #2
 80030d8:	613a      	str	r2, [r7, #16]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	fa92 f2a2 	rbit	r2, r2
 80030e0:	60fa      	str	r2, [r7, #12]
  return result;
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f002 021f 	and.w	r2, r2, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0bf      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003100:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4926      	ldr	r1, [pc, #152]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003112:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003116:	2b01      	cmp	r3, #1
 8003118:	d105      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311a:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003124:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	491a      	ldr	r1, [pc, #104]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003150:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	f023 0210 	bic.w	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4912      	ldr	r1, [pc, #72]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800315e:	4313      	orrs	r3, r2
 8003160:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800316e:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	490b      	ldr	r1, [pc, #44]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	4903      	ldr	r1, [pc, #12]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3748      	adds	r7, #72	@ 0x48
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
 80031b0:	10908100 	.word	0x10908100

080031b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e040      	b.n	8003248 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fc2a 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	@ 0x24
 80031e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f95e 	bl	80034bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f825 	bl	8003250 <UART_SetConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e01b      	b.n	8003248 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800321e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800322e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f9dd 	bl	8003600 <UART_CheckIdleState>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b8a      	ldr	r3, [pc, #552]	@ (80034a4 <UART_SetConfig+0x254>)
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	6979      	ldr	r1, [r7, #20]
 8003284:	430b      	orrs	r3, r1
 8003286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a78      	ldr	r2, [pc, #480]	@ (80034a8 <UART_SetConfig+0x258>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d120      	bne.n	800330e <UART_SetConfig+0xbe>
 80032cc:	4b77      	ldr	r3, [pc, #476]	@ (80034ac <UART_SetConfig+0x25c>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d817      	bhi.n	8003308 <UART_SetConfig+0xb8>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <UART_SetConfig+0x90>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	080032fd 	.word	0x080032fd
 80032e8:	08003303 	.word	0x08003303
 80032ec:	080032f7 	.word	0x080032f7
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e01d      	b.n	8003332 <UART_SetConfig+0xe2>
 80032f6:	2302      	movs	r3, #2
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e01a      	b.n	8003332 <UART_SetConfig+0xe2>
 80032fc:	2304      	movs	r3, #4
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e017      	b.n	8003332 <UART_SetConfig+0xe2>
 8003302:	2308      	movs	r3, #8
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e014      	b.n	8003332 <UART_SetConfig+0xe2>
 8003308:	2310      	movs	r3, #16
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e011      	b.n	8003332 <UART_SetConfig+0xe2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a67      	ldr	r2, [pc, #412]	@ (80034b0 <UART_SetConfig+0x260>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d102      	bne.n	800331e <UART_SetConfig+0xce>
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e009      	b.n	8003332 <UART_SetConfig+0xe2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a64      	ldr	r2, [pc, #400]	@ (80034b4 <UART_SetConfig+0x264>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d102      	bne.n	800332e <UART_SetConfig+0xde>
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e001      	b.n	8003332 <UART_SetConfig+0xe2>
 800332e:	2310      	movs	r3, #16
 8003330:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333a:	d15a      	bne.n	80033f2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800333c:	7ffb      	ldrb	r3, [r7, #31]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d827      	bhi.n	8003392 <UART_SetConfig+0x142>
 8003342:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <UART_SetConfig+0xf8>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003375 	.word	0x08003375
 8003350:	0800337d 	.word	0x0800337d
 8003354:	08003393 	.word	0x08003393
 8003358:	08003383 	.word	0x08003383
 800335c:	08003393 	.word	0x08003393
 8003360:	08003393 	.word	0x08003393
 8003364:	08003393 	.word	0x08003393
 8003368:	0800338b 	.word	0x0800338b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7ff fdba 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e013      	b.n	800339c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003374:	f7ff fdd8 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8003378:	61b8      	str	r0, [r7, #24]
        break;
 800337a:	e00f      	b.n	800339c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800337c:	4b4e      	ldr	r3, [pc, #312]	@ (80034b8 <UART_SetConfig+0x268>)
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e00c      	b.n	800339c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003382:	f7ff fd4f 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8003386:	61b8      	str	r0, [r7, #24]
        break;
 8003388:	e008      	b.n	800339c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800338e:	61bb      	str	r3, [r7, #24]
        break;
 8003390:	e004      	b.n	800339c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	77bb      	strb	r3, [r7, #30]
        break;
 800339a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d074      	beq.n	800348c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	005a      	lsls	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d916      	bls.n	80033ec <UART_SetConfig+0x19c>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c4:	d212      	bcs.n	80033ec <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f023 030f 	bic.w	r3, r3, #15
 80033ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	b29a      	uxth	r2, r3
 80033dc:	89fb      	ldrh	r3, [r7, #14]
 80033de:	4313      	orrs	r3, r2
 80033e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	89fa      	ldrh	r2, [r7, #14]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e04f      	b.n	800348c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	77bb      	strb	r3, [r7, #30]
 80033f0:	e04c      	b.n	800348c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d828      	bhi.n	800344a <UART_SetConfig+0x1fa>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <UART_SetConfig+0x1b0>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003425 	.word	0x08003425
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003435 	.word	0x08003435
 800340c:	0800344b 	.word	0x0800344b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800344b 	.word	0x0800344b
 8003418:	0800344b 	.word	0x0800344b
 800341c:	0800344b 	.word	0x0800344b
 8003420:	08003443 	.word	0x08003443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7ff fd5e 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003428:	61b8      	str	r0, [r7, #24]
        break;
 800342a:	e013      	b.n	8003454 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7ff fd7c 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8003430:	61b8      	str	r0, [r7, #24]
        break;
 8003432:	e00f      	b.n	8003454 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003434:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <UART_SetConfig+0x268>)
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e00c      	b.n	8003454 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343a:	f7ff fcf3 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 800343e:	61b8      	str	r0, [r7, #24]
        break;
 8003440:	e008      	b.n	8003454 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e004      	b.n	8003454 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	77bb      	strb	r3, [r7, #30]
        break;
 8003452:	bf00      	nop
    }

    if (pclk != 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	085a      	lsrs	r2, r3, #1
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	441a      	add	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d909      	bls.n	8003488 <UART_SetConfig+0x238>
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347a:	d205      	bcs.n	8003488 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e001      	b.n	800348c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003498:	7fbb      	ldrb	r3, [r7, #30]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	efff69f3 	.word	0xefff69f3
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40004800 	.word	0x40004800
 80034b8:	007a1200 	.word	0x007a1200

080034bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ba:	d10a      	bne.n	80035d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b098      	sub	sp, #96	@ 0x60
 8003604:	af02      	add	r7, sp, #8
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003610:	f7fd fb4e 	bl	8000cb0 <HAL_GetTick>
 8003614:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d12e      	bne.n	8003682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f88c 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d021      	beq.n	8003682 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003652:	653b      	str	r3, [r7, #80]	@ 0x50
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e062      	b.n	8003748 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d149      	bne.n	8003724 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f856 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03c      	beq.n	8003724 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	623b      	str	r3, [r7, #32]
   return(result);
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	617b      	str	r3, [r7, #20]
   return(result);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e5      	bne.n	80036dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e011      	b.n	8003748 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3758      	adds	r7, #88	@ 0x58
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003760:	e04f      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d04b      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fd faa1 	bl	8000cb0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <UART_WaitOnFlagUntilTimeout+0x30>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e04e      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d037      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b80      	cmp	r3, #128	@ 0x80
 8003796:	d034      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d031      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d110      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2208      	movs	r2, #8
 80037b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f838 	bl	800382a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2208      	movs	r2, #8
 80037be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e029      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037dc:	d111      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f81e 	bl	800382a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0a0      	beq.n	8003762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382a:	b480      	push	{r7}
 800382c:	b095      	sub	sp, #84	@ 0x54
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003850:	643b      	str	r3, [r7, #64]	@ 0x40
 8003852:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	61fb      	str	r3, [r7, #28]
   return(result);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800388a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389c:	2b01      	cmp	r3, #1
 800389e:	d118      	bne.n	80038d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0310 	bic.w	r3, r3, #16
 80038b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	613b      	str	r3, [r7, #16]
   return(result);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038e6:	bf00      	nop
 80038e8:	3754      	adds	r7, #84	@ 0x54
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <siprintf>:
 80038f4:	b40e      	push	{r1, r2, r3}
 80038f6:	b510      	push	{r4, lr}
 80038f8:	b09d      	sub	sp, #116	@ 0x74
 80038fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80038fc:	9002      	str	r0, [sp, #8]
 80038fe:	9006      	str	r0, [sp, #24]
 8003900:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003904:	480a      	ldr	r0, [pc, #40]	@ (8003930 <siprintf+0x3c>)
 8003906:	9107      	str	r1, [sp, #28]
 8003908:	9104      	str	r1, [sp, #16]
 800390a:	490a      	ldr	r1, [pc, #40]	@ (8003934 <siprintf+0x40>)
 800390c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003910:	9105      	str	r1, [sp, #20]
 8003912:	2400      	movs	r4, #0
 8003914:	a902      	add	r1, sp, #8
 8003916:	6800      	ldr	r0, [r0, #0]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800391c:	f000 f9bc 	bl	8003c98 <_svfiprintf_r>
 8003920:	9b02      	ldr	r3, [sp, #8]
 8003922:	701c      	strb	r4, [r3, #0]
 8003924:	b01d      	add	sp, #116	@ 0x74
 8003926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800392a:	b003      	add	sp, #12
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c
 8003934:	ffff0208 	.word	0xffff0208

08003938 <memmove>:
 8003938:	4288      	cmp	r0, r1
 800393a:	b510      	push	{r4, lr}
 800393c:	eb01 0402 	add.w	r4, r1, r2
 8003940:	d902      	bls.n	8003948 <memmove+0x10>
 8003942:	4284      	cmp	r4, r0
 8003944:	4623      	mov	r3, r4
 8003946:	d807      	bhi.n	8003958 <memmove+0x20>
 8003948:	1e43      	subs	r3, r0, #1
 800394a:	42a1      	cmp	r1, r4
 800394c:	d008      	beq.n	8003960 <memmove+0x28>
 800394e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003956:	e7f8      	b.n	800394a <memmove+0x12>
 8003958:	4402      	add	r2, r0
 800395a:	4601      	mov	r1, r0
 800395c:	428a      	cmp	r2, r1
 800395e:	d100      	bne.n	8003962 <memmove+0x2a>
 8003960:	bd10      	pop	{r4, pc}
 8003962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800396a:	e7f7      	b.n	800395c <memmove+0x24>

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <__errno>:
 800397c:	4b01      	ldr	r3, [pc, #4]	@ (8003984 <__errno+0x8>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	@ (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	@ (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	@ (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	@ (80039cc <__libc_init_array+0x44>)
 800399c:	f000 fc4a 	bl	8004234 <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08005038 	.word	0x08005038
 80039c4:	08005038 	.word	0x08005038
 80039c8:	08005038 	.word	0x08005038
 80039cc:	0800503c 	.word	0x0800503c

080039d0 <__retarget_lock_acquire_recursive>:
 80039d0:	4770      	bx	lr

080039d2 <__retarget_lock_release_recursive>:
 80039d2:	4770      	bx	lr

080039d4 <memcpy>:
 80039d4:	440a      	add	r2, r1
 80039d6:	4291      	cmp	r1, r2
 80039d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039dc:	d100      	bne.n	80039e0 <memcpy+0xc>
 80039de:	4770      	bx	lr
 80039e0:	b510      	push	{r4, lr}
 80039e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d1f9      	bne.n	80039e2 <memcpy+0xe>
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <_free_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4605      	mov	r5, r0
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d041      	beq.n	8003a7c <_free_r+0x8c>
 80039f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039fc:	1f0c      	subs	r4, r1, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bfb8      	it	lt
 8003a02:	18e4      	addlt	r4, r4, r3
 8003a04:	f000 f8e0 	bl	8003bc8 <__malloc_lock>
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <_free_r+0x90>)
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	b933      	cbnz	r3, 8003a1c <_free_r+0x2c>
 8003a0e:	6063      	str	r3, [r4, #4]
 8003a10:	6014      	str	r4, [r2, #0]
 8003a12:	4628      	mov	r0, r5
 8003a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a18:	f000 b8dc 	b.w	8003bd4 <__malloc_unlock>
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	d908      	bls.n	8003a32 <_free_r+0x42>
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	1821      	adds	r1, r4, r0
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf01      	itttt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	1809      	addeq	r1, r1, r0
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	e7ed      	b.n	8003a0e <_free_r+0x1e>
 8003a32:	461a      	mov	r2, r3
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	b10b      	cbz	r3, 8003a3c <_free_r+0x4c>
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d9fa      	bls.n	8003a32 <_free_r+0x42>
 8003a3c:	6811      	ldr	r1, [r2, #0]
 8003a3e:	1850      	adds	r0, r2, r1
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d10b      	bne.n	8003a5c <_free_r+0x6c>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	4401      	add	r1, r0
 8003a48:	1850      	adds	r0, r2, r1
 8003a4a:	4283      	cmp	r3, r0
 8003a4c:	6011      	str	r1, [r2, #0]
 8003a4e:	d1e0      	bne.n	8003a12 <_free_r+0x22>
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	6053      	str	r3, [r2, #4]
 8003a56:	4408      	add	r0, r1
 8003a58:	6010      	str	r0, [r2, #0]
 8003a5a:	e7da      	b.n	8003a12 <_free_r+0x22>
 8003a5c:	d902      	bls.n	8003a64 <_free_r+0x74>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	e7d6      	b.n	8003a12 <_free_r+0x22>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	1821      	adds	r1, r4, r0
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	bf04      	itt	eq
 8003a6c:	6819      	ldreq	r1, [r3, #0]
 8003a6e:	685b      	ldreq	r3, [r3, #4]
 8003a70:	6063      	str	r3, [r4, #4]
 8003a72:	bf04      	itt	eq
 8003a74:	1809      	addeq	r1, r1, r0
 8003a76:	6021      	streq	r1, [r4, #0]
 8003a78:	6054      	str	r4, [r2, #4]
 8003a7a:	e7ca      	b.n	8003a12 <_free_r+0x22>
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
 8003a7e:	bf00      	nop
 8003a80:	200006a8 	.word	0x200006a8

08003a84 <sbrk_aligned>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	4e0f      	ldr	r6, [pc, #60]	@ (8003ac4 <sbrk_aligned+0x40>)
 8003a88:	460c      	mov	r4, r1
 8003a8a:	6831      	ldr	r1, [r6, #0]
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	b911      	cbnz	r1, 8003a96 <sbrk_aligned+0x12>
 8003a90:	f000 fb8a 	bl	80041a8 <_sbrk_r>
 8003a94:	6030      	str	r0, [r6, #0]
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 fb85 	bl	80041a8 <_sbrk_r>
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	d103      	bne.n	8003aaa <sbrk_aligned+0x26>
 8003aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d0f8      	beq.n	8003aa6 <sbrk_aligned+0x22>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fb76 	bl	80041a8 <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d1f2      	bne.n	8003aa6 <sbrk_aligned+0x22>
 8003ac0:	e7ef      	b.n	8003aa2 <sbrk_aligned+0x1e>
 8003ac2:	bf00      	nop
 8003ac4:	200006a4 	.word	0x200006a4

08003ac8 <_malloc_r>:
 8003ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003acc:	1ccd      	adds	r5, r1, #3
 8003ace:	f025 0503 	bic.w	r5, r5, #3
 8003ad2:	3508      	adds	r5, #8
 8003ad4:	2d0c      	cmp	r5, #12
 8003ad6:	bf38      	it	cc
 8003ad8:	250c      	movcc	r5, #12
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	4606      	mov	r6, r0
 8003ade:	db01      	blt.n	8003ae4 <_malloc_r+0x1c>
 8003ae0:	42a9      	cmp	r1, r5
 8003ae2:	d904      	bls.n	8003aee <_malloc_r+0x26>
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	6033      	str	r3, [r6, #0]
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bc4 <_malloc_r+0xfc>
 8003af2:	f000 f869 	bl	8003bc8 <__malloc_lock>
 8003af6:	f8d8 3000 	ldr.w	r3, [r8]
 8003afa:	461c      	mov	r4, r3
 8003afc:	bb44      	cbnz	r4, 8003b50 <_malloc_r+0x88>
 8003afe:	4629      	mov	r1, r5
 8003b00:	4630      	mov	r0, r6
 8003b02:	f7ff ffbf 	bl	8003a84 <sbrk_aligned>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	4604      	mov	r4, r0
 8003b0a:	d158      	bne.n	8003bbe <_malloc_r+0xf6>
 8003b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b10:	4627      	mov	r7, r4
 8003b12:	2f00      	cmp	r7, #0
 8003b14:	d143      	bne.n	8003b9e <_malloc_r+0xd6>
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d04b      	beq.n	8003bb2 <_malloc_r+0xea>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	eb04 0903 	add.w	r9, r4, r3
 8003b24:	f000 fb40 	bl	80041a8 <_sbrk_r>
 8003b28:	4581      	cmp	r9, r0
 8003b2a:	d142      	bne.n	8003bb2 <_malloc_r+0xea>
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	1a6d      	subs	r5, r5, r1
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7ff ffa6 	bl	8003a84 <sbrk_aligned>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d03a      	beq.n	8003bb2 <_malloc_r+0xea>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	442b      	add	r3, r5
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	f8d8 3000 	ldr.w	r3, [r8]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	bb62      	cbnz	r2, 8003ba4 <_malloc_r+0xdc>
 8003b4a:	f8c8 7000 	str.w	r7, [r8]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xa8>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d420      	bmi.n	8003b98 <_malloc_r+0xd0>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xc2>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f82f 	bl	8003bd4 <__malloc_unlock>
 8003b76:	f104 000b 	add.w	r0, r4, #11
 8003b7a:	1d23      	adds	r3, r4, #4
 8003b7c:	f020 0007 	bic.w	r0, r0, #7
 8003b80:	1ac2      	subs	r2, r0, r3
 8003b82:	bf1c      	itt	ne
 8003b84:	1a1b      	subne	r3, r3, r0
 8003b86:	50a3      	strne	r3, [r4, r2]
 8003b88:	e7af      	b.n	8003aea <_malloc_r+0x22>
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	bf0c      	ite	eq
 8003b90:	f8c8 2000 	streq.w	r2, [r8]
 8003b94:	605a      	strne	r2, [r3, #4]
 8003b96:	e7eb      	b.n	8003b70 <_malloc_r+0xa8>
 8003b98:	4623      	mov	r3, r4
 8003b9a:	6864      	ldr	r4, [r4, #4]
 8003b9c:	e7ae      	b.n	8003afc <_malloc_r+0x34>
 8003b9e:	463c      	mov	r4, r7
 8003ba0:	687f      	ldr	r7, [r7, #4]
 8003ba2:	e7b6      	b.n	8003b12 <_malloc_r+0x4a>
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d1fb      	bne.n	8003ba4 <_malloc_r+0xdc>
 8003bac:	2300      	movs	r3, #0
 8003bae:	6053      	str	r3, [r2, #4]
 8003bb0:	e7de      	b.n	8003b70 <_malloc_r+0xa8>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f000 f80c 	bl	8003bd4 <__malloc_unlock>
 8003bbc:	e794      	b.n	8003ae8 <_malloc_r+0x20>
 8003bbe:	6005      	str	r5, [r0, #0]
 8003bc0:	e7d6      	b.n	8003b70 <_malloc_r+0xa8>
 8003bc2:	bf00      	nop
 8003bc4:	200006a8 	.word	0x200006a8

08003bc8 <__malloc_lock>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	@ (8003bd0 <__malloc_lock+0x8>)
 8003bca:	f7ff bf01 	b.w	80039d0 <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	200006a0 	.word	0x200006a0

08003bd4 <__malloc_unlock>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	@ (8003bdc <__malloc_unlock+0x8>)
 8003bd6:	f7ff befc 	b.w	80039d2 <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	200006a0 	.word	0x200006a0

08003be0 <__ssputs_r>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	688e      	ldr	r6, [r1, #8]
 8003be6:	461f      	mov	r7, r3
 8003be8:	42be      	cmp	r6, r7
 8003bea:	680b      	ldr	r3, [r1, #0]
 8003bec:	4682      	mov	sl, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4690      	mov	r8, r2
 8003bf2:	d82d      	bhi.n	8003c50 <__ssputs_r+0x70>
 8003bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bfc:	d026      	beq.n	8003c4c <__ssputs_r+0x6c>
 8003bfe:	6965      	ldr	r5, [r4, #20]
 8003c00:	6909      	ldr	r1, [r1, #16]
 8003c02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c06:	eba3 0901 	sub.w	r9, r3, r1
 8003c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c0e:	1c7b      	adds	r3, r7, #1
 8003c10:	444b      	add	r3, r9
 8003c12:	106d      	asrs	r5, r5, #1
 8003c14:	429d      	cmp	r5, r3
 8003c16:	bf38      	it	cc
 8003c18:	461d      	movcc	r5, r3
 8003c1a:	0553      	lsls	r3, r2, #21
 8003c1c:	d527      	bpl.n	8003c6e <__ssputs_r+0x8e>
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7ff ff52 	bl	8003ac8 <_malloc_r>
 8003c24:	4606      	mov	r6, r0
 8003c26:	b360      	cbz	r0, 8003c82 <__ssputs_r+0xa2>
 8003c28:	6921      	ldr	r1, [r4, #16]
 8003c2a:	464a      	mov	r2, r9
 8003c2c:	f7ff fed2 	bl	80039d4 <memcpy>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	6126      	str	r6, [r4, #16]
 8003c3e:	6165      	str	r5, [r4, #20]
 8003c40:	444e      	add	r6, r9
 8003c42:	eba5 0509 	sub.w	r5, r5, r9
 8003c46:	6026      	str	r6, [r4, #0]
 8003c48:	60a5      	str	r5, [r4, #8]
 8003c4a:	463e      	mov	r6, r7
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	d900      	bls.n	8003c52 <__ssputs_r+0x72>
 8003c50:	463e      	mov	r6, r7
 8003c52:	6820      	ldr	r0, [r4, #0]
 8003c54:	4632      	mov	r2, r6
 8003c56:	4641      	mov	r1, r8
 8003c58:	f7ff fe6e 	bl	8003938 <memmove>
 8003c5c:	68a3      	ldr	r3, [r4, #8]
 8003c5e:	1b9b      	subs	r3, r3, r6
 8003c60:	60a3      	str	r3, [r4, #8]
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	4433      	add	r3, r6
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	462a      	mov	r2, r5
 8003c70:	f000 faaa 	bl	80041c8 <_realloc_r>
 8003c74:	4606      	mov	r6, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1e0      	bne.n	8003c3c <__ssputs_r+0x5c>
 8003c7a:	6921      	ldr	r1, [r4, #16]
 8003c7c:	4650      	mov	r0, sl
 8003c7e:	f7ff feb7 	bl	80039f0 <_free_r>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f8ca 3000 	str.w	r3, [sl]
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	e7e9      	b.n	8003c6a <__ssputs_r+0x8a>
	...

08003c98 <_svfiprintf_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	4698      	mov	r8, r3
 8003c9e:	898b      	ldrh	r3, [r1, #12]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	b09d      	sub	sp, #116	@ 0x74
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	d510      	bpl.n	8003cce <_svfiprintf_r+0x36>
 8003cac:	690b      	ldr	r3, [r1, #16]
 8003cae:	b973      	cbnz	r3, 8003cce <_svfiprintf_r+0x36>
 8003cb0:	2140      	movs	r1, #64	@ 0x40
 8003cb2:	f7ff ff09 	bl	8003ac8 <_malloc_r>
 8003cb6:	6028      	str	r0, [r5, #0]
 8003cb8:	6128      	str	r0, [r5, #16]
 8003cba:	b930      	cbnz	r0, 8003cca <_svfiprintf_r+0x32>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	b01d      	add	sp, #116	@ 0x74
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cca:	2340      	movs	r3, #64	@ 0x40
 8003ccc:	616b      	str	r3, [r5, #20]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cdc:	2330      	movs	r3, #48	@ 0x30
 8003cde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e7c <_svfiprintf_r+0x1e4>
 8003ce2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ce6:	f04f 0901 	mov.w	r9, #1
 8003cea:	4623      	mov	r3, r4
 8003cec:	469a      	mov	sl, r3
 8003cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cf2:	b10a      	cbz	r2, 8003cf8 <_svfiprintf_r+0x60>
 8003cf4:	2a25      	cmp	r2, #37	@ 0x25
 8003cf6:	d1f9      	bne.n	8003cec <_svfiprintf_r+0x54>
 8003cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cfc:	d00b      	beq.n	8003d16 <_svfiprintf_r+0x7e>
 8003cfe:	465b      	mov	r3, fp
 8003d00:	4622      	mov	r2, r4
 8003d02:	4629      	mov	r1, r5
 8003d04:	4638      	mov	r0, r7
 8003d06:	f7ff ff6b 	bl	8003be0 <__ssputs_r>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f000 80a7 	beq.w	8003e5e <_svfiprintf_r+0x1c6>
 8003d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d12:	445a      	add	r2, fp
 8003d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d16:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 809f 	beq.w	8003e5e <_svfiprintf_r+0x1c6>
 8003d20:	2300      	movs	r3, #0
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295
 8003d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d2a:	f10a 0a01 	add.w	sl, sl, #1
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	9307      	str	r3, [sp, #28]
 8003d32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d38:	4654      	mov	r4, sl
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	484e      	ldr	r0, [pc, #312]	@ (8003e7c <_svfiprintf_r+0x1e4>)
 8003d42:	f7fc fa45 	bl	80001d0 <memchr>
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	b9d8      	cbnz	r0, 8003d82 <_svfiprintf_r+0xea>
 8003d4a:	06d0      	lsls	r0, r2, #27
 8003d4c:	bf44      	itt	mi
 8003d4e:	2320      	movmi	r3, #32
 8003d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d54:	0711      	lsls	r1, r2, #28
 8003d56:	bf44      	itt	mi
 8003d58:	232b      	movmi	r3, #43	@ 0x2b
 8003d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d64:	d015      	beq.n	8003d92 <_svfiprintf_r+0xfa>
 8003d66:	9a07      	ldr	r2, [sp, #28]
 8003d68:	4654      	mov	r4, sl
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f04f 0c0a 	mov.w	ip, #10
 8003d70:	4621      	mov	r1, r4
 8003d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d76:	3b30      	subs	r3, #48	@ 0x30
 8003d78:	2b09      	cmp	r3, #9
 8003d7a:	d94b      	bls.n	8003e14 <_svfiprintf_r+0x17c>
 8003d7c:	b1b0      	cbz	r0, 8003dac <_svfiprintf_r+0x114>
 8003d7e:	9207      	str	r2, [sp, #28]
 8003d80:	e014      	b.n	8003dac <_svfiprintf_r+0x114>
 8003d82:	eba0 0308 	sub.w	r3, r0, r8
 8003d86:	fa09 f303 	lsl.w	r3, r9, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	46a2      	mov	sl, r4
 8003d90:	e7d2      	b.n	8003d38 <_svfiprintf_r+0xa0>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	1d19      	adds	r1, r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	9103      	str	r1, [sp, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bfbb      	ittet	lt
 8003d9e:	425b      	neglt	r3, r3
 8003da0:	f042 0202 	orrlt.w	r2, r2, #2
 8003da4:	9307      	strge	r3, [sp, #28]
 8003da6:	9307      	strlt	r3, [sp, #28]
 8003da8:	bfb8      	it	lt
 8003daa:	9204      	strlt	r2, [sp, #16]
 8003dac:	7823      	ldrb	r3, [r4, #0]
 8003dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003db0:	d10a      	bne.n	8003dc8 <_svfiprintf_r+0x130>
 8003db2:	7863      	ldrb	r3, [r4, #1]
 8003db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db6:	d132      	bne.n	8003e1e <_svfiprintf_r+0x186>
 8003db8:	9b03      	ldr	r3, [sp, #12]
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9203      	str	r2, [sp, #12]
 8003dc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dc4:	3402      	adds	r4, #2
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e8c <_svfiprintf_r+0x1f4>
 8003dcc:	7821      	ldrb	r1, [r4, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	f7fc f9fd 	bl	80001d0 <memchr>
 8003dd6:	b138      	cbz	r0, 8003de8 <_svfiprintf_r+0x150>
 8003dd8:	9b04      	ldr	r3, [sp, #16]
 8003dda:	eba0 000a 	sub.w	r0, r0, sl
 8003dde:	2240      	movs	r2, #64	@ 0x40
 8003de0:	4082      	lsls	r2, r0
 8003de2:	4313      	orrs	r3, r2
 8003de4:	3401      	adds	r4, #1
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dec:	4824      	ldr	r0, [pc, #144]	@ (8003e80 <_svfiprintf_r+0x1e8>)
 8003dee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003df2:	2206      	movs	r2, #6
 8003df4:	f7fc f9ec 	bl	80001d0 <memchr>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d036      	beq.n	8003e6a <_svfiprintf_r+0x1d2>
 8003dfc:	4b21      	ldr	r3, [pc, #132]	@ (8003e84 <_svfiprintf_r+0x1ec>)
 8003dfe:	bb1b      	cbnz	r3, 8003e48 <_svfiprintf_r+0x1b0>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	3307      	adds	r3, #7
 8003e04:	f023 0307 	bic.w	r3, r3, #7
 8003e08:	3308      	adds	r3, #8
 8003e0a:	9303      	str	r3, [sp, #12]
 8003e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e0e:	4433      	add	r3, r6
 8003e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e12:	e76a      	b.n	8003cea <_svfiprintf_r+0x52>
 8003e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e18:	460c      	mov	r4, r1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e7a8      	b.n	8003d70 <_svfiprintf_r+0xd8>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	3401      	adds	r4, #1
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f04f 0c0a 	mov.w	ip, #10
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e30:	3a30      	subs	r2, #48	@ 0x30
 8003e32:	2a09      	cmp	r2, #9
 8003e34:	d903      	bls.n	8003e3e <_svfiprintf_r+0x1a6>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c6      	beq.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3a:	9105      	str	r1, [sp, #20]
 8003e3c:	e7c4      	b.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e42:	4604      	mov	r4, r0
 8003e44:	2301      	movs	r3, #1
 8003e46:	e7f0      	b.n	8003e2a <_svfiprintf_r+0x192>
 8003e48:	ab03      	add	r3, sp, #12
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <_svfiprintf_r+0x1f0>)
 8003e50:	a904      	add	r1, sp, #16
 8003e52:	4638      	mov	r0, r7
 8003e54:	f3af 8000 	nop.w
 8003e58:	1c42      	adds	r2, r0, #1
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	d1d6      	bne.n	8003e0c <_svfiprintf_r+0x174>
 8003e5e:	89ab      	ldrh	r3, [r5, #12]
 8003e60:	065b      	lsls	r3, r3, #25
 8003e62:	f53f af2d 	bmi.w	8003cc0 <_svfiprintf_r+0x28>
 8003e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e68:	e72c      	b.n	8003cc4 <_svfiprintf_r+0x2c>
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <_svfiprintf_r+0x1f0>)
 8003e72:	a904      	add	r1, sp, #16
 8003e74:	4638      	mov	r0, r7
 8003e76:	f000 f879 	bl	8003f6c <_printf_i>
 8003e7a:	e7ed      	b.n	8003e58 <_svfiprintf_r+0x1c0>
 8003e7c:	08004ffc 	.word	0x08004ffc
 8003e80:	08005006 	.word	0x08005006
 8003e84:	00000000 	.word	0x00000000
 8003e88:	08003be1 	.word	0x08003be1
 8003e8c:	08005002 	.word	0x08005002

08003e90 <_printf_common>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	4616      	mov	r6, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	688a      	ldr	r2, [r1, #8]
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bfb8      	it	lt
 8003ea4:	4613      	movlt	r3, r2
 8003ea6:	6033      	str	r3, [r6, #0]
 8003ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eac:	4607      	mov	r7, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	b10a      	cbz	r2, 8003eb6 <_printf_common+0x26>
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	0699      	lsls	r1, r3, #26
 8003eba:	bf42      	ittt	mi
 8003ebc:	6833      	ldrmi	r3, [r6, #0]
 8003ebe:	3302      	addmi	r3, #2
 8003ec0:	6033      	strmi	r3, [r6, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	f015 0506 	ands.w	r5, r5, #6
 8003ec8:	d106      	bne.n	8003ed8 <_printf_common+0x48>
 8003eca:	f104 0a19 	add.w	sl, r4, #25
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	6832      	ldr	r2, [r6, #0]
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	dc26      	bgt.n	8003f26 <_printf_common+0x96>
 8003ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	3b00      	subs	r3, #0
 8003ee0:	bf18      	it	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	0692      	lsls	r2, r2, #26
 8003ee6:	d42b      	bmi.n	8003f40 <_printf_common+0xb0>
 8003ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003eec:	4641      	mov	r1, r8
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c8      	blx	r9
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d01e      	beq.n	8003f34 <_printf_common+0xa4>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	6922      	ldr	r2, [r4, #16]
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	bf02      	ittt	eq
 8003f02:	68e5      	ldreq	r5, [r4, #12]
 8003f04:	6833      	ldreq	r3, [r6, #0]
 8003f06:	1aed      	subeq	r5, r5, r3
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	bf0c      	ite	eq
 8003f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f10:	2500      	movne	r5, #0
 8003f12:	4293      	cmp	r3, r2
 8003f14:	bfc4      	itt	gt
 8003f16:	1a9b      	subgt	r3, r3, r2
 8003f18:	18ed      	addgt	r5, r5, r3
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	341a      	adds	r4, #26
 8003f1e:	42b5      	cmp	r5, r6
 8003f20:	d11a      	bne.n	8003f58 <_printf_common+0xc8>
 8003f22:	2000      	movs	r0, #0
 8003f24:	e008      	b.n	8003f38 <_printf_common+0xa8>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4652      	mov	r2, sl
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	47c8      	blx	r9
 8003f30:	3001      	adds	r0, #1
 8003f32:	d103      	bne.n	8003f3c <_printf_common+0xac>
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	e7c6      	b.n	8003ece <_printf_common+0x3e>
 8003f40:	18e1      	adds	r1, r4, r3
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	2030      	movs	r0, #48	@ 0x30
 8003f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f4a:	4422      	add	r2, r4
 8003f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f54:	3302      	adds	r3, #2
 8003f56:	e7c7      	b.n	8003ee8 <_printf_common+0x58>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	4638      	mov	r0, r7
 8003f60:	47c8      	blx	r9
 8003f62:	3001      	adds	r0, #1
 8003f64:	d0e6      	beq.n	8003f34 <_printf_common+0xa4>
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7d9      	b.n	8003f1e <_printf_common+0x8e>
	...

08003f6c <_printf_i>:
 8003f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	7e0f      	ldrb	r7, [r1, #24]
 8003f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f74:	2f78      	cmp	r7, #120	@ 0x78
 8003f76:	4691      	mov	r9, r2
 8003f78:	4680      	mov	r8, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	469a      	mov	sl, r3
 8003f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f82:	d807      	bhi.n	8003f94 <_printf_i+0x28>
 8003f84:	2f62      	cmp	r7, #98	@ 0x62
 8003f86:	d80a      	bhi.n	8003f9e <_printf_i+0x32>
 8003f88:	2f00      	cmp	r7, #0
 8003f8a:	f000 80d1 	beq.w	8004130 <_printf_i+0x1c4>
 8003f8e:	2f58      	cmp	r7, #88	@ 0x58
 8003f90:	f000 80b8 	beq.w	8004104 <_printf_i+0x198>
 8003f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f9c:	e03a      	b.n	8004014 <_printf_i+0xa8>
 8003f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fa2:	2b15      	cmp	r3, #21
 8003fa4:	d8f6      	bhi.n	8003f94 <_printf_i+0x28>
 8003fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8003fac <_printf_i+0x40>)
 8003fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fac:	08004005 	.word	0x08004005
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08003f95 	.word	0x08003f95
 8003fb8:	08003f95 	.word	0x08003f95
 8003fbc:	08003f95 	.word	0x08003f95
 8003fc0:	08003f95 	.word	0x08003f95
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08003f95 	.word	0x08003f95
 8003fcc:	08003f95 	.word	0x08003f95
 8003fd0:	08003f95 	.word	0x08003f95
 8003fd4:	08003f95 	.word	0x08003f95
 8003fd8:	08004117 	.word	0x08004117
 8003fdc:	08004043 	.word	0x08004043
 8003fe0:	080040d1 	.word	0x080040d1
 8003fe4:	08003f95 	.word	0x08003f95
 8003fe8:	08003f95 	.word	0x08003f95
 8003fec:	08004139 	.word	0x08004139
 8003ff0:	08003f95 	.word	0x08003f95
 8003ff4:	08004043 	.word	0x08004043
 8003ff8:	08003f95 	.word	0x08003f95
 8003ffc:	08003f95 	.word	0x08003f95
 8004000:	080040d9 	.word	0x080040d9
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6032      	str	r2, [r6, #0]
 800400c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004014:	2301      	movs	r3, #1
 8004016:	e09c      	b.n	8004152 <_printf_i+0x1e6>
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6031      	str	r1, [r6, #0]
 8004020:	0606      	lsls	r6, r0, #24
 8004022:	d501      	bpl.n	8004028 <_printf_i+0xbc>
 8004024:	681d      	ldr	r5, [r3, #0]
 8004026:	e003      	b.n	8004030 <_printf_i+0xc4>
 8004028:	0645      	lsls	r5, r0, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0xb8>
 800402c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004030:	2d00      	cmp	r5, #0
 8004032:	da03      	bge.n	800403c <_printf_i+0xd0>
 8004034:	232d      	movs	r3, #45	@ 0x2d
 8004036:	426d      	negs	r5, r5
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800403c:	4858      	ldr	r0, [pc, #352]	@ (80041a0 <_printf_i+0x234>)
 800403e:	230a      	movs	r3, #10
 8004040:	e011      	b.n	8004066 <_printf_i+0xfa>
 8004042:	6821      	ldr	r1, [r4, #0]
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	0608      	lsls	r0, r1, #24
 8004048:	f853 5b04 	ldr.w	r5, [r3], #4
 800404c:	d402      	bmi.n	8004054 <_printf_i+0xe8>
 800404e:	0649      	lsls	r1, r1, #25
 8004050:	bf48      	it	mi
 8004052:	b2ad      	uxthmi	r5, r5
 8004054:	2f6f      	cmp	r7, #111	@ 0x6f
 8004056:	4852      	ldr	r0, [pc, #328]	@ (80041a0 <_printf_i+0x234>)
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	bf14      	ite	ne
 800405c:	230a      	movne	r3, #10
 800405e:	2308      	moveq	r3, #8
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004066:	6866      	ldr	r6, [r4, #4]
 8004068:	60a6      	str	r6, [r4, #8]
 800406a:	2e00      	cmp	r6, #0
 800406c:	db05      	blt.n	800407a <_printf_i+0x10e>
 800406e:	6821      	ldr	r1, [r4, #0]
 8004070:	432e      	orrs	r6, r5
 8004072:	f021 0104 	bic.w	r1, r1, #4
 8004076:	6021      	str	r1, [r4, #0]
 8004078:	d04b      	beq.n	8004112 <_printf_i+0x1a6>
 800407a:	4616      	mov	r6, r2
 800407c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004080:	fb03 5711 	mls	r7, r3, r1, r5
 8004084:	5dc7      	ldrb	r7, [r0, r7]
 8004086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800408a:	462f      	mov	r7, r5
 800408c:	42bb      	cmp	r3, r7
 800408e:	460d      	mov	r5, r1
 8004090:	d9f4      	bls.n	800407c <_printf_i+0x110>
 8004092:	2b08      	cmp	r3, #8
 8004094:	d10b      	bne.n	80040ae <_printf_i+0x142>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	07df      	lsls	r7, r3, #31
 800409a:	d508      	bpl.n	80040ae <_printf_i+0x142>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	6861      	ldr	r1, [r4, #4]
 80040a0:	4299      	cmp	r1, r3
 80040a2:	bfde      	ittt	le
 80040a4:	2330      	movle	r3, #48	@ 0x30
 80040a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040ae:	1b92      	subs	r2, r2, r6
 80040b0:	6122      	str	r2, [r4, #16]
 80040b2:	f8cd a000 	str.w	sl, [sp]
 80040b6:	464b      	mov	r3, r9
 80040b8:	aa03      	add	r2, sp, #12
 80040ba:	4621      	mov	r1, r4
 80040bc:	4640      	mov	r0, r8
 80040be:	f7ff fee7 	bl	8003e90 <_printf_common>
 80040c2:	3001      	adds	r0, #1
 80040c4:	d14a      	bne.n	800415c <_printf_i+0x1f0>
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	b004      	add	sp, #16
 80040cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	f043 0320 	orr.w	r3, r3, #32
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	4832      	ldr	r0, [pc, #200]	@ (80041a4 <_printf_i+0x238>)
 80040da:	2778      	movs	r7, #120	@ 0x78
 80040dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	6831      	ldr	r1, [r6, #0]
 80040e4:	061f      	lsls	r7, r3, #24
 80040e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80040ea:	d402      	bmi.n	80040f2 <_printf_i+0x186>
 80040ec:	065f      	lsls	r7, r3, #25
 80040ee:	bf48      	it	mi
 80040f0:	b2ad      	uxthmi	r5, r5
 80040f2:	6031      	str	r1, [r6, #0]
 80040f4:	07d9      	lsls	r1, r3, #31
 80040f6:	bf44      	itt	mi
 80040f8:	f043 0320 	orrmi.w	r3, r3, #32
 80040fc:	6023      	strmi	r3, [r4, #0]
 80040fe:	b11d      	cbz	r5, 8004108 <_printf_i+0x19c>
 8004100:	2310      	movs	r3, #16
 8004102:	e7ad      	b.n	8004060 <_printf_i+0xf4>
 8004104:	4826      	ldr	r0, [pc, #152]	@ (80041a0 <_printf_i+0x234>)
 8004106:	e7e9      	b.n	80040dc <_printf_i+0x170>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	f023 0320 	bic.w	r3, r3, #32
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	e7f6      	b.n	8004100 <_printf_i+0x194>
 8004112:	4616      	mov	r6, r2
 8004114:	e7bd      	b.n	8004092 <_printf_i+0x126>
 8004116:	6833      	ldr	r3, [r6, #0]
 8004118:	6825      	ldr	r5, [r4, #0]
 800411a:	6961      	ldr	r1, [r4, #20]
 800411c:	1d18      	adds	r0, r3, #4
 800411e:	6030      	str	r0, [r6, #0]
 8004120:	062e      	lsls	r6, r5, #24
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	d501      	bpl.n	800412a <_printf_i+0x1be>
 8004126:	6019      	str	r1, [r3, #0]
 8004128:	e002      	b.n	8004130 <_printf_i+0x1c4>
 800412a:	0668      	lsls	r0, r5, #25
 800412c:	d5fb      	bpl.n	8004126 <_printf_i+0x1ba>
 800412e:	8019      	strh	r1, [r3, #0]
 8004130:	2300      	movs	r3, #0
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	4616      	mov	r6, r2
 8004136:	e7bc      	b.n	80040b2 <_printf_i+0x146>
 8004138:	6833      	ldr	r3, [r6, #0]
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	6032      	str	r2, [r6, #0]
 800413e:	681e      	ldr	r6, [r3, #0]
 8004140:	6862      	ldr	r2, [r4, #4]
 8004142:	2100      	movs	r1, #0
 8004144:	4630      	mov	r0, r6
 8004146:	f7fc f843 	bl	80001d0 <memchr>
 800414a:	b108      	cbz	r0, 8004150 <_printf_i+0x1e4>
 800414c:	1b80      	subs	r0, r0, r6
 800414e:	6060      	str	r0, [r4, #4]
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	6123      	str	r3, [r4, #16]
 8004154:	2300      	movs	r3, #0
 8004156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800415a:	e7aa      	b.n	80040b2 <_printf_i+0x146>
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	4632      	mov	r2, r6
 8004160:	4649      	mov	r1, r9
 8004162:	4640      	mov	r0, r8
 8004164:	47d0      	blx	sl
 8004166:	3001      	adds	r0, #1
 8004168:	d0ad      	beq.n	80040c6 <_printf_i+0x15a>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	079b      	lsls	r3, r3, #30
 800416e:	d413      	bmi.n	8004198 <_printf_i+0x22c>
 8004170:	68e0      	ldr	r0, [r4, #12]
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	4298      	cmp	r0, r3
 8004176:	bfb8      	it	lt
 8004178:	4618      	movlt	r0, r3
 800417a:	e7a6      	b.n	80040ca <_printf_i+0x15e>
 800417c:	2301      	movs	r3, #1
 800417e:	4632      	mov	r2, r6
 8004180:	4649      	mov	r1, r9
 8004182:	4640      	mov	r0, r8
 8004184:	47d0      	blx	sl
 8004186:	3001      	adds	r0, #1
 8004188:	d09d      	beq.n	80040c6 <_printf_i+0x15a>
 800418a:	3501      	adds	r5, #1
 800418c:	68e3      	ldr	r3, [r4, #12]
 800418e:	9903      	ldr	r1, [sp, #12]
 8004190:	1a5b      	subs	r3, r3, r1
 8004192:	42ab      	cmp	r3, r5
 8004194:	dcf2      	bgt.n	800417c <_printf_i+0x210>
 8004196:	e7eb      	b.n	8004170 <_printf_i+0x204>
 8004198:	2500      	movs	r5, #0
 800419a:	f104 0619 	add.w	r6, r4, #25
 800419e:	e7f5      	b.n	800418c <_printf_i+0x220>
 80041a0:	0800500d 	.word	0x0800500d
 80041a4:	0800501e 	.word	0x0800501e

080041a8 <_sbrk_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d06      	ldr	r5, [pc, #24]	@ (80041c4 <_sbrk_r+0x1c>)
 80041ac:	2300      	movs	r3, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	f7fc fcb0 	bl	8000b18 <_sbrk>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_sbrk_r+0x1a>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_sbrk_r+0x1a>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	2000069c 	.word	0x2000069c

080041c8 <_realloc_r>:
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	4607      	mov	r7, r0
 80041ce:	4614      	mov	r4, r2
 80041d0:	460d      	mov	r5, r1
 80041d2:	b921      	cbnz	r1, 80041de <_realloc_r+0x16>
 80041d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041d8:	4611      	mov	r1, r2
 80041da:	f7ff bc75 	b.w	8003ac8 <_malloc_r>
 80041de:	b92a      	cbnz	r2, 80041ec <_realloc_r+0x24>
 80041e0:	f7ff fc06 	bl	80039f0 <_free_r>
 80041e4:	4625      	mov	r5, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ec:	f000 f81a 	bl	8004224 <_malloc_usable_size_r>
 80041f0:	4284      	cmp	r4, r0
 80041f2:	4606      	mov	r6, r0
 80041f4:	d802      	bhi.n	80041fc <_realloc_r+0x34>
 80041f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041fa:	d8f4      	bhi.n	80041e6 <_realloc_r+0x1e>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4638      	mov	r0, r7
 8004200:	f7ff fc62 	bl	8003ac8 <_malloc_r>
 8004204:	4680      	mov	r8, r0
 8004206:	b908      	cbnz	r0, 800420c <_realloc_r+0x44>
 8004208:	4645      	mov	r5, r8
 800420a:	e7ec      	b.n	80041e6 <_realloc_r+0x1e>
 800420c:	42b4      	cmp	r4, r6
 800420e:	4622      	mov	r2, r4
 8004210:	4629      	mov	r1, r5
 8004212:	bf28      	it	cs
 8004214:	4632      	movcs	r2, r6
 8004216:	f7ff fbdd 	bl	80039d4 <memcpy>
 800421a:	4629      	mov	r1, r5
 800421c:	4638      	mov	r0, r7
 800421e:	f7ff fbe7 	bl	80039f0 <_free_r>
 8004222:	e7f1      	b.n	8004208 <_realloc_r+0x40>

08004224 <_malloc_usable_size_r>:
 8004224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004228:	1f18      	subs	r0, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfbc      	itt	lt
 800422e:	580b      	ldrlt	r3, [r1, r0]
 8004230:	18c0      	addlt	r0, r0, r3
 8004232:	4770      	bx	lr

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
